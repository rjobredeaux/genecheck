(block_matrices
 (Block2M1_TCC1 0
  (Block2M1_TCC1-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (Block2M1_TCC2 0
  (Block2M1_TCC2-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (Block2M2_TCC1 0
  (Block2M2_TCC1-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (Block2M2_TCC2 0
  (Block2M2_TCC2-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (Block2M3_TCC1 0
  (Block2M3_TCC1-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (Block2M3_TCC2 0
  (Block2M3_TCC2-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (Block2M4_TCC1 0
  (Block2M4_TCC1-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (Block2M4_TCC2 0
  (Block2M4_TCC2-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (M2Block_TCC1 0
  (M2Block_TCC1-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (M2Block_TCC2 0
  (M2Block_TCC2-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (M2Block_TCC3 0
  (M2Block_TCC3-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (M2Block_TCC4 0
  (M2Block_TCC4-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (M2Block_TCC5 0
  (M2Block_TCC5-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (M2Block_TCC6 0
  (M2Block_TCC6-1 nil 3537005172 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (access_m_1 0
  (access_m_1-1 nil 3598381838
   ("" (skosimp)
    (("" (expand Block2M1)
      (("" (expand M2Block)
        (("" (decompose-equality)
          (("1" (decompose-equality)
            (("1" (typepred x!1)
              (("1" (expand M2Block)
                (("1" (assert)
                  (("1" (typepred x!2)
                    (("1" (expand M2Block) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (assert)
                (("2" (typepred j!1)
                  (("2" (expand M2Block) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (typepred j!1)
                (("3" (expand M2Block) (("3" (propax) nil nil)) nil))
                nil))
              nil)
             ("4" (skosimp)
              (("4" (typepred i!1)
                (("4" (expand M2Block) (("4" (propax) nil nil)) nil))
                nil))
              nil)
             ("5" (skosimp)
              (("5" (typepred i!1)
                (("5" (expand M2Block) (("5" (propax) nil nil)) nil))
                nil))
              nil)
             ("6" (skosimp)
              (("6" (typepred j!1)
                (("6" (expand M2Block) (("6" (propax) nil nil)) nil))
                nil))
              nil)
             ("7" (skosimp)
              (("7" (typepred j!1)
                (("7" (expand M2Block) (("7" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand M2Block) (("2" (propax) nil nil)) nil)
           ("3" (skosimp)
            (("3" (typepred j!1)
              (("3" (expand M2Block) (("3" (propax) nil nil)) nil))
              nil))
            nil)
           ("4" (skosimp)
            (("4" (typepred j!1)
              (("4" (expand M2Block) (("4" (propax) nil nil)) nil))
              nil))
            nil)
           ("5" (skosimp)
            (("5" (typepred i!1)
              (("5" (expand M2Block) (("5" (propax) nil nil)) nil))
              nil))
            nil)
           ("6" (skosimp)
            (("6" (typepred i!1)
              (("6" (expand M2Block) (("6" (propax) nil nil)) nil))
              nil))
            nil)
           ("7" (skosimp)
            (("7" (typepred j!1)
              (("7" (expand M2Block) (("7" (propax) nil nil)) nil))
              nil))
            nil)
           ("8" (skosimp)
            (("8" (typepred j!1)
              (("8" (expand M2Block) (("8" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Block2M1 const-decl "Matrix" block_matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   shostak))
 (access_m_2 0
  (access_m_2-1 nil 3598382478
   ("" (skosimp)
    (("" (expand M2Block)
      (("" (decompose-equality)
        (("1" (expand Block2M2)
          (("1" (typepred A!1)
            (("1" (typepred B!1) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (expand Block2M2) (("2" (propax) nil nil)) nil)
         ("3" (expand Block2M2)
          (("3" (decompose-equality)
            (("3" (typepred B!1)
              (("3" (typepred A!1)
                (("3" (assert)
                  (("3" (replace -2)
                    (("3" (replace -4) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skosimp)
          (("4" (typepred j!1) (("4" (assert) nil nil)) nil)) nil)
         ("5" (skosimp)
          (("5" (typepred j!1) (("5" (assert) nil nil)) nil)) nil)
         ("6" (skosimp)
          (("6" (typepred j!1) (("6" (assert) nil nil)) nil)) nil)
         ("7" (skosimp)
          (("7" (typepred i!1) (("7" (assert) nil nil)) nil)) nil)
         ("8" (skosimp)
          (("8" (typepred j!1) (("8" (assert) nil nil)) nil)) nil)
         ("9" (skosimp)
          (("9" (typepred j!1) (("9" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((M2Block const-decl "Block_Matrix" block_matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (Mat type-eq-decl nil matrices nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (access_m_3 0
  (access_m_3-1 nil 3598382788
   ("" (skosimp)
    (("" (expand Block2M3)
      (("" (expand M2Block)
        (("" (decompose-equality)
          (("1" (decompose-equality)
            (("1" (typepred x!1)
              (("1" (expand M2Block) (("1" (assert) nil nil)) nil))
              nil)
             ("2" (skosimp)
              (("2" (typepred i!1)
                (("2" (expand M2Block) (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (typepred j!1)
                (("3" (expand M2Block)
                  (("3" (typepred i!1)
                    (("3" (expand M2Block) (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (skosimp)
              (("4" (typepred j!1)
                (("4" (expand M2Block) (("4" (propax) nil nil)) nil))
                nil))
              nil)
             ("5" (skosimp)
              (("5" (typepred j!1)
                (("5" (expand M2Block)
                  (("5" (typepred i!1)
                    (("5" (expand M2Block)
                      (("5" (typepred i!1)
                        (("5" (expand M2Block) (("5" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand M2Block)
            (("2" (typepred A!1)
              (("2" (typepred C!1)
                (("2" (replace -1)
                  (("2" (replace -3) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp)
            (("3" (typepred j!1)
              (("3" (expand M2Block)
                (("3" (typepred i!1)
                  (("3" (expand M2Block) (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skosimp)
            (("4" (typepred j!1)
              (("4" (expand M2Block)
                (("4" (typepred i!1)
                  (("4" (expand M2Block) (("4" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (skosimp)
            (("5" (typepred j!1)
              (("5" (expand M2Block) (("5" (propax) nil nil)) nil))
              nil))
            nil)
           ("6" (skosimp)
            (("6" (typepred j!1)
              (("6" (expand M2Block)
                (("6" (typepred i!1)
                  (("6" (expand M2Block)
                    (("6" (typepred i!1)
                      (("6" (expand M2Block)
                        (("6" (typepred j!1)
                          (("6" (expand M2Block)
                            (("6" (typepred i!1)
                              (("6"
                                (expand M2Block)
                                (("6"
                                  (typepred C!1)
                                  (("6"
                                    (typepred A!1)
                                    (("6"
                                      (replace -3)
                                      (("6" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Block2M3 const-decl "Matrix" block_matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   shostak))
 (access_m_4 0
  (access_m_4-1 nil 3598383004
   ("" (skosimp)
    (("" (expand Block2M4)
      (("" (expand M2Block)
        (("" (decompose-equality)
          (("1" (decompose-equality)
            (("1" (skosimp)
              (("1" (typepred j!1)
                (("1" (expand M2Block)
                  (("1" (typepred D!1)
                    (("1" (typepred C!1)
                      (("1" (replace -2)
                        (("1" (replace -4) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (typepred j!1)
                (("2" (expand M2Block)
                  (("2" (typepred i!1)
                    (("2" (expand M2Block)
                      (("2" (typepred B!1)
                        (("2" (typepred D!1)
                          (("2" (replace -1)
                            (("2" (replace -3) (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand M2Block)
            (("2" (typepred B!1)
              (("2" (typepred C!1)
                (("2" (replace -3)
                  (("2" (replace -2)
                    (("2" (typepred D!1)
                      (("2" (replace -1)
                        (("2" (replace -2) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp)
            (("3" (typepred j!1)
              (("3" (expand M2Block)
                (("3" (typepred D!1)
                  (("3" (replace -2)
                    (("3" (typepred C!1)
                      (("3" (replace -2) (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skosimp)
            (("4" (typepred j!1)
              (("4" (expand M2Block)
                (("4" (typepred D!1)
                  (("4" (typepred C!1)
                    (("4" (replace -2)
                      (("4" (assert)
                        (("4" (replace -3)
                          (("4" (typepred i!1)
                            (("4" (expand M2Block)
                              (("4"
                                (typepred B!1)
                                (("4"
                                  (replace -1)
                                  (("4" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Block2M4 const-decl "Matrix" block_matrices nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   shostak))
 (BV1toBV2_TCC1 0
  (BV1toBV2_TCC1-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (BV1toBV2_TCC2 0
  (BV1toBV2_TCC2-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (BV2toBV1_TCC1 0
  (BV2toBV1_TCC1-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (V2Block_TCC1 0
  (V2Block_TCC1-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (access_v_1_TCC1 0
  (access_v_1_TCC1-1 nil 3598380689 ("" (subtype-tcc) nil nil)
   ((BV2toBV1 const-decl "Block_Vector" block_matrices nil)) nil))
 (access_v_1 0
  (access_v_1-1 nil 3598380690
   ("" (skosimp)
    (("" (expand Block2V1)
      (("" (expand BV2toBV1)
        (("" (decompose-equality)
          (("1" (typepred x!1)
            (("1" (expand BV2toBV1) (("1" (assert) nil nil)) nil)) nil)
           ("2" (skosimp)
            (("2" (assert)
              (("2" (typepred i!1)
                (("2" (expand BV2toBV1) (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Block2V1 const-decl "Vector[V`comp1]" block_matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Block_Vector2 type-eq-decl nil block_matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil))
   shostak))
 (access_v_2_TCC1 0
  (access_v_2_TCC1-1 nil 3598380689 ("" (subtype-tcc) nil nil)
   ((BV2toBV1 const-decl "Block_Vector" block_matrices nil)) nil))
 (access_v_2 0
  (access_v_2-1 nil 3598381215
   ("" (skosimp)
    (("" (expand Block2V2)
      (("" (expand BV2toBV1)
        (("" (decompose-equality)
          (("" (skosimp)
            (("" (typepred i!1)
              (("" (expand BV2toBV1) (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Block2V2 const-decl "Vector[V`comp2]" block_matrices nil)
    (below type-eq-decl nil nat_types nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Block_Vector2 type-eq-decl nil block_matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil))
   shostak))
 (access_vb_1_TCC1 0
  (access_vb_1_TCC1-1 nil 3636279130 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (access_vb_1 0
  (access_vb_1-1 nil 3636279131
   ("" (skeep)
    (("" (expand Block2V1)
      (("" (expand V2Block)
        (("" (assert)
          (("" (apply-extensionality)
            (("1" (typepred x!1)
              (("1" (expand V2Block -1) (("1" (assert) nil nil)) nil))
              nil)
             ("2" (skeep)
              (("2" (assert)
                (("2" (typepred i)
                  (("2" (expand V2Block -1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Block2V1 const-decl "Vector[V`comp1]" block_matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   shostak))
 (access_vb_2_TCC1 0
  (access_vb_2_TCC1-1 nil 3636279130 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (access_vb_2 0
  (access_vb_2-1 nil 3636279221
   ("" (skeep)
    (("" (expand Block2V2)
      (("" (expand V2Block)
        (("" (apply-extensionality)
          (("" (skeep)
            (("" (typepred i)
              (("" (expand V2Block) (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Block2V2 const-decl "Vector[V`comp2]" block_matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   shostak))
 (times_TCC1 0
  (times_TCC1-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (times_TCC2 0
  (times_TCC2-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (conv_transp_TCC1 0
  (conv_transp_TCC1-1 nil 3537005192 ("" (subtype-tcc) nil nil)
   ((Block2M1 const-decl "Matrix" block_matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (conv_transp_TCC2 0
  (conv_transp_TCC2-1 nil 3537005192 ("" (subtype-tcc) nil nil)
   ((Block2M3 const-decl "Matrix" block_matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (conv_transp_TCC3 0
  (conv_transp_TCC3-1 nil 3537005192 ("" (subtype-tcc) nil nil)
   ((Block2M2 const-decl "Matrix" block_matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (conv_transp_TCC4 0
  (conv_transp_TCC4-1 nil 3537005192 ("" (subtype-tcc) nil nil)
   ((Block2M4 const-decl "Matrix" block_matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (conv_transp 0
  (thm "finished" 3537005316
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1" (hide 2) (("1" (grind) nil nil)) nil)
       ("2" (hide 2) (("2" (grind) nil nil)) nil)
       ("3" (hide 2) (("3" (grind) nil nil)) nil)
       ("4" (hide 2) (("4" (grind) nil nil)) nil)
       ("5" (hide 2)
        (("5" (apply-extensionality)
          (("5" (hide 2) (("5" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (Btranspose const-decl "Block_Matrix" block_matrices nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak)
  (conv_transp-1 nil 3537005206
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1" (hide 2) (("1" (grind) nil nil)) nil)
       ("2" (hide 2) (("2" (grind) nil nil)) nil)
       ("3" (hide 2) (("3" (grind) nil nil)) nil)
       ("4" (hide 2) (("4" (grind) nil nil)) nil)
       ("5" (hide 2) (("5" (postpone) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (block_square 0
  (block_square-1 nil 3598717446
   ("" (skeep)
    (("" (expand Bdiag_square?)
      (("" (expand Bsquare?)
        (("" (expand square?)
          (("" (expand Block2M)
            (("" (expand Block2M1)
              (("" (expand Block2M4)
                (("" (assert)
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Bsquare? const-decl "bool" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil))
   shostak))
 (trans_conv 0
  (trans_conv-1 nil 3598882677
   ("" (skeep)
    (("" (expand transpose)
      (("" (expand Block2M)
        (("" (expand Btranspose)
          (("" (decompose-equality)
            (("1" (split)
              (("1" (expand Btranspose)
                (("1" (assert)
                  (("1" (expand Block2M) (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand Btranspose)
                (("2" (expand Block2M) (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred i)
                (("2" (expand Btranspose) (("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (typepred j)
                (("3" (expand Btranspose) (("3" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("4" (skeep)
              (("4" (typepred i)
                (("4" (expand Block2M) (("4" (propax) nil nil)) nil))
                nil))
              nil)
             ("5" (skeep)
              (("5" (typepred j)
                (("5" (expand Block2M) (("5" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transpose const-decl "Matrix" matrices nil)
    (Btranspose const-decl "Block_Matrix" block_matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Block2M const-decl "Matrix" block_matrices nil))
   shostak))
 (block_symmetric 0
  (block_symmetric-1 nil 3581357536
   ("" (skeep)
    (("" (expand Bsymmetric?)
      (("" (expand symmetric?)
        (("" (expand square?)
          (("" (bddsimp)
            (("1" (expand transpose)
              (("1" (expand Block2M3)
                (("1" (expand Block2M2)
                  (("1" (split)
                    (("1" (propax) nil nil) ("2" (assert) nil nil)
                     ("3" (assert)
                      (("3" (expand Block2M)
                        (("3" (assert)
                          (("3" (decompose-equality)
                            (("1" (replace -4)
                              (("1"
                                (replace -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "functions[[below(Block2M(M)`cols),below(Block2M(M)`rows)],real].congruence")
                                    (("1"
                                      (inst
                                       -1
                                       "LAMBDA (i: below(Block2M(M)`cols), j: below(Block2M(M)`rows)):
         M`matrix(j, i)"
                                       "(LAMBDA (i: below(M`rows1 + M`rows2), j: below(M`cols1 + M`cols2)):
          M`matrix(i, j))"
                                       "(M`rows1 + x!2, x!1)"
                                       "(M`rows1 + x!2, x!1)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand Block2M)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred x!1)
                                            (("2"
                                              (expand Block2M2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand Block2M)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (typepred x!2)
                                            (("3"
                                              (expand Block2M2)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (split)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand Block2M)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (expand Block2M)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (replace -3)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (skeep)
                                        (("5"
                                          (typepred i)
                                          (("5"
                                            (expand Block2M)
                                            (("5" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (skeep)
                                        (("6"
                                          (typepred j)
                                          (("6"
                                            (expand Block2M)
                                            (("6" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split)
                              (("1"
                                (skeep)
                                (("1"
                                  (expand Block2M2)
                                  (("1"
                                    (replace -3)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (expand Block2M2)
                                  (("2"
                                    (replace -4)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (typepred i)
                                (("3"
                                  (expand Block2M2)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (skeep)
                              (("4"
                                (typepred j)
                                (("4"
                                  (expand Block2M2)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand transpose)
              (("2" (expand Block2M4)
                (("2" (expand Block2M)
                  (("2" (split)
                    (("1" (propax) nil nil) ("2" (assert) nil nil)
                     ("3" (decompose-equality)
                      (("1"
                        (lemma
                         "functions[[below(Block2M(M)`cols),below(Block2M(M)`rows)],real].congruence")
                        (("1"
                          (inst -1
                           "LAMBDA (i: below(Block2M(M)`cols), j: below(Block2M(M)`rows)):
         M`matrix(j, i)"
                           "(LAMBDA (i: below(M`rows1 + M`rows2), j: below(M`cols1 + M`cols2)):
          M`matrix(i, j))" "(M`rows1 + x!2, M`cols1+ x!1)"
                           "(M`cols1 + x!2, M`rows1+ x!1)")
                          (("1" (assert) nil nil)
                           ("2" (expand Block2M)
                            (("2" (assert)
                              (("2"
                                (typepred x!1)
                                (("2"
                                  (expand Block2M4)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand Block2M)
                            (("3" (typepred x!2)
                              (("3"
                                (expand Block2M4)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (expand Block2M)
                            (("4" (assert)
                              (("4"
                                (typepred x!1)
                                (("4"
                                  (expand Block2M4)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (expand Block2M)
                            (("5" (typepred x!2)
                              (("5"
                                (expand Block2M4)
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("6" (expand Block2M)
                            (("6" (replace -3)
                              (("6"
                                (replace -4)
                                (("6" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("7" (skeep)
                            (("7" (typepred i)
                              (("7"
                                (expand Block2M)
                                (("7" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("8" (assert)
                            (("8" (skeep)
                              (("8"
                                (typepred j)
                                (("8"
                                  (expand Block2M)
                                  (("8" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand Block2M4)
                        (("2" (replace -4) (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("3" (skeep)
                        (("3" (typepred i)
                          (("3" (expand Block2M4)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (skeep)
                        (("4" (typepred j)
                          (("4" (expand Block2M4)
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand Block2M4) (("3" (assert) nil nil)) nil)
             ("4" (expand transpose)
              (("4" (expand Block2M1)
                (("4" (expand Block2M)
                  (("4" (assert)
                    (("4" (decompose-equality)
                      (("1" (assert)
                        (("1" (apply-extensionality)
                          (("1" (inst -1 "(x!2,x!1)")
                            (("1" (assert) nil nil)
                             ("2" (typepred x!1)
                              (("2"
                                (expand Block2M)
                                (("2"
                                  (expand Block2M1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand Block2M)
                              (("3"
                                (typepred x!2)
                                (("3"
                                  (expand Block2M1)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand Block2M1)
                            (("2" (replace -3) (("2" (assert) nil nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (typepred i)
                              (("3"
                                (expand Block2M1)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (skeep)
                            (("4" (typepred j)
                              (("4"
                                (expand Block2M1)
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred x!1 `1)
                        (("2" (typepred "x!1`1")
                          (("2" (expand Block2M)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (typepred "x!1`2")
                        (("3" (expand Block2M) (("3" (propax) nil nil))
                          nil))
                        nil)
                       ("4" (expand Block2M) (("4" (assert) nil nil))
                        nil)
                       ("5" (expand Block2M) (("5" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand Block2M1) (("5" (assert) nil nil)) nil)
             ("6" (assert)
              (("6" (expand transpose)
                (("6" (expand Block2M3)
                  (("6" (assert)
                    (("6" (expand Block2M2) (("6" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("7" (expand transpose)
              (("7" (expand Block2M1) (("7" (assert) nil nil)) nil))
              nil)
             ("8" (expand transpose)
              (("8" (expand Block2M)
                (("8" (expand Block2M2)
                  (("8" (expand Block2M3)
                    (("8" (expand Block2M1)
                      (("8" (expand Block2M4)
                        (("8" (flatten)
                          (("8" (assert)
                            (("8" (decompose-equality -4 -8 -11)
                              (("1"
                                (decompose-equality -11)
                                (("1"
                                  (decompose-equality -9)
                                  (("1"
                                    (decompose-equality)
                                    (("1"
                                      (typepred x!1)
                                      (("1"
                                        (typepred x!2)
                                        (("1"
                                          (expand Block2M)
                                          (("1"
                                            (case "x!1<M`cols1")
                                            (("1"
                                              (case "x!2<M`rows1")
                                              (("1"
                                                (inst -7 "(x!1,x!2)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand Block2M1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand Block2M1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case "x!2>=M`rows1")
                                                  (("1"
                                                    (inst
                                                     -6
                                                     "(x!1,x!2-M`rows1)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand Block2M2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand Block2M2)
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "x!1>=M`cols1")
                                              (("1"
                                                (case "x!2<M`rows1")
                                                (("1"
                                                  (inst
                                                   -6
                                                   "(x!2,x!1-M`rows1)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand Block2M2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand Block2M2)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "x!2>=M`rows1")
                                                  (("1"
                                                    (inst
                                                     -5
                                                     "(x!2-M`rows1,x!1-M`cols1)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand Block2M4)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand Block2M4)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand Block2M)
                                      (("2"
                                        (replace -4)
                                        (("2"
                                          (replace -7)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (typepred i)
                                        (("3"
                                          (expand Block2M)
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skeep)
                                      (("4"
                                        (typepred j)
                                        (("4"
                                          (expand Block2M)
                                          (("4" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "x!1`1")
                                    (("2"
                                      (expand Block2M4)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (typepred x!1 `2)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (typepred "x!1`2")
                                        (("3"
                                          (expand Block2M4)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (expand Block2M4)
                                    (("4" (assert) nil nil))
                                    nil)
                                   ("5"
                                    (expand Block2M4)
                                    (("5" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x!1`1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand Block2M2)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "x!1`2")
                                  (("3"
                                    (expand Block2M2)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (expand Block2M2)
                                  (("4" (assert) nil nil))
                                  nil)
                                 ("5"
                                  (expand Block2M2)
                                  (("5" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "x!1`1")
                                (("2"
                                  (expand Block2M1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (typepred "x!1`2")
                                (("3"
                                  (expand Block2M1)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (expand Block2M1)
                                (("4" (assert) nil nil))
                                nil)
                               ("5"
                                (expand Block2M1)
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("9" (expand Block2M)
              (("9" (expand transpose)
                (("9" (expand Block2M4)
                  (("9" (expand Block2M3)
                    (("9" (assert)
                      (("9" (expand Block2M1) (("9" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Bsymmetric? const-decl "bool" block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even? const-decl "bool" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (odd? const-decl "bool" integers nil)
    (> const-decl "bool" reals nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (congruence formula-decl nil functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (symmetric? const-decl "bool" matrices nil))
   shostak))
 (transpose_eq 0
  (transpose_eq-1 nil 3598729349
   ("" (skeep)
    (("" (expand Block2M)
      (("" (expand Btranspose)
        (("" (expand transpose)
          (("" (decompose-equality)
            (("1" (expand Btranspose) (("1" (propax) nil nil)) nil)
             ("2" (skeep)
              (("2" (typepred i)
                (("2" (expand Btranspose) (("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (typepred j)
                (("3" (expand Btranspose) (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Btranspose const-decl "Block_Matrix" block_matrices nil))
   shostak))
 (times_TCC3 0
  (times_TCC3-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (square? const-decl "bool" matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Block2M1 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC4 0
  (times_TCC4-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Block2M3 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC5 0
  (times_TCC5-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC6 0
  (times_TCC6-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((Block2M1 const-decl "Matrix" block_matrices nil)) nil))
 (times_TCC7 0
  (times_TCC7-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Block2M2 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC8 0
  (times_TCC8-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Block2M4 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC9 0
  (times_TCC9-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((Block2M4 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC10 0
  (times_TCC10-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((Block2M2 const-decl "Matrix" block_matrices nil)) nil))
 (plus_TCC1 0
  (plus_TCC1-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (same_Bdim? const-decl "bool" block_matrices nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (plus_TCC2 0
  (plus_TCC2-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (same_Bdim? const-decl "bool" block_matrices nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (times_TCC11 0
  (times_TCC11-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (times_TCC12 0
  (times_TCC12-1 nil 3580743779 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (times_TCC13 0
  (times_TCC13-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M1 const-decl "Matrix" block_matrices nil)) nil))
 (times_TCC14 0
  (times_TCC14-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC15 0
  (times_TCC15-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (times_TCC16 0
  (times_TCC16-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (times_TCC17 0
  (times_TCC17-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC18 0
  (times_TCC18-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M4 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC19 0
  (times_TCC19-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (times_TCC20 0
  (times_TCC20-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (times_TCC21 0
  (times_TCC21-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC22 0
  (times_TCC22-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC23 0
  (times_TCC23-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (times_TCC24 0
  (times_TCC24-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (times_TCC25 0
  (times_TCC25-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil))
   nil))
 (times_TCC26 0
  (times_TCC26-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M4 const-decl "Matrix" block_matrices nil)) nil))
 (times_TCC27 0
  (times_TCC27-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (times_TCC28 0
  (times_TCC28-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (times_TCC29 0
  (times_TCC29-1 nil 3637168818 ("" (subtype-tcc) nil nil) nil nil))
 (conv_mult_TCC1 0
  (conv_mult_TCC1-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   nil))
 (conv_mult_TCC2 0
  (conv_mult_TCC2-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil nil))
 (conv_mult_TCC3 0
  (conv_mult_TCC3-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil nil))
 (conv_mult_TCC4 0
  (conv_mult_TCC4-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil nil))
 (conv_mult_TCC5 0
  (conv_mult_TCC5-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (conv_mult_TCC6 0
  (conv_mult_TCC6-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil nil))
 (conv_mult_TCC7 0
  (conv_mult_TCC7-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil nil))
 (conv_mult_TCC8 0
  (conv_mult_TCC8-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil nil))
 (conv_mult_TCC9 0
  (conv_mult_TCC9-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (conv_mult_TCC10 0
  (conv_mult_TCC10-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil
   nil))
 (conv_mult_TCC11 0
  (conv_mult_TCC11-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil
   nil))
 (conv_mult_TCC12 0
  (conv_mult_TCC12-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil
   nil))
 (conv_mult_TCC13 0
  (conv_mult_TCC13-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (conv_mult_TCC14 0
  (conv_mult_TCC14-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil
   nil))
 (conv_mult_TCC15 0
  (conv_mult_TCC15-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil
   nil))
 (conv_mult_TCC16 0
  (conv_mult_TCC16-1 nil 3598733180 ("" (subtype-tcc) nil nil) nil
   nil))
 (conv_mult_TCC17 0
  (conv_mult_TCC17-1 nil 3598733180 ("" (subtype-tcc) nil nil)
   ((add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (conv_mult 0
  (conv_mult-1 nil 3598733181
   ("" (skeep)
    (("" (expand Block2M)
      (("" (expand M2Block)
        (("" (expand *)
          (("" (assert)
            (("" (expand +)
              (("" (decompose-equality)
                (("1" (case "x!1<A`rows")
                  (("1" (assert)
                    (("1" (case "x!2<E`cols")
                      (("1" (assert)
                        (("1" (typepred A)
                          (("1" (typepred C)
                            (("1" (typepred E)
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -6)
                                  (("1"
                                    (replace -4)
                                    (("1"
                                      (lemma
                                       "sigma[below(A`cols+C`cols)].sigma_split")
                                      (("1"
                                        (inst
                                         -1
                                         "LAMBDA (k: below(A`cols + C`cols)):
                       IF k < p THEN A`matrix(x!1, k) ELSE C`matrix(x!1, k - p) ENDIF
                        *
                        IF k < p THEN E`matrix(k, x!2)
                        ELSE F`matrix(k - p, x!2)
                        ENDIF"
                                         "p+q-1"
                                         "0"
                                         "p-1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "sigma_below_sub[A`cols+C`cols,A`cols].sigma_diff_eq")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "LAMBDA (k: below(A`cols + C`cols)):
                          IF k < p THEN A`matrix(x!1, k)
                          ELSE C`matrix(x!1, k - p)
                          ENDIF
                           *
                           IF k < p THEN E`matrix(k, x!2)
                           ELSE F`matrix(k - p, x!2)
                           ENDIF"
                                                   "LAMBDA (k: below(A`cols)): A`matrix(x!1, k) * E`matrix(k, x!2)"
                                                   "p-1"
                                                   "0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (bddsimp -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sigma[below(A`cols+C`cols)].sigma_shift_T2")
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(A`cols + C`cols)):
                              IF k < p THEN A`matrix(x!1, k)
                              ELSE C`matrix(x!1, k - p)
                              ENDIF
                               *
                               IF k < p THEN E`matrix(k, x!2)
                               ELSE F`matrix(k - p, x!2)
                               ENDIF"
                                                                   "q-1"
                                                                   "0"
                                                                   "p")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_below_sub[A`cols+C`cols,C`cols].sigma_diff_eq")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "LAMBDA (i: below(A`cols + C`cols)):
                                IF i + p < A`cols + C`cols
                                  THEN C`matrix(x!1, i) * F`matrix(i, x!2)
                                ELSE 0
                                ENDIF"
                                                                           "LAMBDA (k: below(C`cols)): C`matrix(x!1, k) * F`matrix(k, x!2)"
                                                                           "q-1"
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skeep)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (skeep)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (skeep)
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (skeep)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (skeep)
                                                    (("5"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (skeep)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep)
                                          (("4" (assert) nil nil))
                                          nil)
                                         ("5"
                                          (skeep)
                                          (("5" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2"
                          (lemma
                           "sigma[below(A`cols+C`cols)].sigma_split")
                          (("2"
                            (inst -1
                             "LAMBDA (k: below(A`cols + C`cols)):
                       IF k < A`cols THEN A`matrix(x!1, k)
                       ELSE C`matrix(x!1, k - A`cols)
                       ENDIF
                        *
                        IF k < E`rows THEN G`matrix(k, x!2 - E`cols)
                        ELSE H`matrix(k - E`rows, x!2 - E`cols)
                        ENDIF" "A`cols+C`cols-1" "0" "A`cols-1")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (lemma
                                   "sigma_below_sub[A`cols+C`cols,A`cols].sigma_diff_eq")
                                  (("1"
                                    (inst
                                     -1
                                     "LAMBDA (k: below(A`cols + C`cols)):
                          IF k < A`cols THEN A`matrix(x!1, k)
                          ELSE C`matrix(x!1, k - A`cols)
                          ENDIF
                           *
                           IF k < E`rows THEN G`matrix(k, x!2 - E`cols)
                           ELSE H`matrix(k - E`rows, x!2 - E`cols)
                           ENDIF"
                                     "LAMBDA (k: below(A`cols)):
                          A`matrix(x!1, k) * G`matrix(k, x!2 - E`cols)"
                                     "A`cols-1"
                                     "0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (bddsimp -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "sigma[below(A`cols+C`cols)].sigma_shift_T2")
                                                (("1"
                                                  (hide -2 -3)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "LAMBDA (k: below(A`cols + C`cols)):
                              IF k < A`cols THEN A`matrix(x!1, k)
                              ELSE C`matrix(x!1, k - A`cols)
                              ENDIF
                               *
                               IF k < E`rows THEN G`matrix(k, x!2 - E`cols)
                               ELSE H`matrix(k - E`rows, x!2 - E`cols)
                               ENDIF"
                                                     "C`cols-1"
                                                     "0"
                                                     "A`cols")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "sigma_below_sub[A`cols+C`cols, C`cols].sigma_diff_eq")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "LAMBDA (i: below(A`cols + C`cols)):
                                IF i + A`cols < A`cols + C`cols
                                  THEN C`matrix(x!1, i) *
                                        H`matrix(i + A`cols - E`rows, x!2 - E`cols)
                                ELSE 0
                                ENDIF"
                                                               "LAMBDA (k: below(C`cols)):
                                C`matrix(x!1, k) * H`matrix(k, x!2 - E`cols)"
                                                               "C`cols-1"
                                                               "0")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3" (assert) nil nil))
                                      nil)
                                     ("4"
                                      (skeep)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep) (("2" (assert) nil nil)) nil)
                             ("3" (skeep) (("3" (assert) nil nil)) nil)
                             ("4" (skeep) (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (case "x!2<E`cols")
                      (("1" (assert)
                        (("1"
                          (lemma
                           "sigma[below(A`cols + C`cols)].sigma_split")
                          (("1"
                            (inst -1
                             "LAMBDA (k: below(A`cols + C`cols)):
                       IF k < A`cols THEN B`matrix(x!1 - A`rows, k)
                       ELSE D`matrix(x!1 - A`rows, k - A`cols)
                       ENDIF
                        *
                        IF k < E`rows THEN E`matrix(k, x!2)
                        ELSE F`matrix(k - E`rows, x!2)
                        ENDIF" "A`cols + C`cols - 1" "0" "A`cols-1")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (lemma
                                   "sigma_below_sub[A`cols+C`cols,B`cols].sigma_diff_eq")
                                  (("1"
                                    (inst
                                     -1
                                     "LAMBDA (k: below(A`cols + C`cols)):
                          IF k < A`cols THEN B`matrix(x!1 - A`rows, k)
                          ELSE D`matrix(x!1 - A`rows, k - A`cols)
                          ENDIF
                           *
                           IF k < E`rows THEN E`matrix(k, x!2)
                           ELSE F`matrix(k - E`rows, x!2)
                           ENDIF"
                                     "LAMBDA (k: below(B`cols)):
                          B`matrix(x!1 - A`rows, k) * E`matrix(k, x!2)"
                                     "A`cols-1"
                                     "0")
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (bddsimp -1)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred A)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (typepred B)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "sigma[below(A`cols+C`cols)].sigma_shift_T2")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "LAMBDA (k: below(A`cols + C`cols)):
                              IF k < p THEN B`matrix(x!1 - A`rows, k)
                              ELSE D`matrix(x!1 - A`rows, k - p)
                              ENDIF
                               *
                               IF k < E`rows THEN E`matrix(k, x!2)
                               ELSE F`matrix(k - E`rows, x!2)
                               ENDIF"
                                                             "C`cols-1"
                                                             "0"
                                                             "p")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "sigma_below_sub[A`cols+C`cols,D`cols].sigma_diff_eq")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "LAMBDA (i: below(A`cols + C`cols)):
                                IF i + p < A`cols + C`cols
                                  THEN D`matrix(x!1 - A`rows, i) *
                                        F`matrix(i - E`rows + p, x!2)
                                ELSE 0
                                ENDIF"
                                                                     "LAMBDA (k: below(D`cols)):
                                D`matrix(x!1 - A`rows, k) * F`matrix(k, x!2)"
                                                                     "C`cols-1"
                                                                     "0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (skeep)
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3" (assert) nil nil))
                                      nil)
                                     ("4"
                                      (skeep)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep) (("2" (assert) nil nil)) nil)
                             ("3" (skeep) (("3" (assert) nil nil)) nil)
                             ("4" (skeep) (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2"
                          (lemma
                           "sigma[below(A`cols+C`cols)].sigma_split")
                          (("2"
                            (inst -1
                             "LAMBDA (k: below(A`cols + C`cols)):
                       IF k < A`cols THEN B`matrix(x!1 - A`rows, k)
                       ELSE D`matrix(x!1 - A`rows, k - A`cols)
                       ENDIF
                        *
                        IF k < E`rows THEN G`matrix(k, x!2 - E`cols)
                        ELSE H`matrix(k - E`rows, x!2 - E`cols)
                        ENDIF" "A`cols+C`cols-1" "0" "A`cols-1")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "sigma_below_sub[A`cols+C`cols,B`cols].sigma_diff_eq")
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (inst
                                         -1
                                         " LAMBDA (k: below(A`cols + C`cols)):
                           IF k < A`cols THEN B`matrix(x!1 - A`rows, k)
                           ELSE D`matrix(x!1 - A`rows, k - A`cols)
                           ENDIF
                            *
                            IF k < E`rows THEN G`matrix(k, x!2 - E`cols)
                            ELSE H`matrix(k - E`rows, x!2 - E`cols)
                            ENDIF"
                                         "LAMBDA (k: below(B`cols)):
                          B`matrix(x!1 - A`rows, k) * G`matrix(k, x!2 - E`cols)"
                                         "A`cols-1"
                                         "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (bddsimp -1)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred A)
                                                  (("1"
                                                    (typepred B)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "sigma[below(A`cols+C`cols)].sigma_shift_T2")
                                                            (("1"
                                                              (hide -5)
                                                              (("1"
                                                                (hide
                                                                 -5)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   " LAMBDA (k: below(A`cols + C`cols)):
                              IF k < p THEN B`matrix(x!1 - A`rows, k)
                              ELSE D`matrix(x!1 - A`rows, k - p)
                              ENDIF
                               *
                               IF k < E`rows THEN G`matrix(k, x!2 - E`cols)
                               ELSE H`matrix(k - E`rows, x!2 - E`cols)
                               ENDIF"
                                                                   "C`cols-1"
                                                                   "0"
                                                                   "p")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "sigma_below_sub[A`cols+C`cols,D`cols].sigma_diff_eq")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             " LAMBDA (i: below(A`cols + C`cols)):
                                IF i + p < A`cols + C`cols
                                  THEN D`matrix(x!1 - A`rows, i) *
                                        H`matrix(i - E`rows + p, x!2 - E`cols)
                                ELSE 0
                                ENDIF"
                                                                             "LAMBDA (k: below(D`cols)):
                                D`matrix(x!1 - A`rows, k) * H`matrix(k, x!2 - E`cols)"
                                                                             "C`cols-1"
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (skeep)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (skeep)
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (skeep)
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (skeep)
                                          (("4" (assert) nil nil))
                                          nil)
                                         ("5"
                                          (assert)
                                          (("5"
                                            (skeep)
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep) (("2" (assert) nil nil)) nil)
                             ("3" (skeep) (("3" (assert) nil nil)) nil)
                             ("4" (skeep) (("4" (assert) nil nil)) nil)
                             ("5" (skeep) (("5" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand M2Block)
                  (("2" (expand *)
                    (("2" (expand +) (("2" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (assert)
                    (("3" (typepred j)
                      (("3" (expand M2Block)
                        (("3" (expand *)
                          (("3" (expand +)
                            (("3" (skeep) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skeep)
                  (("4" (skeep)
                    (("4" (assert)
                      (("4" (typepred i)
                        (("4" (assert)
                          (("4" (expand M2Block)
                            (("4" (expand *)
                              (("4"
                                (expand +)
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (skeep)
                  (("5" (skeep)
                    (("5" (typepred j)
                      (("5" (expand M2Block)
                        (("5" (expand *)
                          (("5" (expand +) (("5" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (skeep)
                  (("6" (skeep)
                    (("6" (typepred i)
                      (("6" (expand M2Block)
                        (("6" (expand *)
                          (("6" (expand +) (("6" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (skeep)
                  (("7" (skeep) (("7" (assert) nil nil)) nil)) nil)
                 ("8" (skeep)
                  (("8" (skeep)
                    (("8" (typepred i)
                      (("8" (expand M2Block)
                        (("8" (expand *)
                          (("8" (expand +) (("8" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("9" (skeep)
                  (("9" (skeep)
                    (("9" (typepred i)
                      (("9" (expand M2Block)
                        (("9" (expand *)
                          (("9" (expand +) (("9" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("10" (skeep)
                  (("10" (skeep)
                    (("10" (typepred j)
                      (("10" (expand M2Block)
                        (("10" (expand *)
                          (("10" (expand +) (("10" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("11" (skeep)
                  (("11" (skeep) (("11" (assert) nil nil)) nil)) nil)
                 ("12" (skeep)
                  (("12" (skeep)
                    (("12" (typepred j)
                      (("12" (expand M2Block)
                        (("12" (expand *)
                          (("12" (expand +) (("12" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("13" (skeep)
                  (("13" (skeep) (("13" (assert) nil nil)) nil)) nil)
                 ("14" (skeep)
                  (("14" (skeep) (("14" (assert) nil nil)) nil)) nil)
                 ("15" (skeep) (("15" (assert) nil nil)) nil)
                 ("16" (skeep) (("16" (assert) nil nil)) nil)
                 ("17" (skeep) (("17" (assert) nil nil)) nil)
                 ("18" (skeep) (("18" (assert) nil nil)) nil)
                 ("19" (skeep) (("19" (assert) nil nil)) nil)
                 ("20" (skeep) (("20" (assert) nil nil)) nil)
                 ("21" (skeep) (("21" (assert) nil nil)) nil)
                 ("22" (skeep) (("22" (assert) nil nil)) nil)
                 ("23" (skeep) (("23" (assert) nil nil)) nil)
                 ("24" (skeep) (("24" (assert) nil nil)) nil)
                 ("25" (skeep) (("25" (assert) nil nil)) nil)
                 ("26" (skeep) (("26" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "Matrix" matrices nil)
    (sigma_split formula-decl nil sigma "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_shift_T2 formula-decl nil sigma "reals/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_diff_eq formula-decl nil sigma_below_sub "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (Mat type-eq-decl nil matrices nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (mult_dim_row formula-decl nil matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_dim_col formula-decl nil matrices nil)
    (add_dim_row formula-decl nil matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   shostak))
 (conv_sum_TCC1 0
  (conv_sum_TCC1-1 nil 3599306820 ("" (subtype-tcc) nil nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   nil))
 (conv_sum_TCC2 0
  (conv_sum_TCC2-1 nil 3599306820 ("" (subtype-tcc) nil nil) nil nil))
 (conv_sum_TCC3 0
  (conv_sum_TCC3-1 nil 3599306820 ("" (subtype-tcc) nil nil)
   ((add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil))
   nil))
 (conv_sum_TCC4 0
  (conv_sum_TCC4-1 nil 3599306820 ("" (subtype-tcc) nil nil) nil nil))
 (conv_sum_TCC5 0
  (conv_sum_TCC5-1 nil 3599306820 ("" (subtype-tcc) nil nil)
   ((add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil))
   nil))
 (conv_sum_TCC6 0
  (conv_sum_TCC6-1 nil 3599306820 ("" (subtype-tcc) nil nil) nil nil))
 (conv_sum_TCC7 0
  (conv_sum_TCC7-1 nil 3599306820 ("" (subtype-tcc) nil nil)
   ((add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil))
   nil))
 (conv_sum_TCC8 0
  (conv_sum_TCC8-1 nil 3599306820 ("" (subtype-tcc) nil nil) nil nil))
 (conv_sum_TCC9 0
  (conv_sum_TCC9-1 nil 3599306820 ("" (subtype-tcc) nil nil)
   ((add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil))
   nil))
 (conv_sum 0
  (conv_sum-1 nil 3599306821
   ("" (skeep)
    (("" (expand +)
      (("" (expand Block2M)
        (("" (expand M2Block)
          (("" (typepred A)
            (("" (replace -1)
              (("" (replace -2)
                (("" (typepred B)
                  (("" (typepred C)
                    (("" (typepred D)
                      (("" (typepred E)
                        (("" (replace -1)
                          (("" (replace -2)
                            (("" (typepred F)
                              ((""
                                (typepred G)
                                ((""
                                  (typepred H)
                                  ((""
                                    (decompose-equality)
                                    (("1"
                                      (case "x!1<m")
                                      (("1"
                                        (case "x!2<p")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (case "x!2>=p")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand Block2M)
                                      (("2"
                                        (expand M2Block)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (typepred j_1)
                                          (("3"
                                            (expand M2Block)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skeep)
                                      (("4"
                                        (typepred j_1)
                                        (("4"
                                          (typepred i_1)
                                          (("4"
                                            (expand M2Block)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (skeep)
                                      (("5"
                                        (typepred j_1)
                                        (("5"
                                          (typepred i_1)
                                          (("5"
                                            (expand M2Block)
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (skeep)
                                      (("6"
                                        (typepred j_1)
                                        (("6"
                                          (typepred i_1)
                                          (("6"
                                            (expand M2Block)
                                            (("6" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("7"
                                      (skeep)
                                      (("7"
                                        (typepred j_1)
                                        (("7"
                                          (typepred i_1)
                                          (("7"
                                            (expand M2Block)
                                            (("7" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("8"
                                      (skeep)
                                      (("8"
                                        (typepred j_1)
                                        (("8"
                                          (typepred i_1)
                                          (("8"
                                            (expand M2Block)
                                            (("8" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("9"
                                      (skeep)
                                      (("9"
                                        (typepred j_1)
                                        (("9"
                                          (typepred i_1)
                                          (("9"
                                            (expand M2Block)
                                            (("9" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("10"
                                      (skeep)
                                      (("10"
                                        (typepred j_1)
                                        (("10"
                                          (typepred i_1)
                                          (("10"
                                            (expand M2Block)
                                            (("10" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("11"
                                      (skeep)
                                      (("11"
                                        (typepred j_1)
                                        (("11"
                                          (typepred i_1)
                                          (("11"
                                            (expand M2Block)
                                            (("11" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("12"
                                      (skeep)
                                      (("12"
                                        (typepred j_1)
                                        (("12"
                                          (typepred i_1)
                                          (("12"
                                            (expand M2Block)
                                            (("12" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("13"
                                      (skeep)
                                      (("13"
                                        (typepred j_1)
                                        (("13"
                                          (typepred i_1)
                                          (("13"
                                            (expand M2Block)
                                            (("13" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("14"
                                      (skeep)
                                      (("14"
                                        (typepred j_1)
                                        (("14"
                                          (typepred i_1)
                                          (("14"
                                            (expand M2Block)
                                            (("14" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("15"
                                      (skeep)
                                      (("15"
                                        (typepred j_1)
                                        (("15"
                                          (typepred i_1)
                                          (("15"
                                            (expand M2Block)
                                            (("15" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("16"
                                      (skeep)
                                      (("16"
                                        (typepred j_1)
                                        (("16"
                                          (typepred i_1)
                                          (("16"
                                            (expand M2Block)
                                            (("16" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("17"
                                      (skeep)
                                      (("17"
                                        (typepred j_1)
                                        (("17"
                                          (typepred i_1)
                                          (("17"
                                            (expand M2Block)
                                            (("17" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("18"
                                      (skeep)
                                      (("18"
                                        (typepred j_1)
                                        (("18"
                                          (typepred i_1)
                                          (("18"
                                            (expand M2Block)
                                            (("18" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("19"
                                      (skeep)
                                      (("19"
                                        (assert)
                                        (("19"
                                          (typepred j)
                                          (("19"
                                            (typepred i)
                                            (("19"
                                              (expand Block2M)
                                              (("19"
                                                (expand M2Block)
                                                (("19"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("20"
                                      (skeep)
                                      (("20"
                                        (typepred j)
                                        (("20"
                                          (typepred i)
                                          (("20"
                                            (expand Block2M)
                                            (("20"
                                              (expand M2Block)
                                              (("20" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("21"
                                      (skeep)
                                      (("21"
                                        (typepred j)
                                        (("21"
                                          (typepred i)
                                          (("21"
                                            (expand Block2M)
                                            (("21"
                                              (expand M2Block)
                                              (("21" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("22"
                                      (skeep)
                                      (("22"
                                        (typepred j)
                                        (("22"
                                          (typepred i)
                                          (("22"
                                            (expand Block2M)
                                            (("22"
                                              (expand M2Block)
                                              (("22" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("23"
                                      (skeep)
                                      (("23"
                                        (typepred j)
                                        (("23"
                                          (typepred i)
                                          (("23"
                                            (expand Block2M)
                                            (("23"
                                              (expand M2Block)
                                              (("23" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("24"
                                      (skeep)
                                      (("24"
                                        (typepred j)
                                        (("24"
                                          (typepred i)
                                          (("24"
                                            (expand Block2M)
                                            (("24"
                                              (expand M2Block)
                                              (("24" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("25"
                                      (skeep)
                                      (("25"
                                        (typepred j)
                                        (("25"
                                          (typepred i)
                                          (("25"
                                            (expand Block2M)
                                            (("25"
                                              (expand M2Block)
                                              (("25" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("26"
                                      (skeep)
                                      (("26"
                                        (typepred j)
                                        (("26"
                                          (typepred i)
                                          (("26"
                                            (expand Block2M)
                                            (("26"
                                              (expand M2Block)
                                              (("26" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("27"
                                      (skeep)
                                      (("27"
                                        (typepred j)
                                        (("27"
                                          (typepred i)
                                          (("27"
                                            (expand Block2M)
                                            (("27"
                                              (expand M2Block)
                                              (("27" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("28"
                                      (skeep)
                                      (("28"
                                        (typepred j)
                                        (("28"
                                          (typepred i)
                                          (("28"
                                            (expand Block2M)
                                            (("28"
                                              (expand M2Block)
                                              (("28" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("29"
                                      (skeep)
                                      (("29"
                                        (typepred j)
                                        (("29"
                                          (typepred i)
                                          (("29"
                                            (expand Block2M)
                                            (("29"
                                              (expand M2Block)
                                              (("29" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("30"
                                      (skeep)
                                      (("30"
                                        (typepred j)
                                        (("30"
                                          (typepred i)
                                          (("30"
                                            (expand Block2M)
                                            (("30"
                                              (expand M2Block)
                                              (("30" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("31"
                                      (skeep)
                                      (("31"
                                        (typepred j)
                                        (("31"
                                          (typepred i)
                                          (("31"
                                            (expand Block2M)
                                            (("31"
                                              (expand M2Block)
                                              (("31" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("32"
                                      (skeep)
                                      (("32"
                                        (typepred j)
                                        (("32"
                                          (typepred i)
                                          (("32"
                                            (expand Block2M)
                                            (("32"
                                              (expand M2Block)
                                              (("32" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("33"
                                      (skeep)
                                      (("33"
                                        (typepred j)
                                        (("33"
                                          (typepred i)
                                          (("33"
                                            (expand Block2M)
                                            (("33"
                                              (expand M2Block)
                                              (("33" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("34"
                                      (skeep)
                                      (("34"
                                        (typepred j)
                                        (("34"
                                          (typepred i)
                                          (("34"
                                            (expand Block2M)
                                            (("34"
                                              (expand M2Block)
                                              (("34" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (Mat type-eq-decl nil matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil))
   shostak))
 (conv_scal_TCC1 0
  (conv_scal_TCC1-1 nil 3636282784 ("" (subtype-tcc) nil nil) nil nil))
 (conv_scal_TCC2 0
  (conv_scal_TCC2-1 nil 3636282784 ("" (subtype-tcc) nil nil) nil nil))
 (conv_scal_TCC3 0
  (conv_scal_TCC3-1 nil 3636282784 ("" (subtype-tcc) nil nil) nil nil))
 (conv_scal_TCC4 0
  (conv_scal_TCC4-1 nil 3636282784 ("" (subtype-tcc) nil nil) nil nil))
 (conv_scal 0
  (conv_scal-1 nil 3636282785
   ("" (skeep)
    (("" (grind)
      (("" (apply-extensionality)
        (("1" (hide 2)
          (("1" (case "x!1<A`rows")
            (("1" (case "x!2<A`cols")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
             ("2" (case "x!2< A`cols")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (grind) nil nil) ("3" (grind) nil nil)
         ("4" (grind) nil nil) ("5" (grind) nil nil)
         ("6" (grind) nil nil) ("7" (grind) nil nil))
        nil))
      nil))
    nil)
   ((M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Mat type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (eq_block 0
  (eq_block-1 nil 3599308021 ("" (skeep) (("" (assert) nil nil)) nil)
   nil shostak))
 (block_mult_comm_TCC1 0
  (block_mult_comm_TCC1-1 nil 3598355903 ("" (subtype-tcc) nil nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (block_mult_comm_TCC2 0
  (block_mult_comm_TCC2-1 nil 3598355903 ("" (subtype-tcc) nil nil)
   ((Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (* const-decl "Block_Vector2" block_matrices nil)
    (Block2V1 const-decl "Vector[V`comp1]" block_matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Block2V2 const-decl "Vector[V`comp2]" block_matrices nil)
    (+ const-decl "real" vectors "vectors/")
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (block_mult_comm 0
  (block_mult_comm-1 nil 3598355903
   ("" (skosimp)
    (("" (expand Block2M)
      (("" (expand Block2V)
        (("" (decompose-equality)
          (("1" (expand BV2toBV1)
            (("1" (case "x!1< (M!1*V!1)`comp1")
              (("1" (assert)
                (("1" (expand *)
                  (("1" (expand Block2M1)
                    (("1" (expand Block2V1)
                      (("1" (expand Block2M3)
                        (("1" (expand Block2V2)
                          (("1" (expand +)
                            (("1" (expand *)
                              (("1"
                                (lemma
                                 "sigma[below(M!1`cols1 + M!1`cols2)].sigma_split")
                                (("1"
                                  (inst
                                   -1
                                   "LAMBDA (k: below(M!1`cols1 + M!1`cols2)):
             M!1`matrix(x!1, k) * V!1`vector(k)"
                                   "M!1`cols1 + M!1`cols2 - 1"
                                   "0"
                                   "M!1`cols1 - 1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (lemma
                                         "sigma_below_sub[M!1`cols1 + M!1`cols2, M!1`cols1].sigma_diff_eq")
                                        (("1"
                                          (inst
                                           -1
                                           "LAMBDA (k: below(M!1`cols1 + M!1`cols2)):
              M!1`matrix(x!1, k) * V!1`vector(k)"
                                           "LAMBDA (k: below(M!1`cols1)):
              M!1`matrix(x!1, k) * V!1`vector(k)"
                                           " M!1`cols1 - 1"
                                           "0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1 -2)
                                                  (("1"
                                                    (lemma
                                                     "sigma_below_sub[M!1`cols2,M!1`cols1 + M!1`cols2].sigma_diff_shift")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "LAMBDA (k: below(M!1`cols2)):
              M!1`matrix(x!1, k + M!1`cols1) * V!1`vector(k + V!1`comp1)"
                                                       "LAMBDA (k: below(M!1`cols1 + M!1`cols2)):
              M!1`matrix(x!1, k) * V!1`vector(k)"
                                                       "M!1`cols1"
                                                       "M!1`cols2 - 1"
                                                       "0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "x!1 >= (M!1 * V!1)`comp1")
                (("1" (hide 1)
                  (("1" (assert)
                    (("1" (expand *)
                      (("1" (expand Block2M2)
                        (("1" (expand Block2V1)
                          (("1" (expand Block2M4)
                            (("1" (expand Block2V2)
                              (("1"
                                (expand +)
                                (("1"
                                  (expand *)
                                  (("1"
                                    (lemma
                                     "sigma[below(M!1`cols1 + M!1`cols2)].sigma_split")
                                    (("1"
                                      (inst
                                       -1
                                       "LAMBDA (k: below(M!1`cols1 + M!1`cols2)):
             M!1`matrix(x!1, k) * V!1`vector(k)"
                                       "M!1`cols1 + M!1`cols2 - 1"
                                       "0"
                                       "M!1`cols1 - 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "sigma_below_sub[M!1`cols1 + M!1`cols2,M!1`cols1].sigma_diff_eq")
                                              (("1"
                                                (inst
                                                 -1
                                                 " LAMBDA (k: below(M!1`cols1 + M!1`cols2)):
              M!1`matrix(x!1, k) * V!1`vector(k)"
                                                 "            LAMBDA (k: below(M!1`cols1)):
              M!1`matrix(x!1, k) * V!1`vector(k)"
                                                 "M!1`cols1 - 1"
                                                 "0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "sigma_below_sub[M!1`cols2,M!1`cols1 + M!1`cols2].sigma_diff_shift")
                                                        (("1"
                                                          (typepred
                                                           V!1)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "LAMBDA (k: below(M!1`cols2)):
              M!1`matrix(x!1, k + M!1`cols1) * V!1`vector(k + M!1`cols1)"
                                                               "LAMBDA (k: below(M!1`cols1 + M!1`cols2)):
              M!1`matrix(x!1, k) * V!1`vector(k)"
                                                               "M!1`cols1"
                                                               "M!1`cols2 - 1"
                                                               "0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (expand BV2toBV1)
            (("2" (expand *) (("2" (propax) nil nil)) nil)) nil)
           ("3" (typepred V!1)
            (("3" (replace -1)
              (("3" (replace -2) (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Block_Vector2" block_matrices nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (Block_Vector2 type-eq-decl nil block_matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Block2V1 const-decl "Vector[V`comp1]" block_matrices nil)
    (Block2V2 const-decl "Vector[V`comp2]" block_matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_high type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_diff_shift formula-decl nil sigma_below_sub "reals/")
    (sigma_diff_eq formula-decl nil sigma_below_sub "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_split formula-decl nil sigma "reals/")
    (+ const-decl "real" vectors "vectors/")
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices
     nil))
   shostak))
 (block_v_mult_comm_TCC1 0
  (block_v_mult_comm_TCC1-1 nil 3598377491 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (block_v_mult_comm_TCC2 0
  (block_v_mult_comm_TCC2-1 nil 3598377491 ("" (subtype-tcc) nil nil)
   nil nil))
 (block_v_mult_comm 0
  (block_v_mult_comm-1 nil 3598377492
   ("" (skosimp)
    (("" (expand *)
      (("" (expand *)
        (("" (expand Block2V2)
          (("" (expand Block2V1)
            (("" (expand Block2V)
              ((""
                (lemma
                 "sigma[below(V1!1`comp1 + V1!1`comp2)].sigma_split")
                (("1"
                  (inst -1 "LAMBDA (i: Index[V1!1`comp1 + V1!1`comp2]):
              V1!1`vector(i) * V2!1`vector(i)"
                   "V1!1`comp1 + V1!1`comp2 - 1" "0" "V1!1`comp1 - 1")
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1"
                          (lemma
                           "sigma_below_sub[V1!1`comp1 + V1!1`comp2,V1!1`comp1].sigma_diff_eq")
                          (("1"
                            (inst -1
                             "LAMBDA (i: Index[V1!1`comp1 + V1!1`comp2]):
              V1!1`vector(i) * V2!1`vector(i)"
                             "LAMBDA (i: Index[V1!1`comp1]):
               V1!1`vector(i) * V2!1`vector(i)" "V1!1`comp1 - 1" "0")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -1 -2)
                                    (("1"
                                      (typepred V1!1)
                                      (("1"
                                        (typepred V2!1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (lemma
                                               "sigma_below_sub[V1!1`comp2,V1!1`comp1 + V1!1`comp2].sigma_diff_shift")
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA (i: Index[V1!1`comp2]):
               V1!1`vector(i + m!1) * V2!1`vector(i + m!1)"
                                                 "LAMBDA (i: Index[V1!1`comp1 + V1!1`comp2]):
              V1!1`vector(i) * V2!1`vector(i)"
                                                 "m!1"
                                                 "V1!1`comp2 - 1"
                                                 "0")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "real" block_matrices nil)
    (* const-decl "real" vectors "vectors/")
    (Block2V2 const-decl "Vector[V`comp2]" block_matrices nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_high type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Index type-eq-decl nil vectors "vectors/")
    (sigma_diff_eq formula-decl nil sigma_below_sub "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_diff_shift formula-decl nil sigma_below_sub "reals/")
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_split formula-decl nil sigma "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (Block2V1 const-decl "Vector[V`comp1]" block_matrices nil))
   shostak))
 (block_v_mult_comm2_TCC1 0
  (block_v_mult_comm2_TCC1-1 nil 3638731769 ("" (subtype-tcc) nil nil)
   nil nil))
 (block_v_mult_comm2_TCC2 0
  (block_v_mult_comm2_TCC2-1 nil 3638731769 ("" (subtype-tcc) nil nil)
   nil nil))
 (block_v_mult_comm2_TCC3 0
  (block_v_mult_comm2_TCC3-1 nil 3638731769 ("" (subtype-tcc) nil nil)
   nil nil))
 (block_v_mult_comm2 0
  (block_v_mult_comm2-1 nil 3638731770
   ("" (skeep)
    (("" (grind :exclude sigma)
      (("" (expand Block2V)
        (("" (grind :exclude sigma)
          (("" (expand *)
            (("" (apply-extensionality)
              (("1" (hide 2)
                (("1" (lemma sigma_trick)
                  (("1" (inst? -1)
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (rewrite sigma_trick)
                          (("1" (rewrite sigma_trick)
                            (("1" (lemma "sigma_shift_T2[nat]")
                              (("1"
                                (inst
                                 -1
                                 "LAMBDA (i: nat):
              IF (i-VV`comp1 >= M`cols2) THEN 0
              ELSE M`matrix(x!1, i ) * VV`vector(i)
              ENDIF"
                                 "M`cols2-1"
                                 0
                                 "VV`comp1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred VV)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (replace -3 1 rl)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (lemma "sigma_split[nat]")
                                            (("1"
                                              (inst
                                               -1
                                               "LAMBDA (i: nat):
             IF (i >= M`cols1 + M`cols2) THEN 0
             ELSE M`matrix(x!1, i) * VV`vector(i)
             ENDIF"
                                               "M`cols1 + M`cols2 - 1"
                                               0
                                               "M`cols1-1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma
                                                         "sigma_restrict_eq[nat]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "LAMBDA (i: nat):
              IF (i >= M`cols1 + M`cols2) THEN 0
              ELSE M`matrix(x!1, i) * VV`vector(i)
              ENDIF"
                                                           "LAMBDA (i: nat):
              IF (i >= M`cols1) THEN 0
              ELSE M`matrix(x!1, i) * VV`vector(i)
              ENDIF"
                                                           "M`cols1-1"
                                                           0)
                                                          (("1"
                                                            (bddsimp
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "sigma_restrict_eq[nat]")
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (expand
                                                                             restrict)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide
                                                                         2)
                                                                        (("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide
                                                                         2)
                                                                        (("4"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (hide
                                                                         2)
                                                                        (("5"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "restrict")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide 2)
                                                            (("4"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (hide 2)
                                                            (("5"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil)
               ("3" (hide 2) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (* const-decl "Block_Vector2" block_matrices nil)
    (Block2V1 const-decl "Vector[V`comp1]" block_matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Block2V2 const-decl "Vector[V`comp2]" block_matrices nil)
    (+ const-decl "real" vectors "vectors/")
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (M skolem-const-decl "Block_Matrix" block_matrices nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_trick formula-decl nil matrices nil)
    (sigma_shift_T2 formula-decl nil sigma "reals/")
    (int_plus_int_is_int application-judgement "int" integers nil)
    (restrict const-decl "[T -> real]" sigma "reals/")
    (sigma_restrict_eq formula-decl nil sigma "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_split formula-decl nil sigma "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (VV skolem-const-decl "Block_Vect(M`cols1, M`cols2)" block_matrices
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices
     nil))
   shostak))
 (split_vect_TCC1 0
  (split_vect_TCC1-1 nil 3598789165 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (split_vect_TCC2 0
  (split_vect_TCC2-1 nil 3598789165
   ("" (skeep)
    (("" (skeep) (("" (expand BV2toBV1) (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((BV2toBV1 const-decl "Block_Vector" block_matrices nil)) nil))
 (split_vect 0
  (split_vect-1 nil 3598789165
   ("" (skeep)
    ((""
      (inst 1 "LAMBDA (i:below(m)): z(i)"
       "LAMBDA (i:below(n-m)): z(i+m)")
      (("" (assert)
        (("" (expand Block2V)
          (("" (expand BV2toBV1)
            (("" (decompose-equality)
              (("1" (skeep)
                (("1" (expand BV2toBV1) (("1" (propax) nil nil)) nil))
                nil)
               ("2" (skeep)
                (("2" (assert)
                  (("2" (typepred i_1)
                    (("2" (expand BV2toBV1) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (Block_Vector2 type-eq-decl nil block_matrices nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (id_block_TCC1 0
  (id_block_TCC1-1 nil 3637333560 ("" (subtype-tcc) nil nil) nil nil))
 (id_block_TCC2 0
  (id_block_TCC2-1 nil 3637333560 ("" (subtype-tcc) nil nil) nil nil))
 (id_block_TCC3 0
  (id_block_TCC3-1 nil 3637333560 ("" (subtype-tcc) nil nil) nil nil))
 (id_block 0
  (id_block-1 nil 3637333561
   ("" (skeep)
    (("" (grind)
      (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((I const-decl "(identity?)" matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (block_induct_1_TCC1 0
  (block_induct_1_TCC1-1 nil 3637234807 ("" (subtype-tcc) nil nil) nil
   nil))
 (block_induct_1_TCC2 0
  (block_induct_1_TCC2-1 nil 3637234807 ("" (subtype-tcc) nil nil) nil
   nil))
 (block_induct_1_TCC3 0
  (block_induct_1_TCC3-1 nil 3637234807 ("" (subtype-tcc) nil nil) nil
   nil))
 (block_induct_1_TCC4 0
  (block_induct_1_TCC4-1 nil 3637234807 ("" (subtype-tcc) nil nil) nil
   nil))
 (block_induct_1_TCC5 0
  (block_induct_1_TCC5-1 nil 3637234807 ("" (subtype-tcc) nil nil) nil
   nil))
 (block_induct_1_TCC6 0
  (block_induct_1_TCC6-1 nil 3637234807 ("" (subtype-tcc) nil nil) nil
   nil))
 (block_induct_1 0
  (block_induct_1-1 nil 3637234808
   ("" (skeep)
    (("" (case "FORALL (n:posnat): (FORALL (M:Mat(n,n)): p(M))")
      (("1" (skeep)
        (("1" (inst -1 "MM`rows")
          (("1" (inst -1 MM)
            (("1" (typepred MM)
              (("1" (expand square? -1) (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct n)
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (skeep)
            (("3" (inst -4 j)
              (("1" (case "j=0")
                (("1" (replace -1)
                  (("1" (skeep)
                    (("1" (inst -4 M) (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (bddsimp -1)
                  (("1" (assert)
                    (("1" (bddsimp -4)
                      (("1" (skosimp)
                        (("1"
                          (inst -1
                           "(# rows:=j, cols:=j, matrix:= LAMBDA(i:below(j),k:below(j)): M!1`matrix(i+1,k+1)#)"
                           "M!1`matrix(0,0)"
                           "LAMBDA (k:below(j)) : M!1`matrix(k+1,0)"
                           "LAMBDA(k:below(j)): M!1`matrix(0,k+1)")
                          (("1"
                            (case "Block2M(M2Block(1, j, 1, j)
                       (M!1`matrix(0, 0) * I(1),
                        transpose(V2Ml(j,
                                       LAMBDA (k: below(j)):
                                         M!1`matrix(k + 1, 0))),
                        V2Ml(j,
                             LAMBDA (k: below(j)): M!1`matrix(0, k + 1)),
                        (# rows := j,
                           cols := j,
                           matrix
                             := LAMBDA (i: below(j), k: below(j)):
                                  M!1`matrix(i + 1, k + 1) #))) = M!1")
                            (("1" (replace -1) (("1" (propax) nil nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (apply-extensionality)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand Block2M)
                                    (("1"
                                      (expand M2Block)
                                      (("1"
                                        (expand I)
                                        (("1"
                                          (expand *)
                                          (("1"
                                            (expand V2Ml)
                                            (("1"
                                              (typepred M!1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand Block2M)
                                    (("2"
                                      (expand M2Block)
                                      (("2"
                                        (expand I)
                                        (("2"
                                          (expand V2Ml)
                                          (("2"
                                            (expand *)
                                            (("2"
                                              (expand transpose)
                                              (("2"
                                                (typepred M!1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (apply-extensionality)
                                    (("3"
                                      (hide 2)
                                      (("3"
                                        (expand Block2M)
                                        (("3"
                                          (expand M2Block)
                                          (("3"
                                            (expand * 1 1)
                                            (("3"
                                              (expand I 1 1)
                                              (("3"
                                                (expand * 1 1)
                                                (("3"
                                                  (expand I 1 1)
                                                  (("3"
                                                    (expand I 1 3)
                                                    (("3"
                                                      (expand * 1 3)
                                                      (("3"
                                                        (case "x!1=0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "x!2=0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (expand
                                                                     *)
                                                                    (("1"
                                                                      (expand
                                                                       I)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 V2Ml)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "x!2=0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 transpose)
                                                                (("1"
                                                                  (expand
                                                                   V2Ml)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (case "j=0")
                  (("1" (skosimp) (("1" (inst -4 M!1) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (eye_row formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (block_invertible_TCC1 0
  (block_invertible_TCC1-1 nil 3637332089 ("" (subtype-tcc) nil nil)
   nil nil))
 (block_invertible_TCC2 0
  (block_invertible_TCC2-1 nil 3637332089 ("" (subtype-tcc) nil nil)
   nil nil))
 (block_invertible_TCC3 0
  (block_invertible_TCC3-1 nil 3637332089 ("" (subtype-tcc) nil nil)
   nil nil))
 (block_invertible_TCC4 0
  (block_invertible_TCC4-1 nil 3637332089 ("" (subtype-tcc) nil nil)
   nil nil))
 (block_invertible_TCC5 0
  (block_invertible_TCC5-1 nil 3637332089 ("" (subtype-tcc) nil nil)
   nil nil))
 (block_invertible_TCC6 0
  (block_invertible_TCC6-1 nil 3637332089 ("" (subtype-tcc) nil nil)
   nil nil))
 (block_invertible_TCC7 0
  (block_invertible_TCC7-1 nil 3637332089 ("" (subtype-tcc) nil nil)
   nil nil))
 (block_invertible 0
  (block_invertible-1 nil 3637332089
   ("" (auto-rewrite inverse_rows)
    (("" (auto-rewrite inverse_cols)
      (("" (auto-rewrite v2ml_row)
        (("" (auto-rewrite v2ml_col)
          (("" (skeep)
            (("" (expand invertible? 2)
              (("" (name k "(c - (b * (inverse(NN) * b)))")
                (("" (replace -1)
                  ((""
                    (inst 2 "Block2M(M2Block(1,n,1,n)(1/k *I(1),
         -(1/k)*(inverse(NN)*transpose(V2Ml(n,b))),  -(1/k)*(V2Ml(n,b)*inverse(NN)),inverse(NN)+(1/k)*((inverse(NN)*transpose(V2Ml(n,b)))*(V2Ml(n,b)*inverse(NN)))))")
                    (("1" (assert)
                      (("1" (split)
                        (("1"
                          (case "Bsquare?(M2Block(1, n, 1, n)
                                        (1 / k * I(1),
                                         -(1 / k) *
                                          (inverse(NN) * transpose(V2Ml(n, b))),
                                         -(1 / k) * (V2Ml(n, b) * inverse(NN)),
                                         inverse(NN) +
                                          (1 / k) *
                                           ((inverse(NN) * transpose(V2Ml(n, b))) *
                                             (V2Ml(n, b) * inverse(NN)))))")
                          (("1" (expand Bsquare?)
                            (("1" (propax) nil nil)) nil)
                           ("2" (rewrite block_square)
                            (("2" (hide 2 3 -1 -2)
                              (("2"
                                (expand Bdiag_square?)
                                (("2"
                                  (typepred NN)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (expand square?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (grind :exclude inverse) nil nil)) nil)
                         ("3" (expand inverse?)
                          (("3" (assert)
                            (("3" (split)
                              (("1"
                                (assert)
                                (("1"
                                  (expand Block2M 1 2)
                                  (("1"
                                    (expand M2Block 1 (2 3))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite id_block)
                                        (("1"
                                          (rewrite eq_block)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (rewrite left_scal_shift)
                                              (("1"
                                                (rewrite
                                                 right_scal_shift)
                                                (("1"
                                                  (rewrite scal_assoc)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       right_mult_ident)
                                                      (("1"
                                                        (rewrite
                                                         right_scal_shift)
                                                        (("1"
                                                          (case
                                                           "c*(1/k) = (1/k)*c")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (lemma
                                                               scal_assoc)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "I(1)"
                                                                 "1/k"
                                                                 c)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   rl)
                                                                  (("1"
                                                                    (lemma
                                                                     scal_dist)
                                                                    (("1"
                                                                      (case
                                                                       "-(1/k) = (1/k) * -1")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           scal_assoc)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "(V2Ml(n, b) * (inverse(NN) * transpose(V2Ml(n, b))))"
                                                                             "1/k"
                                                                             "-1")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1
                                                                               rl)
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 1
                                                                                 1
                                                                                 "c * I(1)"
                                                                                 "-1 * (V2Ml(n, b) * (inverse(NN) * transpose(V2Ml(n, b))))"
                                                                                 "1/k")
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     v2ml_quad)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       scal_dist)
                                                                                      (("1"
                                                                                        (case
                                                                                         "c * I(1) + -1 * ((b * (inverse(NN) * b)) * I(1)) = k*I(1)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               scal_assoc)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              -7))
                                                                                            (("2"
                                                                                              (expand
                                                                                               *
                                                                                               1
                                                                                               (1
                                                                                                2
                                                                                                5
                                                                                                6))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 I)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   +)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite
                                               right_scal_shift)
                                              (("2"
                                                (rewrite
                                                 right_scal_shift)
                                                (("2"
                                                  (rewrite mult_assoc)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       ident_inverse)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred NN)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 left_mult_ident)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "transpose(V2Ml(n, b))"
                                                                   "I(n)")
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (rewrite
                                                                         right_mult_ident)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               *)
                                                                              (("2"
                                                                                (expand
                                                                                 +)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (apply-extensionality)
                                                                                    (("2"
                                                                                      (apply-extensionality)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2
                                                                                         3)
                                                                                        (("2"
                                                                                          (expand
                                                                                           Zero_mat)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide 2)
                                            (("3"
                                              (rewrite
                                               right_scal_shift)
                                              (("3"
                                                (rewrite
                                                 left_scal_shift)
                                                (("3"
                                                  (rewrite scal_assoc)
                                                  (("3"
                                                    (case
                                                     "-(1/k)*c = 1/k * (-c)")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           left_mult_ident)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "(V2Ml(n, b) * inverse(NN))"
                                                             "I(1)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 left_distributive)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "V2Ml(n,b)"
                                                                   "inverse(NN)"
                                                                   "(1 / k) *
                       ((inverse(NN) * transpose(V2Ml(n, b))) *
                         (V2Ml(n, b) * inverse(NN)))")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       right_scal_shift)
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 mult_assoc)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "V2Ml(n,b)"
                                                                                   "(inverse(NN) * transpose(V2Ml(n, b)))"
                                                                                   "(V2Ml(n, b) * inverse(NN))")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       mult_assoc)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         v2ml_quad)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           right_scal_id)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "V2Ml(n, b) * inverse(NN)"
                                                                                             "b * (inverse(NN) * b)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "(V2Ml(n, b) * inverse(NN)) = 1* (V2Ml(n, b) * inverse(NN))")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               V2Ml
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 V2Ml
                                                                                                                 1
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       scal_dist_left)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         scal_assoc)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           1
                                                                                                                           n
                                                                                                                           1
                                                                                                                           "(1 / k) * (b * (inverse(NN) * b))"
                                                                                                                           "V2Ml(n, b) * inverse(NN)")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             1
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               scal_dist_left)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   1
                                                                                                                                   n
                                                                                                                                   _
                                                                                                                                   _
                                                                                                                                   _)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "1/k*(-c)"
                                                                                                                                       "(1 + (1 / k) * (b * (inverse(NN) * b)))"
                                                                                                                                       "(V2Ml(n, b) * inverse(NN))")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         1
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           zero_scal)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "(V2Ml(n, b) * inverse(NN))")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   *
                                                                                                                   1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (apply-extensionality)
                                                                                                                    (("2"
                                                                                                                      (apply-extensionality)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (hide 2)
                                            (("4"
                                              (rewrite
                                               right_scal_shift)
                                              (("4"
                                                (lemma plus_comm)
                                                (("4"
                                                  (inst
                                                   -1
                                                   "inverse(NN)"
                                                   "(1 / k) *
           ((inverse(NN) * transpose(V2Ml(n, b))) *
             (V2Ml(n, b) * inverse(NN)))")
                                                  (("4"
                                                    (replace -1 1)
                                                    (("4"
                                                      (hide -1)
                                                      (("4"
                                                        (lemma
                                                         plus_assoc)
                                                        (("4"
                                                          (lemma
                                                           left_distributive)
                                                          (("4"
                                                            (inst
                                                             -1
                                                             NN
                                                             "(1 / k) *
          ((inverse(NN) * transpose(V2Ml(n, b))) *
             (V2Ml(n, b) * inverse(NN)))"
                                                             " inverse(NN)")
                                                            (("4"
                                                              (replace
                                                               -1)
                                                              (("4"
                                                                (hide
                                                                 -1)
                                                                (("4"
                                                                  (rewrite
                                                                   right_scal_shift)
                                                                  (("4"
                                                                    (inst?
                                                                     -1)
                                                                    (("4"
                                                                      (replace
                                                                       -1)
                                                                      (("4"
                                                                        (hide
                                                                         -1)
                                                                        (("4"
                                                                          (lemma
                                                                           mult_assoc)
                                                                          (("4"
                                                                            (inst
                                                                             -1
                                                                             NN
                                                                             "(inverse(NN) * transpose(V2Ml(n, b)))"
                                                                             "(V2Ml(n, b) * inverse(NN))")
                                                                            (("4"
                                                                              (replace
                                                                               -1)
                                                                              (("4"
                                                                                (hide
                                                                                 -1)
                                                                                (("4"
                                                                                  (lemma
                                                                                   mult_assoc)
                                                                                  (("4"
                                                                                    (inst
                                                                                     -1
                                                                                     NN
                                                                                     "inverse(NN)"
                                                                                     "transpose(V2Ml(n,b))")
                                                                                    (("4"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("4"
                                                                                        (rewrite
                                                                                         ident_inverse)
                                                                                        (("4"
                                                                                          (typepred
                                                                                           NN)
                                                                                          (("4"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 left_mult_ident)
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "transpose(V2Ml(n,b))"
                                                                                                   "I(n)")
                                                                                                  (("4"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("4"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("4"
                                                                                                        (lemma
                                                                                                         scal_dist_left)
                                                                                                        (("4"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           n
                                                                                                           n
                                                                                                           _
                                                                                                           _
                                                                                                           _)
                                                                                                          (("4"
                                                                                                            (inst?
                                                                                                             -1)
                                                                                                            (("4"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1
                                                                                                               rl)
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                (("4"
                                                                                                                  (hide
                                                                                                                   -1)
                                                                                                                  (("4"
                                                                                                                    (rewrite
                                                                                                                     zero_scal)
                                                                                                                    (("4"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand Block2M 1 2)
                                (("2"
                                  (expand M2Block 1 (2 3))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite id_block)
                                      (("2"
                                        (rewrite eq_block)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (rewrite left_scal_shift)
                                            (("1"
                                              (rewrite
                                               right_scal_shift)
                                              (("1"
                                                (rewrite scal_assoc)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     right_mult_ident)
                                                    (("1"
                                                      (rewrite
                                                       left_scal_shift)
                                                      (("1"
                                                        (lemma
                                                         mult_assoc)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "V2Ml(n, b)"
                                                           "inverse(NN)"
                                                           "transpose(V2Ml(n, b))")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               v2ml_quad)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   scal_dist_left)
                                                                  (("1"
                                                                    (rewrite
                                                                     scal_assoc)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       1
                                                                       1
                                                                       "1/k * c"
                                                                       "-(1 / k) * (b * (inverse(NN) * b))"
                                                                       "I(1)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1
                                                                         rl)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "(1 / k * c + -(1 / k) * (b * (inverse(NN) * b))) = 1")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (rewrite left_scal_shift)
                                            (("2"
                                              (rewrite
                                               right_scal_shift)
                                              (("2"
                                                (rewrite scal_assoc)
                                                (("2"
                                                  (lemma
                                                   right_mult_ident)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "(inverse(NN) * transpose(V2Ml(n, b)))"
                                                     "I(1)")
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (lemma
                                                         right_distributive)
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (lemma
                                                                 plus_assoc)
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         scal_dist_left)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             n
                                                                             1
                                                                             _
                                                                             _
                                                                             _)
                                                                            (("2"
                                                                              (lemma
                                                                               mult_assoc)
                                                                              (("2"
                                                                                (rewrite
                                                                                 left_scal_shift
                                                                                 1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "inverse(NN) * transpose(V2Ml(n, b))"
                                                                                   "(V2Ml(n, b) * inverse(NN))"
                                                                                   "transpose(V2Ml(n, b))")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         mult_assoc)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "V2Ml(n, b)"
                                                                                           "inverse(NN)"
                                                                                           " transpose(V2Ml(n, b))")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             1
                                                                                             rl)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               v2ml_quad)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 right_scal_shift)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   scal_assoc)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     right_mult_ident)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "inverse(NN) * transpose(V2Ml(n, b))"
                                                                                                       " I(1)")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "(inverse(NN) * transpose(V2Ml(n, b))) = 1* (inverse(NN)*transpose(V2Ml(n,b)))")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 V2Ml
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   V2Ml
                                                                                                                   1
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "- (1/k) *c"
                                                                                                                         1
                                                                                                                         "inverse(NN)*transpose(V2Ml(n,b))")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           1
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               scal_dist_left)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 n
                                                                                                                                 1
                                                                                                                                 _
                                                                                                                                 _
                                                                                                                                 _)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "-(1/k)*c+1"
                                                                                                                                   "((1 / k) * (b * (inverse(NN) * b)))"
                                                                                                                                   "inverse(NN) * transpose(V2Ml(n, b))")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     1
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         zero_scal)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "(inverse(NN) * transpose(V2Ml(n, b)))")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     *
                                                                                                                     1
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (apply-extensionality)
                                                                                                                        (("2"
                                                                                                                          (apply-extensionality)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (rewrite left_scal_shift)
                                            (("3"
                                              (lemma mult_assoc)
                                              (("3"
                                                (rewrite
                                                 left_scal_shift)
                                                (("3"
                                                  (inst? -1)
                                                  (("3"
                                                    (replace -1 1 rl)
                                                    (("3"
                                                      (rewrite
                                                       inverse_ident)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (typepred NN)
                                                          (("3"
                                                            (replace
                                                             -1)
                                                            (("3"
                                                              (lemma
                                                               right_mult_ident)
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "V2Ml(n,b)"
                                                                 "I(n)")
                                                                (("3"
                                                                  (replace
                                                                   -1)
                                                                  (("3"
                                                                    (lemma
                                                                     left_mult_ident)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "V2Ml(n,b)"
                                                                       "I(1)")
                                                                      (("3"
                                                                        (replace
                                                                         -1)
                                                                        (("3"
                                                                          (lemma
                                                                           scal_dist_left)
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             1
                                                                             n
                                                                             "1/k"
                                                                             "-1/k"
                                                                             "V2Ml(n,b)")
                                                                            (("3"
                                                                              (replace
                                                                               -1
                                                                               1
                                                                               rl)
                                                                              (("3"
                                                                                (lemma
                                                                                 zero_scal)
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "V2Ml(n,b)")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (lemma right_distributive)
                                            (("4"
                                              (inst
                                               -1
                                               "inverse(NN)"
                                               "(1 / k) *
          ((inverse(NN) * transpose(V2Ml(n, b))) *
            (V2Ml(n, b) * inverse(NN)))"
                                               NN)
                                              (("4"
                                                (replace -1)
                                                (("4"
                                                  (rewrite
                                                   inverse_ident)
                                                  (("4"
                                                    (typepred NN)
                                                    (("4"
                                                      (replace -1)
                                                      (("4"
                                                        (hide -3)
                                                        (("4"
                                                          (lemma
                                                           plus_comm)
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "I(n)"
                                                             "
         ((1 / k) *
           ((inverse(NN) * transpose(V2Ml(n, b))) *
             (V2Ml(n, b) * inverse(NN)))
           * NN)")
                                                            (("4"
                                                              (replace
                                                               -1)
                                                              (("4"
                                                                (hide
                                                                 -1)
                                                                (("4"
                                                                  (lemma
                                                                   plus_assoc)
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "-(1 / k) * (inverse(NN) * transpose(V2Ml(n, b))) * V2Ml(n, b)"
                                                                     "((1 / k) *
          ((inverse(NN) * transpose(V2Ml(n, b))) *
            (V2Ml(n, b) * inverse(NN)))
          * NN)"
                                                                     "I(n)")
                                                                    (("4"
                                                                      (replace
                                                                       -1)
                                                                      (("4"
                                                                        (hide
                                                                         -1)
                                                                        (("4"
                                                                          (lemma
                                                                           mult_assoc)
                                                                          (("4"
                                                                            (inst
                                                                             -1
                                                                             "inverse(NN) * transpose(V2Ml(n, b))"
                                                                             "V2Ml(n,b)"
                                                                             "inverse(NN)")
                                                                            (("4"
                                                                              (replace
                                                                               -1)
                                                                              (("4"
                                                                                (hide
                                                                                 -1)
                                                                                (("4"
                                                                                  (lemma
                                                                                   mult_assoc)
                                                                                  (("4"
                                                                                    (inst
                                                                                     -1
                                                                                     "(inverse(NN) * transpose(V2Ml(n, b)) * V2Ml(n, b))"
                                                                                     "inverse(NN)"
                                                                                     NN)
                                                                                    (("4"
                                                                                      (rewrite
                                                                                       left_scal_shift)
                                                                                      (("4"
                                                                                        (rewrite
                                                                                         left_scal_shift)
                                                                                        (("4"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           rl)
                                                                                          (("4"
                                                                                            (rewrite
                                                                                             inverse_ident)
                                                                                            (("4"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 right_mult_ident)
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "(inverse(NN) * transpose(V2Ml(n, b)) * V2Ml(n, b))"
                                                                                                   " I(n)")
                                                                                                  (("4"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("4"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       -2)
                                                                                                      (("4"
                                                                                                        (lemma
                                                                                                         scal_dist_left)
                                                                                                        (("4"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           n
                                                                                                           n
                                                                                                           "-(1/k)"
                                                                                                           "(1/k)"
                                                                                                           "(inverse(NN) * transpose(V2Ml(n, b)) * V2Ml(n, b))")
                                                                                                          (("4"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1
                                                                                                             rl)
                                                                                                            (("4"
                                                                                                              (lemma
                                                                                                               zero_scal)
                                                                                                              (("4"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "(inverse(NN) * transpose(V2Ml(n, b)) * V2Ml(n, b))")
                                                                                                                (("4"
                                                                                                                  (assert)
                                                                                                                  (("4"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("4"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((invertible? const-decl "bool" matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (Zero type-eq-decl nil matrices nil)
    (zero? const-decl "bool" matrices nil)
    (eq_block formula-decl nil block_matrices nil)
    (left_scal_shift formula-decl nil matrices nil)
    (scal_assoc formula-decl nil matrices nil)
    (right_mult_ident formula-decl nil matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (v2ml_quad formula-decl nil matrices nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (scal_dist formula-decl nil matrices nil)
    (right_scal_shift formula-decl nil matrices nil)
    (mult_assoc formula-decl nil matrices nil)
    (ident_inverse formula-decl nil matrix_lemmas nil)
    (zero_row formula-decl nil matrices nil)
    (zero_col formula-decl nil matrices nil)
    (left_mult_ident formula-decl nil matrices nil)
    (right_scal_id formula-decl nil matrices nil)
    (scal_dist_left formula-decl nil matrices nil)
    (zero_scal formula-decl nil matrices nil)
    (left_distributive formula-decl nil matrices nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (zero_left_ident formula-decl nil matrices nil)
    (plus_assoc formula-decl nil matrices nil)
    (plus_comm formula-decl nil matrices nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (id_block formula-decl nil block_matrices nil)
    (inverse_ident formula-decl nil matrix_lemmas nil)
    (right_distributive formula-decl nil matrices nil)
    (conv_mult formula-decl nil block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Bsquare? const-decl "bool" block_matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (block_square formula-decl nil block_matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (inverse? const-decl "bool" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (inverse_rows formula-decl nil matrix_lemmas nil)
    (inverse_cols formula-decl nil matrix_lemmas nil)
    (v2ml_col formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (v2ml_row formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "real" vectors "vectors/")
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (inverse const-decl "{N: Square | N`rows = M`rows}" matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil))
   shostak)))

