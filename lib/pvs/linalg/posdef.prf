(posdef
 (symetric_qua_trans_TCC1 0
  (symetric_qua_trans_TCC1-1 nil 3637169317 ("" (subtype-tcc) nil nil)
   nil nil))
 (symetric_qua_trans_TCC2 0
  (symetric_qua_trans_TCC2-1 nil 3637169317 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (symetric_qua_trans 0
  (symetric_qua_trans-1 nil 3637169318
   ("" (skosimp)
    (("" (expand "symmetric?")
      (("" (split)
        (("1" (expand "square?") (("1" (assert) nil nil)) nil)
         ("2" (lemma "transpose_product")
          (("2" (inst?)
            (("2" (replace -1)
              (("2" (lemma "transpose_product")
                (("2" (inst -1 "M!1" "A!1")
                  (("2" (replace -1)
                    (("2" (replace -3)
                      (("2" (lemma "transpose2")
                        (("2" (inst -1 "M!1")
                          (("2" (replace -1)
                            (("2" (assert)
                              (("2"
                                (lemma "mult_assoc")
                                (("2"
                                  (inst
                                   -1
                                   "M!1"
                                   "A!1"
                                   "transpose(M!1)")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric? const-decl "bool" matrices nil)
    (transpose_product formula-decl nil matrices nil)
    (mult_assoc formula-decl nil matrices nil)
    (transpose2 formula-decl nil matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "Matrix" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (square? const-decl "bool" matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (mult_dim_col formula-decl nil matrices nil))
   shostak))
 (skewsym_quad_zero_TCC1 0
  (skewsym_quad_zero_TCC1-1 nil 3637158923 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (skew_symmetric? const-decl "bool" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (skewsym_quad_zero 0
  (skewsym_quad_zero-1 nil 3637158925
   ("" (skeep)
    (("" (typepred A)
      (("" (lemma trans_mat_scal)
        (("" (inst -1 A x x)
          (("1" (expand skew_symmetric?)
            (("1" (flatten)
              (("1" (replace -3 -1)
                (("1" (rewrite "dot_comm")
                  (("1" (expand square?)
                    (("1" (case "transpose(A)`rows = A`rows")
                      (("1" (replace -1 * :actuals? t)
                        (("1" (case "(-A * x) * x = - ((A*x)*x)")
                          (("1"
                            (case "((matrices.-)(A))`rows = A`rows")
                            (("1" (replace -1 * :actuals? t)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "(A * x) * x +(A * x) * x  = -((A * x) * x) + (A * x) * x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "(A * x) * x + -((A * x) * x) = 0")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (lemma zero_times3)
                                              (("1"
                                                (inst
                                                 -1
                                                 2
                                                 "((A * x) * x)")
                                                (("1"
                                                  (bddsimp -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "dot_comm[A`rows]")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace
                                                         -7
                                                         :actuals?
                                                         t)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand - 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma matrix_prod_minus)
                            (("2" (inst -1 A x)
                              (("2"
                                (hide -2 -3 -4 -5 2)
                                (("2"
                                  (case
                                   "((matrices.-)(A))`rows = A`rows")
                                  (("1"
                                    (replace -1 :actuals? t)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (rewrite
                                           "dot_neg_left[A`rows]")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand -)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand -)
                            (("3" (replace -3) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand transpose) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand skew_symmetric?)
            (("2" (flatten)
              (("2" (expand square?)
                (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((skew_symmetric? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (A skolem-const-decl "(skew_symmetric?)" posdef nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (dot_comm formula-decl nil vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (transpose const-decl "Matrix" matrices nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "Matrix" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (transp_row formula-decl nil matrices nil)
    (zero_times3 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot_neg_left formula-decl nil vectors "vectors/")
    (- const-decl "Vector" vectors "vectors/")
    (matrix_prod_minus formula-decl nil matrix_lemmas nil)
    (square? const-decl "bool" matrices nil)
    (trans_mat_scal formula-decl nil matrices nil))
   shostak))
 (quad_scal_TCC1 0
  (quad_scal_TCC1-1 nil 3637446751 ("" (subtype-tcc) nil nil)
   ((* const-decl "Matrix" matrices nil)) nil))
 (quad_scal_TCC2 0
  (quad_scal_TCC2-1 nil 3637446751 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Matrix" matrices nil))
   nil))
 (quad_scal_TCC3 0
  (quad_scal_TCC3-1 nil 3637446751 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (quad_scal 0
  (quad_scal-1 nil 3637446752
   ("" (skeep)
    (("" (lemma left_scal_shift_vect)
      (("" (inst -1 A x a)
        (("" (replace -1)
          (("" (typepred A)
            (("" (expand square?)
              (("" (replace -1 :actuals? t)
                (("" (rewrite "dot_scal_right[A`cols]") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((left_scal_shift_vect formula-decl nil matrices nil)
    (dot_scal_right formula-decl nil vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (square? const-decl "bool" matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (quad_sum_TCC1 0
  (quad_sum_TCC1-1 nil 3637159009 ("" (subtype-tcc) nil nil)
   ((add_dim_col formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (quad_sum_TCC2 0
  (quad_sum_TCC2-1 nil 3637159009 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "Matrix" matrices nil))
   nil))
 (quad_sum_TCC3 0
  (quad_sum_TCC3-1 nil 3637159009 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (quad_sum_TCC4 0
  (quad_sum_TCC4-1 nil 3637159009 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (quad_sum 0
  (quad_sum-1 nil 3637159010
   ("" (skeep)
    (("" (expand +)
      (("" (expand *)
        (("" (lemma "sigma_sum[below(A`cols)]")
          (("1" (inst? -1)
            (("1" (replace -1)
              (("1" (assert)
                (("1" (hide -1)
                  (("1" (lemma "sigma_eq[below(A`cols)]")
                    (("1" (inst? -1)
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (skeep)
                            (("1" (assert)
                              (("1"
                                (case "A`cols=B`cols")
                                (("1"
                                  (replace -1 :actuals? t)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (swap-rel -1)
                                      (("1"
                                        (replace -1 :actuals? t)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "sigma_sum[below(A`cols)]")
                                            (("1"
                                              (inst? -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "sigma(0, A`cols - 1,
                            LAMBDA (k: below(A`cols)): x(k) * A`matrix(n, k)) = sigma(0, A`cols - 1,
                            LAMBDA (k: below(A`cols)): A`matrix(n, k)*x(k))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "sigma(0, A`cols - 1,
                              LAMBDA (k: below(A`cols)): x(k) * B`matrix(n, k))= sigma(0, A`cols - 1,
                              LAMBDA (k: below(A`cols)): B`matrix(n, k)*x(k))")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3)
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_eq[below(A`cols)]")
                                                                        (("1"
                                                                          (inst?
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "LAMBDA (k: below(B`cols)): B`matrix(n, k) * x(k)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (typepred
                                                                                 A)
                                                                                (("3"
                                                                                  (typepred
                                                                                   B)
                                                                                  (("3"
                                                                                    (expand
                                                                                     square?)
                                                                                    (("3"
                                                                                      (hide
                                                                                       2)
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               A)
                                                                              (("2"
                                                                                (typepred
                                                                                 B)
                                                                                (("2"
                                                                                  (expand
                                                                                   square?)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (rewrite
                                                                   "sigma_eq[below(A`cols)]")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 1)
                                                                (("3"
                                                                  (typepred
                                                                   A)
                                                                  (("3"
                                                                    (typepred
                                                                     B)
                                                                    (("3"
                                                                      (expand
                                                                       square?)
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 -1)
                                                        (("2"
                                                          (rewrite
                                                           "sigma_eq[below(A`cols)]")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         1)
                                                        (("3"
                                                          (typepred A)
                                                          (("3"
                                                            (typepred
                                                             B)
                                                            (("3"
                                                              (expand
                                                               square?)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred A)
                                                  (("2"
                                                    (typepred B)
                                                    (("2"
                                                      (expand square?)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (typepred A)
                                                  (("3"
                                                    (typepred B)
                                                    (("3"
                                                      (expand square?)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (typepred A)
                                    (("2"
                                      (typepred B)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (typepred A)
                          (("2" (typepred B)
                            (("2" (expand square?)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1)
                        (("3" (typepred A)
                          (("3" (typepred B)
                            (("3" (expand square?)
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide-all-but 1)
                        (("4" (typepred A)
                          (("4" (typepred B)
                            (("4" (expand square?)
                              (("4" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("5" (hide-all-but 1)
                        (("5" (typepred A)
                          (("5" (typepred B)
                            (("5" (expand square?)
                              (("5" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("6" (hide-all-but 1)
                        (("6" (typepred A)
                          (("6" (typepred B)
                            (("6" (expand square?)
                              (("6" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred A)
              (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)
             ("3" (typepred A)
              (("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)
             ("4" (typepred B)
              (("4" (typepred A)
                (("4" (hide 2) (("4" (grind) nil nil)) nil)) nil))
              nil)
             ("5" (typepred B)
              (("5" (typepred A)
                (("5" (hide 2) (("5" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (typepred A)
              (("2" (typepred B) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_sum formula-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (n skolem-const-decl "subrange(0, A`cols - 1)" posdef nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (B skolem-const-decl
     "(LAMBDA (N): A`rows = N`rows AND A`cols = N`cols)" posdef nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Index type-eq-decl nil vectors "vectors/")
    (A skolem-const-decl "(square?)" posdef nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil))
   shostak))
 (sym_block_quad_expr_TCC1 0
  (sym_block_quad_expr_TCC1-1 nil 3637176837 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (sym_block_quad_expr_TCC2 0
  (sym_block_quad_expr_TCC2-1 nil 3637176837 ("" (subtype-tcc) nil nil)
   ((transpose const-decl "Matrix" matrices nil)) nil))
 (sym_block_quad_expr_TCC3 0
  (sym_block_quad_expr_TCC3-1 nil 3637176837 ("" (subtype-tcc) nil nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (transp_col formula-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   nil))
 (sym_block_quad_expr_TCC4 0
  (sym_block_quad_expr_TCC4-1 nil 3637176837 ("" (subtype-tcc) nil nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (transp_col formula-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   nil))
 (sym_block_quad_expr_TCC5 0
  (sym_block_quad_expr_TCC5-1 nil 3637176837 ("" (subtype-tcc) nil nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (transp_col formula-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   nil))
 (sym_block_quad_expr_TCC6 0
  (sym_block_quad_expr_TCC6-1 nil 3637176837 ("" (subtype-tcc) nil nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (transp_col formula-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   nil))
 (sym_block_quad_expr_TCC7 0
  (sym_block_quad_expr_TCC7-1 nil 3637176837 ("" (subtype-tcc) nil nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (transp_col formula-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   nil))
 (sym_block_quad_expr_TCC8 0
  (sym_block_quad_expr_TCC8-1 nil 3637176837 ("" (subtype-tcc) nil nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (transp_col formula-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   nil))
 (sym_block_quad_expr_TCC9 0
  (sym_block_quad_expr_TCC9-1 nil 3637176837 ("" (subtype-tcc) nil nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (transp_col formula-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   nil))
 (sym_block_quad_expr_TCC10 0
  (sym_block_quad_expr_TCC10-1 nil 3637176837
   ("" (subtype-tcc) nil nil)
   ((Block2M const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (transp_col formula-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil))
   nil))
 (sym_block_quad_expr 0
  (sym_block_quad_expr-1 nil 3637176839
   ("" (skeep)
    (("" (replace -1)
      (("" (replace -2)
        (("" (assert)
          (("" (rewrite block_mult_comm)
            (("1" (lemma block_v_mult_comm)
              (("1"
                (inst -1 m n "V2Block(m, n)(x, y)"
                 "BV2toBV1(M2Block(m, n, m, n)(A, B, transpose(B), D) *
                             V2Block(m, n)(x, y))")
                (("1"
                  (case "V2Block(m, n)(x, y)`comp1 + V2Block(m, n)(x, y)`comp2 = m+n")
                  (("1" (replace -1 :actuals? t)
                    (("1" (replace -2)
                      (("1" (expand * 1 1)
                        (("1" (assert)
                          (("1" (rewrite access_vb_1)
                            (("1" (rewrite access_vb_2)
                              (("1"
                                (expand * 1 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite access_vb_1)
                                    (("1"
                                      (rewrite access_vb_2)
                                      (("1"
                                        (expand * 1 5)
                                        (("1"
                                          (rewrite access_vb_1)
                                          (("1"
                                            (rewrite access_vb_2)
                                            (("1"
                                              (rewrite access_m_3)
                                              (("1"
                                                (rewrite access_m_1)
                                                (("1"
                                                  (case
                                                   "V2Block(m, n)(x, y)`comp2 = n AND Block2M2(M2Block(m, n, m, n)
                                              (A, B, matrices.transpose(B), D))`rows = n AND V2Block(m, n)(x, y)`comp1 = m AND Block2M1(M2Block(m, n, m, n)
                                               (A, B, matrices.transpose(B), D))`rows = m")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :actuals?
                                                       t
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :actuals?
                                                         t
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :actuals?
                                                           t
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :actuals?
                                                             t
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (rewrite
                                                               "dot_add_right[n]")
                                                              (("1"
                                                                (rewrite
                                                                 "dot_add_right[m]")
                                                                (("1"
                                                                  (lemma
                                                                   "dot_comm[m]")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     x
                                                                     "transpose(B)*y")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         trans_mat_scal)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           B
                                                                           y
                                                                           x)
                                                                          (("1"
                                                                            (case
                                                                             "matrices.transpose(B)`rows = m AND B`rows = n")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :actuals?
                                                                                 t
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :actuals?
                                                                                   t
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             B)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   B)
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand V2Block 1)
                                                    (("2"
                                                      (expand Block2M2)
                                                      (("2"
                                                        (expand
                                                         M2Block)
                                                        (("2"
                                                          (expand
                                                           Block2M1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand V2Block) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand BV2toBV1)
                    (("2" (assert)
                      (("2" (expand *)
                        (("2" (assert)
                          (("2" (expand M2Block)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (expand V2Block 1) (("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand V2Block 1)
              (("2" (expand M2Block 1) (("2" (assert) nil nil)) nil))
              nil)
             ("3" (hide 2)
              (("3" (expand Bdiag_square?)
                (("3" (expand square?) (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (square? const-decl "bool" matrices nil)
    (transp_col formula-decl nil matrices nil)
    (block_v_mult_comm formula-decl nil block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (access_v_2 formula-decl nil block_matrices nil)
    (access_v_1 formula-decl nil block_matrices nil)
    (access_vb_2 formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (dot_add_right formula-decl nil vectors "vectors/")
    (dot_comm formula-decl nil vectors "vectors/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (trans_mat_scal formula-decl nil matrices nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (transp_row formula-decl nil matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (access_vb_1 formula-decl nil block_matrices nil)
    (* const-decl "real" block_matrices nil)
    (Block_Vector2 type-eq-decl nil block_matrices nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (* const-decl "Block_Vector2" block_matrices nil)
    (A skolem-const-decl "Mat(m, m)" posdef nil)
    (B skolem-const-decl "Mat(n, m)" posdef nil)
    (D skolem-const-decl "Mat(n, n)" posdef nil)
    (y skolem-const-decl "Vector[n]" posdef nil)
    (x skolem-const-decl "Vector[m]" posdef nil)
    (n skolem-const-decl "posnat" posdef nil)
    (m skolem-const-decl "posnat" posdef nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (block_mult_comm formula-decl nil block_matrices nil))
   shostak))
 (def_pos_id_TCC1 0
  (def_pos_id_TCC1-1 nil 3637405074 ("" (subtype-tcc) nil nil)
   ((square? const-decl "bool" matrices nil)
    (eye_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil))
   nil))
 (def_pos_id 0
  (def_pos_id-1 nil 3637405075
   ("" (skeep)
    (("" (expand def_pos?)
      (("" (skeep)
        (("" (lemma ident_mat_prod)
          (("" (inst -1 n x)
            (("" (replace -1)
              (("" (case "I(n)`rows = n")
                (("1" (replace -1 :actuals? t)
                  (("1" (lemma "v_neq_zero[n]")
                    (("1" (inst -1 x)
                      (("1" (expand sqv) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((def_pos? const-decl "bool" posdef nil)
    (ident_mat_prod formula-decl nil matrix_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv const-decl "nnreal" vectors "vectors/")
    (v_neq_zero formula-decl nil vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (eye_row formula-decl nil matrices nil))
   shostak))
 (semidef_pos_sym_TCC1 0
  (semidef_pos_sym_TCC1-1 nil 3637159300 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (symmetric_part const-decl "(symmetric?)" matrices nil)
    (square? const-decl "bool" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (semidef_pos_sym 0
  (semidef_pos_sym-1 nil 3637159301
   ("" (skeep)
    (("" (bddsimp)
      (("1" (expand semidef_pos?)
        (("1" (expand symmetric_part :actuals? t)
          (("1" (case "symmetric_part(A)`rows = A`rows")
            (("1" (replace -1 :actuals? t)
              (("1" (skeep)
                (("1" (inst -2 x)
                  (("1" (lemma square_decomp)
                    (("1" (inst -1 A)
                      (("1" (replace -1 -3)
                        (("1" (lemma quad_sum)
                          (("1"
                            (inst -1 "symmetric_part(A)"
                             "skew_symmetric_part(A)" x)
                            (("1"
                              (case "matrices.symmetric_part(A)`cols = A`cols")
                              (("1"
                                (replace -1 :actuals? t)
                                (("1"
                                  (typepred A)
                                  (("1"
                                    (expand square?)
                                    (("1"
                                      (replace -1 :actuals? t)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (lemma skewsym_quad_zero)
                                          (("1"
                                            (inst
                                             -1
                                             "skew_symmetric_part(A)"
                                             x)
                                            (("1"
                                              (case
                                               "matrices.skew_symmetric_part(A)`cols = A`cols")
                                              (("1"
                                                (replace
                                                 -1
                                                 :actuals?
                                                 t)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (expand
                                                       symmetric_part
                                                       -8)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 skew_symmetric_part
                                                 1)
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred A)
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (typepred A)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (typepred A) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (typepred A) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand semidef_pos?)
        (("2" (skeep)
          (("2" (lemma square_decomp)
            (("2" (inst? -1)
              (("2" (replace -1 1)
                (("2" (lemma quad_sum)
                  (("2"
                    (inst -1 "symmetric_part(A)"
                     "skew_symmetric_part(A)" x)
                    (("1" (typepred A)
                      (("1" (expand square?)
                        (("1"
                          (case "matrices.symmetric_part(A)`cols=A`cols")
                          (("1" (replace -1 :actuals? t)
                            (("1" (replace -2 :actuals? t)
                              (("1"
                                (replace -3)
                                (("1"
                                  (lemma skewsym_quad_zero)
                                  (("1"
                                    (inst
                                     -1
                                     "skew_symmetric_part(A)"
                                     x)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "matrices.skew_symmetric_part(A)`cols = A`cols")
                                        (("1"
                                          (replace -1 :actuals? t)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -7 x)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "matrices.symmetric_part(A)`rows = A`cols")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :actuals?
                                                         t)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (typepred A)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred A)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (typepred A)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (typepred A) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (typepred A) (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (hide-all-but 1)
                      (("3" (typepred A) (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric_part const-decl "(symmetric?)" matrices nil)
    (A skolem-const-decl "(square?)" posdef nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (quad_sum formula-decl nil posdef nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (skewsym_quad_zero formula-decl nil posdef nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (transp_row formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (skew_symmetric? const-decl "bool" matrices nil)
    (skew_symmetric_part const-decl "(skew_symmetric?)" matrices nil)
    (square_decomp formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (semidef_pos? const-decl "bool" posdef nil))
   shostak))
 (def_pos_semidef_pos 0
  (def_pos_semidef_pos-1 nil 3637159427
   ("" (skeep)
    (("" (expand def_pos?)
      (("" (expand semidef_pos?)
        (("" (skeep)
          (("" (inst -1 x)
            (("" (case "x=zero[A`rows]")
              (("1" (replace -1)
                (("1" (expand *)
                  (("1" (expand zero) (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((def_pos? const-decl "bool" posdef nil)
    (zero const-decl "Vector" vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_nnreal application-judgement "nnreal" sigma_below "reals/")
    (sigma_nat application-judgement "nat" sigma_below "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (semidef_pos? const-decl "bool" posdef nil))
   shostak))
 (posdef_inv 0
  (posdef_inv-1 nil 3637168475
   ("" (skeep)
    (("" (expand def_pos?)
      (("" (skeep)
        (("" (hide -2)
          (("" (inst -2 "inverse(P)*x")
            (("1" (bddsimp -2)
              (("1" (case "P* (inverse(P) * x) = P*zero[P`rows]")
                (("1" (lemma mult_assoc_vect)
                  (("1" (inst -1 P "inverse(P)" x)
                    (("1" (replace -1 -2 rl)
                      (("1" (rewrite ident_inverse)
                        (("1" (assert)
                          (("1" (lemma ident_mat_prod)
                            (("1" (inst -1 "P`rows" x)
                              (("1"
                                (replace -1)
                                (("1"
                                  (lemma matrix_prod_zero)
                                  (("1"
                                    (inst -1 P)
                                    (("1"
                                      (typepred P)
                                      (("1"
                                        (expand square?)
                                        (("1"
                                          (replace -1 :actuals? t)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (lemma inverse_rows)
                                              (("1"
                                                (inst -1 P)
                                                (("1"
                                                  (replace
                                                   -1
                                                   :actuals?
                                                   t)
                                                  (("1"
                                                    (replace
                                                     -2
                                                     :actuals?
                                                     t)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite inverse_rows)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite inverse_rows)
                      (("2" (typepred P)
                        (("2" (expand square?) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -1) (("2" (propax) nil nil)) nil)
                 ("3" (typepred P)
                  (("3" (expand square?)
                    (("3" (replace -1) (("3" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("4" (rewrite inverse_rows)
                  (("4" (typepred P)
                    (("4" (expand square?)
                      (("4" (replace -1) (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred P)
                (("2" (lemma conv_prod_int)
                  (("2" (inst -1 "inverse(P)" P "inverse(P)" x x)
                    (("1" (rewrite transp_inv)
                      (("1" (reveal -3)
                        (("1" (expand symmetric?)
                          (("1" (replace -1)
                            (("1" (rewrite ident_inverse)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite right_mult_ident)
                                  (("1"
                                    (case
                                     "matrices.transpose(matrices.inverse(P))`rows = P`rows")
                                    (("1"
                                      (replace -1 :actuals? t)
                                      (("1"
                                        (replace -3 -6 rl)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand transpose 1)
                                      (("2"
                                        (rewrite inverse_cols)
                                        (("2"
                                          (expand square? -3)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite inverse_cols)
                                    (("2"
                                      (expand square?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite inverse_rows)
                      (("2" (expand square?) (("2" (assert) nil nil))
                        nil))
                      nil)
                     ("3" (rewrite inverse_cols)
                      (("3" (expand square?) (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (reveal -2)
              (("2" (rewrite inverse_rows) (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((def_pos? const-decl "bool" posdef nil)
    (mult_assoc_vect formula-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (matrix_prod_zero formula-decl nil matrix_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (inverse_rows formula-decl nil matrix_lemmas nil)
    (ident_mat_prod formula-decl nil matrix_lemmas nil)
    (ident_inverse formula-decl nil matrix_lemmas nil)
    (zero const-decl "Vector" vectors "vectors/")
    (conv_prod_int formula-decl nil matrix_lemmas nil)
    (transp_inv formula-decl nil matrix_lemmas nil)
    (symmetric? const-decl "bool" matrices nil)
    (eye_row formula-decl nil matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (right_mult_ident formula-decl nil matrices nil)
    (inverse_cols formula-decl nil matrix_lemmas nil)
    (transpose const-decl "Matrix" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (invertible? const-decl "bool" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inverse const-decl "{N: Square | N`rows = M`rows}" matrices nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (squareMat? const-decl "bool" matrices nil)
    (n skolem-const-decl "posnat" posdef nil)
    (SquareMat type-eq-decl nil matrices nil)
    (P skolem-const-decl "SquareMat(n)" posdef nil))
   shostak))
 (posdef_inveq 0
  (posdef_inveq-1 nil 3637168785
   ("" (skeep)
    (("" (bddsimp)
      (("1" (lemma posdef_inv)
        (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil)
       ("2" (lemma posdef_inv)
        (("2" (inst -1 n "inverse(P)")
          (("1" (bddsimp -1)
            (("1" (assert) (("1" (rewrite inverse2) nil nil)) nil)
             ("2" (propax) nil nil)
             ("3" (expand symmetric?)
              (("3" (rewrite transp_inv)
                (("3" (replace -2) (("3" (propax) nil nil)) nil)) nil))
              nil)
             ("4" (rewrite inverse_invertible) nil nil))
            nil)
           ("2" (expand squareMat?)
            (("2" (rewrite inverse_rows)
              (("2" (typepred P)
                (("2" (expand squareMat?) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (posdef_inv formula-decl nil posdef nil)
    (P skolem-const-decl "SquareMat(n)" posdef nil)
    (inverse const-decl "{N: Square | N`rows = M`rows}" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (invertible? const-decl "bool" matrices nil)
    (n skolem-const-decl "posnat" posdef nil)
    (inverse_invertible formula-decl nil matrix_lemmas nil)
    (symmetric? const-decl "bool" matrices nil)
    (transp_inv formula-decl nil matrix_lemmas nil)
    (inverse2 formula-decl nil matrix_lemmas nil)
    (inverse_rows formula-decl nil matrix_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (semidef_qua_trans_TCC1 0
  (semidef_qua_trans_TCC1-1 nil 3637169012 ("" (subtype-tcc) nil nil)
   nil nil))
 (semidef_qua_trans_TCC2 0
  (semidef_qua_trans_TCC2-1 nil 3637169012 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (semidef_qua_trans_TCC3 0
  (semidef_qua_trans_TCC3-1 nil 3637169012 ("" (subtype-tcc) nil nil)
   ((square? const-decl "bool" matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (mult_dim_col formula-decl nil matrices nil))
   nil))
 (semidef_qua_trans 0
  (semidef_qua_trans-1 nil 3637169013
   ("" (skeep)
    (("" (expand semidef_pos?)
      (("" (skeep)
        (("" (inst -1 "(transpose(M)*x)")
          (("1" (lemma trans_mat_scal)
            (("1" (inst -1 M x "(A * (transpose(M) * x))")
              (("1"
                (case "vectors@vectors[matrices.transpose(M)`rows].*
                      ((matrices.*(matrices.transpose(M), x)),
                       (matrices.*(A, (matrices.*(matrices.transpose(M), x)))))= vectors@vectors[A`rows].*
                     ((matrices.*(matrices.transpose(M), x)),
                      (matrices.*(A, (matrices.*(matrices.transpose(M), x)))))")
                (("1" (replace -1)
                  (("1" (replace -2 -3 rl)
                    (("1" (assert)
                      (("1" (hide -2 -1)
                        (("1" (lemma mult_assoc_vect)
                          (("1" (inst -1 "M*A" "transpose(M)" "x")
                            (("1" (replace -1)
                              (("1"
                                (lemma mult_assoc_vect)
                                (("1"
                                  (inst
                                   -1
                                   "M"
                                   "A"
                                   "(transpose(M) * x)")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (expand *)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "sigma_below_sub[M`rows,(M * A * transpose(M))`rows].sigma_diff_eq")
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA (i_1: Index[M`rows]):
                        x(i_1) *
                         sigma[below(M`cols)]
                             (0, M`cols - 1,
                              LAMBDA (k_1: below(M`cols)):
                                M`matrix(i_1, k_1) *
                                 sigma[below(A`cols)]
                                     (0, A`cols - 1,
                                      LAMBDA (k_2: below(A`cols)):
                                        A`matrix(k_1, k_2) *
                                         sigma[below(transpose(M)`cols)]
                                             (0, M`rows - 1,
                                              LAMBDA (k: below(transpose(M)`cols)):
                                                transpose(M)`matrix(k_2, k) *
                                                 x(k))))"
                                                 "LAMBDA (i_1: Index[(M * A * transpose(M))`rows]):
                        x(i_1) *
                         sigma[below(M`cols)]
                             (0, M`cols - 1,
                              LAMBDA (k_1: below(M`cols)):
                                M`matrix(i_1, k_1) *
                                 sigma[below(A`cols)]
                                     (0, A`cols - 1,
                                      LAMBDA (k_2: below(A`cols)):
                                        A`matrix(k_1, k_2) *
                                         sigma[below(transpose(M)`cols)]
                                             (0, M`rows - 1,
                                              LAMBDA (k: below(transpose(M)`cols)):
                                                transpose(M)`matrix(k_2, k) *
                                                 x(k))))"
                                                 "M`rows-1"
                                                 "0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide-all-but 1)
                                                  (("4"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (hide-all-but 1)
                                                  (("5"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (hide-all-but 1)
                                                  (("6"
                                                    (grind)
                                                    (("6"
                                                      (typepred A)
                                                      (("6"
                                                        (typepred M)
                                                        (("6"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (hide-all-but 1)
                                                  (("7"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("8"
                                                  (hide-all-but 1)
                                                  (("8"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("9"
                                                  (typepred M)
                                                  (("9"
                                                    (assert)
                                                    (("1"
                                                      (typepred A)
                                                      (("1"
                                                        (expand
                                                         square?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (typepred
                                                               A)
                                                              (("1"
                                                                (typepred
                                                                 M)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             M)
                                                            (("2"
                                                              (typepred
                                                               A)
                                                              (("2"
                                                                (expand
                                                                 square?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("1"
                                                        (typepred A)
                                                        (("1"
                                                          (expand
                                                           square?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred A)
                                                        (("2"
                                                          (expand
                                                           square?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("10"
                                                  (hide-all-but 1)
                                                  (("10"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("11"
                                                  (hide-all-but 1)
                                                  (("11"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("12"
                                                  (hide-all-but 1)
                                                  (("12"
                                                    (grind)
                                                    (("12"
                                                      (typepred M)
                                                      (("12"
                                                        (typepred A)
                                                        (("12"
                                                          (expand
                                                           square?)
                                                          (("12"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("13"
                                                  (hide-all-but 1)
                                                  (("13"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("14"
                                                  (hide-all-but 1)
                                                  (("14"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("15"
                                                  (hide-all-but 1)
                                                  (("15"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("16"
                                                  (hide-all-but 1)
                                                  (("16"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("17"
                                                  (hide-all-but 1)
                                                  (("17"
                                                    (typepred A)
                                                    (("17"
                                                      (typepred M)
                                                      (("17"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("18"
                                                  (hide-all-but 1)
                                                  (("18"
                                                    (typepred A)
                                                    (("18"
                                                      (typepred M)
                                                      (("18"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("19"
                                                  (hide-all-but 1)
                                                  (("19"
                                                    (typepred A)
                                                    (("19"
                                                      (typepred M)
                                                      (("19"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("20"
                                                  (hide-all-but 1)
                                                  (("20"
                                                    (typepred A)
                                                    (("20"
                                                      (typepred M)
                                                      (("20"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("21"
                                                  (hide-all-but 1)
                                                  (("21"
                                                    (typepred A)
                                                    (("21"
                                                      (typepred M)
                                                      (("21"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("22"
                                                  (hide-all-but 1)
                                                  (("22"
                                                    (typepred A)
                                                    (("22"
                                                      (typepred M)
                                                      (("22"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (typepred A)
                                                    (("2"
                                                      (typepred M)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2 -1 -2)
                  (("2" (assert)
                    (("2" (expand *)
                      (("2" (assert)
                        (("2" (typepred A)
                          (("2" (typepred M)
                            (("2" (expand square?)
                              (("2"
                                (replace -1)
                                (("2"
                                  (lemma
                                   "sigma_below_sub[matrices.transpose(M)`rows,A`rows].sigma_diff_eq")
                                  (("2"
                                    (inst? -1)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (hide-all-but 1)
                                      (("3" (grind) nil nil))
                                      nil)
                                     ("4"
                                      (hide-all-but (1 -1 -2))
                                      (("4" (grind) nil nil))
                                      nil)
                                     ("5"
                                      (hide-all-but (1 -1 -2))
                                      (("5" (grind) nil nil))
                                      nil)
                                     ("6"
                                      (hide-all-but (1 -1 -2))
                                      (("6" (grind) nil nil))
                                      nil)
                                     ("7"
                                      (hide-all-but (1 -1 -2))
                                      (("7" (grind) nil nil))
                                      nil)
                                     ("8"
                                      (hide-all-but (1 -1 -2))
                                      (("8" (grind) nil nil))
                                      nil)
                                     ("9"
                                      (hide-all-but (1 -1 -2))
                                      (("9" (grind) nil nil))
                                      nil)
                                     ("10"
                                      (hide-all-but (1 -1 -2))
                                      (("10" (grind) nil nil))
                                      nil)
                                     ("11"
                                      (hide-all-but (1 -1 -2))
                                      (("11" (grind) nil nil))
                                      nil)
                                     ("12"
                                      (hide-all-but (1 -1 -2))
                                      (("12" (grind) nil nil))
                                      nil)
                                     ("13"
                                      (hide-all-but (1 -1 -2))
                                      (("13" (grind) nil nil))
                                      nil)
                                     ("14"
                                      (hide-all-but (1 -1 -2))
                                      (("14" (grind) nil nil))
                                      nil)
                                     ("15"
                                      (hide-all-but (1 -1 -2))
                                      (("15" (grind) nil nil))
                                      nil)
                                     ("16"
                                      (hide-all-but (1 -1 -2))
                                      (("16" (grind) nil nil))
                                      nil)
                                     ("17"
                                      (hide-all-but (1 -1 -2))
                                      (("17" (grind) nil nil))
                                      nil)
                                     ("18"
                                      (hide-all-but (1 -1 -2))
                                      (("18" (grind) nil nil))
                                      nil)
                                     ("19"
                                      (hide-all-but (1 -1 -2))
                                      (("19" (grind) nil nil))
                                      nil)
                                     ("20"
                                      (hide-all-but (1 -1 -2))
                                      (("20" (grind) nil nil))
                                      nil)
                                     ("21"
                                      (hide-all-but 1)
                                      (("21"
                                        (typepred A)
                                        (("21"
                                          (typepred M)
                                          (("21" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("22"
                                      (hide-all-but 1)
                                      (("22"
                                        (typepred A)
                                        (("22"
                                          (typepred M)
                                          (("22" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("23"
                                      (hide-all-but 1)
                                      (("23"
                                        (typepred A)
                                        (("23"
                                          (typepred M)
                                          (("23" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("24"
                                      (hide-all-but 1)
                                      (("24"
                                        (typepred A)
                                        (("24"
                                          (typepred M)
                                          (("24" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("25"
                                      (hide-all-but 1)
                                      (("25"
                                        (typepred A)
                                        (("25"
                                          (typepred M)
                                          (("25" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("26"
                                      (hide-all-but 1)
                                      (("26"
                                        (typepred A)
                                        (("26"
                                          (typepred M)
                                          (("26" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (1 -1 -2)) (("2" (grind) nil nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (1 -1 -2)) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((semidef_pos? const-decl "bool" posdef nil)
    (M skolem-const-decl "{M: Matrix | M`cols = A`rows}" posdef nil)
    (A skolem-const-decl "(square?)" posdef nil)
    (square? const-decl "bool" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (transp_col formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_assoc_vect formula-decl nil matrices nil)
    (sigma_diff_eq formula-decl nil sigma_below_sub "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (mult_dim_col formula-decl nil matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "real" vectors "vectors/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trans_mat_scal formula-decl nil matrices nil))
   shostak))
 (semidef_sum_TCC1 0
  (semidef_sum_TCC1-1 nil 3637169377 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (square? const-decl "bool" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (semidef_sum_TCC2 0
  (semidef_sum_TCC2-1 nil 3637169377 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (+ const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (semidef_sum 0
  (semidef_sum-1 nil 3637169379
   ("" (skeep)
    (("" (expand semidef_pos?)
      (("" (skeep)
        (("" (inst -1 "x")
          (("" (inst -2 "x")
            (("1" (assert)
              (("1" (lemma left_distributive_add_vect)
                (("1" (typepred A)
                  (("1" (typepred B)
                    (("1" (inst -4 "A`rows" "A`rows" "A" "B" "x")
                      (("1" (replace -4)
                        (("1" (assert)
                          (("1" (lemma "vectors[A`rows].dot_add_right")
                            (("1" (inst -1 "x" "A*x" "B*x")
                              (("1"
                                (expand * -1 1)
                                (("1"
                                  (expand * 1 1)
                                  (("1"
                                    (expand + 1 1)
                                    (("1"
                                      (lemma
                                       "sigma_below_sub[A`rows,(A+B)`rows].sigma_diff_eq")
                                      (("1"
                                        (inst
                                         -1
                                         "LAMBDA (i: Index[A`rows]): x(i) * (A * x + B * x)(i)"
                                         " LAMBDA (i: Index[(A + B)`rows]): x(i) * (A * x + B * x)(i)"
                                         "A`rows-1"
                                         "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but
                                                   (-7 -8 1))
                                                  (("1"
                                                    (expand *)
                                                    (("1"
                                                      (typepred B)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (typepred
                                                             A)
                                                            (("1"
                                                              (expand
                                                               square?)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   *
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     *
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "sigma[below(A`rows)].sigma_eq")
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_below_sub[B`rows,A`rows].sigma_diff_eq")
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             " LAMBDA (i_1: Index[B`rows]):
                                x(i_1) *
                                 sigma[below(B`cols)]
                                     (0, A`cols - 1,
                                      LAMBDA (k: below(B`cols)): B`matrix(i_1, k) * x(k))"
                                                                             "LAMBDA (i_1: Index[A`rows]):
                                x(i_1) *
                                 sigma[below(B`cols)]
                                     (0, A`cols - 1,
                                      LAMBDA (k: below(B`cols)): B`matrix(i_1, k) * x(k))"
                                                                             "A`cols -1"
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("4"
                                                                              (assert)
                                                                              (("4"
                                                                                (typepred
                                                                                 B)
                                                                                (("4"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("4"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("4"
                                                                                      (typepred
                                                                                       A)
                                                                                      (("4"
                                                                                        (typepred
                                                                                         B)
                                                                                        (("4"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("5"
                                                                                (typepred
                                                                                 A)
                                                                                (("5"
                                                                                  (typepred
                                                                                   B)
                                                                                  (("5"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           A)
                                                                          (("2"
                                                                            (typepred
                                                                             B)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (typepred A)
                                            (("2"
                                              (typepred B)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (typepred A)
                          (("2" (typepred B) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (typepred A)
                (("2" (typepred B) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semidef_pos? const-decl "bool" posdef nil)
    (add_dim_row formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "Matrix" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (sigma_diff_eq formula-decl nil sigma_below_sub "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "real" vectors "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "real" vectors "vectors/")
    (dot_add_right formula-decl nil vectors "vectors/")
    (left_distributive_add_vect formula-decl nil matrices nil)
    (B skolem-const-decl
     "(LAMBDA (N): A`rows = N`rows AND A`cols = N`cols)" posdef nil)
    (A skolem-const-decl "(square?)" posdef nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (semidef_scal_TCC1 0
  (semidef_scal_TCC1-1 nil 3637169471 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil))
   nil))
 (semidef_scal 0
  (semidef_scal-1 nil 3637169472
   ("" (skeep)
    (("" (typepred A)
      (("" (expand semidef_pos?)
        (("" (skeep)
          (("" (inst -2 "sqrt(a)*x")
            (("" (assert)
              (("" (expand *)
                (("" (assert)
                  (("" (lemma "sigma[below(A`rows)].sigma_scal")
                    (("1"
                      (inst -1 "LAMBDA (i: Index[A`rows]):
                 x(i) *
                  sigma[below(A`cols)]
                      (0, A`cols - 1,
                       LAMBDA (k: below(A`cols)):
                         A`matrix(i, k) * (sqrt(a) * x(k)))" "sqrt(a)"
                       "A`rows-1" "0")
                      (("1" (replace -1 -3 rl)
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1"
                              (lemma
                               "sigma_below_sub[A`rows,(a*A)`rows].sigma_diff_eq")
                              (("1"
                                (inst
                                 -1
                                 "LAMBDA (i_1: below(A`rows)):
                  sqrt(a) *
                   (x(i_1) *
                     sigma[below(A`cols)]
                         (0, A`cols - 1,
                          LAMBDA (k: below(A`cols)):
                            A`matrix(i_1, k) * (sqrt(a) * x(k))))"
                                 "LAMBDA (i_1: Index[(a * A)`rows]):
                  x(i_1) *
                   sigma[below(A`cols)]
                       (0, A`cols - 1,
                        LAMBDA (k: below(A`cols)):
                          x(k) * A`matrix(i_1, k) * a)"
                                 "A`rows-1"
                                 "0")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (lemma
                                         "sigma[below(A`cols)].sigma_scal")
                                        (("1"
                                          (inst
                                           -1
                                           "LAMBDA (k: below(A`cols)):
                      A`matrix(i, k) * (sqrt(a) * x(k))"
                                           "sqrt(a)"
                                           "A`cols-1"
                                           "0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (typepred A)
                                                (("2"
                                                  (typepred k)
                                                  (("2"
                                                    (expand square?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (expand square?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (skeep)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (typepred k)
                                      (("3"
                                        (expand square?)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (typepred k)
                                              (("3"
                                                (hide-all-but 1)
                                                (("3"
                                                  (typepred A)
                                                  (("3"
                                                    (grind)
                                                    (("3"
                                                      (hide-all-but 1)
                                                      (("3"
                                                        (typepred A)
                                                        (("3"
                                                          (grind)
                                                          (("3"
                                                            (hide-all-but
                                                             1)
                                                            (("3"
                                                              (typepred
                                                               A)
                                                              (("3"
                                                                (grind)
                                                                (("3"
                                                                  (typepred
                                                                   i_1)
                                                                  (("3"
                                                                    (expand
                                                                     *
                                                                     -1)
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (hide-all-but 1)
                                  (("4"
                                    (typepred A)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (hide-all-but 1)
                                  (("5"
                                    (typepred A)
                                    (("5" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("6"
                                  (hide-all-but 1)
                                  (("6"
                                    (typepred A)
                                    (("6" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("7"
                                  (hide-all-but 1)
                                  (("7"
                                    (typepred A)
                                    (("7" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("8"
                                  (hide-all-but 1)
                                  (("8"
                                    (typepred A)
                                    (("8" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("9"
                                  (hide-all-but 1)
                                  (("9"
                                    (typepred A)
                                    (("9" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("10"
                                  (hide-all-but 1)
                                  (("10"
                                    (typepred A)
                                    (("10" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (typepred A) (("2" (grind) nil nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1)
                        (("3" (typepred A) (("3" (grind) nil nil))
                          nil))
                        nil)
                       ("4" (hide-all-but 1)
                        (("4" (typepred A) (("4" (grind) nil nil))
                          nil))
                        nil)
                       ("5" (hide-all-but 1)
                        (("5" (typepred A) (("5" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (typepred A) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semidef_pos? const-decl "bool" posdef nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dot_scal_left formula-decl nil vectors "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (A skolem-const-decl "(semidef_pos?)" posdef nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (sigma_diff_eq formula-decl nil sigma_below_sub "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (i skolem-const-decl "nat" posdef nil)
    (a skolem-const-decl "nnreal" posdef nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (sigma_scal formula-decl nil sigma "reals/")
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "Vector" vectors "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "Matrix" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_scal_dim_row formula-decl nil matrices nil))
   shostak))
 (defpos_scal_TCC1 0
  (defpos_scal_TCC1-1 nil 3638548645 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (def_pos? const-decl "bool" posdef nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil))
   nil))
 (defpos_scal 0
  (defpos_scal-1 nil 3638548646
   ("" (skeep)
    (("" (typepred A)
      (("" (expand def_pos?)
        (("" (skeep)
          (("" (hide 1)
            (("" (inst -2 "sqrt(a)*x")
              (("" (assert)
                (("" (bddsimp -2)
                  (("1" (reveal 1)
                    (("1" (expand * :actuals? t)
                      (("1" (hide 2)
                        (("1" (decompose-equality -1)
                          (("1" (apply-extensionality 1)
                            (("1" (inst -1 "x!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma right_scal_shift_vect)
                    (("2" (inst -1 A x "sqrt(a)")
                      (("1" (lemma left_scal_shift_vect)
                        (("1" (inst -1 A x "sqrt(a)")
                          (("1" (replace -1 -2 rl)
                            (("1"
                              (case "(matrices.*(a, A))`rows = A`rows")
                              (("1"
                                (replace -1 :actuals? t)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand square?)
                                    (("1"
                                      (replace -4 * rl :actuals? t)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (lemma
                                           "dot_scal_right[A`rows]")
                                          (("1"
                                            (inst
                                             -1
                                             "sqrt(a)"
                                             "x"
                                             "((sqrt(a) * A) * x)")
                                            (("1"
                                              (replace -1 -4 rl)
                                              (("1"
                                                (hide -1 -2 -3)
                                                (("1"
                                                  (lemma
                                                   left_scal_shift_vect)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "sqrt(a)*A"
                                                     x
                                                     "sqrt(a)")
                                                    (("1"
                                                      (case
                                                       "(matrices.*(reals@sqrt.sqrt(a), A))`rows = A`rows")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :actuals?
                                                         t)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -2
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               scal_assoc)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 -1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((def_pos? const-decl "bool" posdef nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (mult_scal_dim_row formula-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "Matrix" matrices nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "Vector" vectors "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (zero const-decl "Vector" vectors "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (comp_zero formula-decl nil vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (A skolem-const-decl "(def_pos?)" posdef nil)
    (dot_scal_right formula-decl nil vectors "vectors/")
    (scal_assoc formula-decl nil matrices nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (left_scal_shift_vect formula-decl nil matrices nil)
    (right_scal_shift_vect formula-decl nil matrices nil)
    (dot_scal_left formula-decl nil vectors "vectors/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (block_semidef_TCC1 0
  (block_semidef_TCC1-1 nil 3637236907 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil))
   nil))
 (block_semidef_TCC2 0
  (block_semidef_TCC2-1 nil 3637236907 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (Block2M const-decl "Matrix" block_matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (block_semidef_TCC3 0
  (block_semidef_TCC3-1 nil 3637236907 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (block_semidef 0
  (block_semidef-1 nil 3637236908
   ("" (skeep)
    (("" (expand semidef_pos? -1)
      ((""
        (case "M = M2Block(M`rows1,M`rows2,M`cols1,M`cols2)(Block2M1(M),Block2M2(M),Block2M3(M),Block2M4(M))")
        (("1" (replace -1 -2)
          (("1"
            (case "FORALL (x:Vector[M`rows1],y:Vector[M`rows2]): Block2V(BV2toBV1((# comp1:=M`rows1 ,comp2:=M`rows2,vector1:=x, vector2:=y #)))*(Block2M(M2Block(M`rows1, M`rows2, M`cols1, M`cols2)
                         (Block2M1(M), Block2M2(M), Block2M3(M),
                          Block2M4(M))) *Block2V(BV2toBV1((# comp1:=M`rows1 ,comp2:=M`rows2,vector1:=x, vector2:=y #))))>=0")
            (("1" (split)
              (("1" (expand semidef_pos? 1)
                (("1" (skeep)
                  (("1" (inst -1 x "zero[M`rows2]")
                    (("1" (assert)
                      (("1" (rewrite block_mult_comm)
                        (("1" (lemma block_v_mult_comm)
                          (("1"
                            (inst -1 "M`rows1" "M`rows2"
                             "BV2toBV1((# comp1 := M`rows1,
                          comp2 := M`rows2,
                          vector1 := x,
                          vector2 := zero[M`rows2] #))"
                             "BV2toBV1(M2Block(M`rows1, M`rows2, M`cols1, M`cols2)
                               (Block2M1(M), Block2M2(M), Block2M3(M),
                                Block2M4(M))
                         *
                         BV2toBV1((# comp1 := M`rows1,
                                     comp2 := M`rows2,
                                     vector1 := x,
                                     vector2 := zero[M`rows2] #)))")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand * -1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand * -1 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "block_matrices.Block2M1
                     (block_matrices.M2Block
                          (M`rows1, M`rows2, M`cols1, M`cols2)
                          (block_matrices.Block2M1(M),
                           block_matrices.Block2M2(M),
                           block_matrices.Block2M3(M),
                           block_matrices.Block2M4(M)))`rows = M`rows1")
                                              (("1"
                                                (replace
                                                 -1
                                                 :actuals?
                                                 t)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (case
                                                     "block_matrices.BV2toBV1
               ((# comp1 := M`rows1,
                   comp2 := M`rows2,
                   vector1 := x,
                   vector2 := vectors@vectors[M`rows2].zero #))`comp1 = M`rows1")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :actuals?
                                                       t)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (case
                                                           "block_matrices.Block2M1(M)`rows = M`rows1")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :actuals?
                                                             t)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (lemma
                                                                 matrix_prod_zero)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "Block2M3(M)")
                                                                  (("1"
                                                                    (case
                                                                     "Block2M3(M)`cols = M`rows2 AND Block2M3(M)`rows = M`rows1")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :actuals?
                                                                         t)
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           :actuals?
                                                                           t)
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "add_zero_right[M`rows1]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "Block2M1(M)*x")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       M)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         M)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               M)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (typepred M)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but 1)
                                                      (("3"
                                                        (typepred M)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred M)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred M)
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (typepred M)
                                (("3" (grind) nil nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4"
                                (typepred M)
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (typepred M) (("2" (grind) nil nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (typepred M) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (typepred M) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand semidef_pos? 1)
                (("2" (skeep)
                  (("2" (inst -1 "zero[M`rows1]" x)
                    (("1" (rewrite block_mult_comm)
                      (("1" (lemma block_v_mult_comm)
                        (("1"
                          (inst -1 "M`rows1" "M`rows2"
                           "BV2toBV1((# comp1 := M`rows1,
                          comp2 := M`rows2,
                          vector1 := zero[M`rows1],
                          vector2 := x #))"
                           "BV2toBV1(M2Block(M`rows1, M`rows2, M`cols1, M`cols2)
                               (Block2M1(M), Block2M2(M), Block2M3(M),
                                Block2M4(M))
                         *
                         BV2toBV1((# comp1 := M`rows1,
                                     comp2 := M`rows2,
                                     vector1 := zero[M`rows1],
                                     vector2 := x #)))")
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1"
                                (expand * -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma matrix_prod_zero)
                                      (("1"
                                        (inst -1 "Block2M2(M)")
                                        (("1"
                                          (case
                                           "Block2M2(M)`cols = M`rows1 AND Block2M2(M)`rows = M`rows2")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -1 :actuals? t)
                                              (("1"
                                                (replace
                                                 -2
                                                 :actuals?
                                                 t)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "block_matrices.BV2toBV1
               ((# comp1 := M`rows1,
                   comp2 := M`rows2,
                   vector1 := vectors@vectors[M`rows1].zero,
                   vector2 := x #))`comp2 = block_matrices.Block2M4(M)`rows")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :actuals?
                                                         t)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (typepred M)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         1)
                                                        (("3"
                                                          (typepred M)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (typepred M)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (typepred M) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (typepred M) (("3" (grind) nil nil))
                              nil))
                            nil)
                           ("4" (hide-all-but 1)
                            (("4" (typepred M) (("4" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (typepred M) (("2" (grind) nil nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1)
                        (("3" (typepred M) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (typepred M) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (inst? -2)
                (("1" (assert)
                  (("1"
                    (case "block_matrices.BV2toBV1
               ((# comp1 := M`rows1,
                   comp2 := M`rows2,
                   vector1 := x,
                   vector2 := y #))`comp1
            +
            block_matrices.BV2toBV1
                ((# comp1 := M`rows1,
                    comp2 := M`rows2,
                    vector1 := x,
                    vector2 := y #))`comp2 = Block2M(M)`rows")
                    (("1" (replace -1 :actuals? t)
                      (("1" (propax) nil nil)) nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2 3) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
             ("4" (hide-all-but 1)
              (("4" (typepred M) (("4" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (hide 2 -1)
          (("2" (grind)
            (("2" (apply-extensionality)
              (("2" (apply-extensionality 1) nil nil)) nil))
            nil))
          nil)
         ("3" (hide 2 -1)
          (("3" (typepred M) (("3" (grind) nil nil)) nil)) nil)
         ("4" (hide 2 -1)
          (("4" (typepred M) (("4" (grind) nil nil)) nil)) nil)
         ("5" (hide 2 -1)
          (("5" (typepred M) (("5" (grind) nil nil)) nil)) nil)
         ("6" (hide 2 -1)
          (("6" (typepred M) (("6" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((semidef_pos? const-decl "bool" posdef nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (y skolem-const-decl "Vector[M`rows2]" posdef nil)
    (x skolem-const-decl "Vector[M`rows1]" posdef nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (block_v_mult_comm formula-decl nil block_matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "real" vectors "vectors/")
    (Block2V2 const-decl "Vector[V`comp2]" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (Block2V1 const-decl "Vector[V`comp1]" block_matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (access_v_1 formula-decl nil block_matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (access_v_2 formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot_zero_left formula-decl nil vectors "vectors/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (square? const-decl "bool" matrices nil)
    (add_zero_right formula-decl nil vectors "vectors/")
    (matrix_prod_zero formula-decl nil matrix_lemmas nil)
    (* const-decl "real" block_matrices nil)
    (* const-decl "Block_Vector2" block_matrices nil)
    (x skolem-const-decl "Vector[Block2M1(M)`rows]" posdef nil)
    (block_mult_comm formula-decl nil block_matrices nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (zero const-decl "Vector" vectors "vectors/")
    (M skolem-const-decl "(Bdiag_square?)" posdef nil)
    (x skolem-const-decl "Vector[Block2M4(M)`rows]" posdef nil)
    (add_zero_left formula-decl nil vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Block_Vector2 type-eq-decl nil block_matrices nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (* const-decl "real" vectors "vectors/")
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil))
   shostak))
 (diag_block_semidef_TCC1 0
  (diag_block_semidef_TCC1-1 nil 3637418578 ("" (subtype-tcc) nil nil)
   ((square? const-decl "bool" matrices nil)) nil))
 (diag_block_semidef_TCC2 0
  (diag_block_semidef_TCC2-1 nil 3637418578 ("" (subtype-tcc) nil nil)
   ((square? const-decl "bool" matrices nil)) nil))
 (diag_block_semidef_TCC3 0
  (diag_block_semidef_TCC3-1 nil 3637418578 ("" (subtype-tcc) nil nil)
   ((Zero_mat const-decl "Zero" matrices nil)) nil))
 (diag_block_semidef_TCC4 0
  (diag_block_semidef_TCC4-1 nil 3637418578 ("" (subtype-tcc) nil nil)
   ((Zero_mat const-decl "Zero" matrices nil)) nil))
 (diag_block_semidef_TCC5 0
  (diag_block_semidef_TCC5-1 nil 3637418578 ("" (subtype-tcc) nil nil)
   ((sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (diag_block_semidef 0
  (diag_block_semidef-1 nil 3637418579
   ("" (skeep)
    (("" (expand semidef_pos?)
      (("" (skeep)
        (("" (lemma sym_block_quad_expr)
          (("" (lemma split_vect)
            (("" (inst -1 "n+m" x m)
              (("1" (skeep)
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1"
                      (inst -1 m n A "Zero_mat(n,m)" B x_1 y
                       "Block2M(M2Block(m, n, m, n)(A, Zero_mat(n, m), Zero_mat(m, n), B))"
                       "Block2V(BV2toBV1((# comp1 := m,
                          comp2 := n + m - m,
                          vector1 := x_1,
                          vector2 := y #)))")
                      (("1" (assert)
                        (("1" (bddsimp -1)
                          (("1"
                            (case "block_matrices.Block2M
               (block_matrices.M2Block
                    (m, n, m, n)
                    (A, matrices.Zero_mat(n, m), matrices.Zero_mat(m, n),
                     B))`rows = m+n")
                            (("1" (replace -1 :actuals? t)
                              (("1"
                                (replace -2)
                                (("1"
                                  (rewrite zero_vect_mult)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -3 x_1)
                                      (("1"
                                        (inst -4 y)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred A)
                                            (("1"
                                              (typepred B)
                                              (("1"
                                                (replace
                                                 -1
                                                 :actuals?
                                                 t)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace
                                                     -3
                                                     :actuals?
                                                     t)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semidef_pos? const-decl "bool" posdef nil)
    (sym_block_quad_expr formula-decl nil posdef nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (B skolem-const-decl "Mat(n, n)" posdef nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (Zero type-eq-decl nil matrices nil)
    (zero? const-decl "bool" matrices nil)
    (A skolem-const-decl "Mat(m, m)" posdef nil)
    (n skolem-const-decl "posnat" posdef nil)
    (m skolem-const-decl "posnat" posdef nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Block_Vector2 type-eq-decl nil block_matrices nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (x_1 skolem-const-decl "Vector[m]" posdef nil)
    (y skolem-const-decl "Vector[n]" posdef nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (zero_vect_mult formula-decl nil matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dot_zero_right formula-decl nil vectors "vectors/")
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (zero_trans formula-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (split_vect formula-decl nil block_matrices nil))
   shostak))
 (chol_step1_TCC1 0
  (chol_step1_TCC1-1 nil 3637239228 ("" (subtype-tcc) nil nil)
   ((* const-decl "Matrix" matrices nil)
    (eye_col formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil))
   nil))
 (chol_step1_TCC2 0
  (chol_step1_TCC2-1 nil 3637239228 ("" (subtype-tcc) nil nil)
   ((V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (chol_step1_TCC3 0
  (chol_step1_TCC3-1 nil 3637239228 ("" (subtype-tcc) nil nil)
   ((V2Ml const-decl "Matrix" matrices nil)) nil))
 (chol_step1_TCC4 0
  (chol_step1_TCC4-1 nil 3637239228 ("" (subtype-tcc) nil nil)
   ((I const-decl "(identity?)" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil))
   nil))
 (chol_step1 0
  (chol_step1-1 nil 3637239229
   ("" (skeep)
    (("" (lemma block_semidef)
      (("" (inst? -1)
        (("1" (assert)
          (("1" (flatten)
            (("1" (lemma sym_block_quad_expr)
              (("1" (expand semidef_pos? -5)
                (("1"
                  (inst -5
                   "Block2V(V2Block(1,n)(LAMBDA(i:below(1)): -(1/(2*(v*v)))*(v*(B*v)+v*v), v))")
                  (("1" (inst? -1 ("m" 1 "n" n))
                    (("1"
                      (inst -1 "alpha*I(1)" "transpose(V2Ml(n,v))" B
                       "LAMBDA (i: below(1)):
                           -(1 / (2 * (v * v))) * (v * (B * v) + v * v)"
                       v _ _)
                      (("1"
                        (inst -1 "Block2M(M2Block(1, n, 1, n)
                         (alpha * I(1), transpose(V2Ml(n, v)),
                          transpose(transpose(V2Ml(n, v))), B))" "
         Block2V(V2Block(1, n)
                        (LAMBDA (i: below(1)):
                           -(1 / (2 * (v * v))) * (v * (B * v) + v * v),
                         v))")
                        (("1" (assert)
                          (("1"
                            (case "block_matrices.Block2M
               (block_matrices.M2Block
                    (1, n, 1, n)
                    (matrices.*(alpha, matrices.I(1)),
                     matrices.transpose(matrices.V2Ml(n, v)),
                     matrices.V2Ml(n, v), B))`rows = 1+n")
                            (("1" (replace -1 :actuals? t)
                              (("1"
                                (rewrite transpose2)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (replace -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "(matrices.*
                  (matrices.transpose(matrices.V2Ml(n, v)),
                   LAMBDA (i: below(1)):
                     vectors@vectors[n].*(v, (matrices.*(B, v))) *
                      -(1 / (2 * (vectors@vectors[n].*(v, v))))
                      +
                      vectors@vectors[n].*(v, v) *
                       -(1 / (2 * (vectors@vectors[n].*(v, v)))))) = -((1/2)*(1+(v*(B*v))/(v*v)))*v")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (case
                                               "0*I(1) = Zero_mat(1,1)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (rewrite
                                                   zero_vect_mult)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "2 * (-(1/2 + 1/2 * ((v * (B * v)) / (v * v))) * (v * v)) = -(1+((v*(B*v))/(v*v)))*(v*v)")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "-(1 + ((v * (B * v)) / (v * v))) * (v * v) = -(v*(B*v)) - (v*v)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "-(v*v) >=0")
                                                                  (("1"
                                                                    (lemma
                                                                     "sq_dot_eq_0[n]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       v)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "dot_eq_args_ge[n]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             v)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (case
                                               "vectors@vectors[n].*(v, (matrices.*(B, v))) *
               -(1 / (2 * (vectors@vectors[n].*(v, v))))
               +
               vectors@vectors[n].*(v, v) *
                -(1 / (2 * (vectors@vectors[n].*(v, v)))) = -((1 / 2) * (1 + (v * (B * v)) / (v * v)))")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (name-replace
                                                   "k"
                                                   "-((1 / 2) * (1 + (v * (B * v)) / (v * v)))")
                                                  (("1"
                                                    (expand *)
                                                    (("1"
                                                      (expand
                                                       transpose)
                                                      (("1"
                                                        (apply-extensionality)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (expand
                                                             V2Ml)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 sigma)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide 2)
                                                          (("4"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("5"
                                                          (hide 2)
                                                          (("5"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("6"
                                                          (hide 2)
                                                          (("6"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("7"
                                                          (hide 2)
                                                          (("7"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil)
                                               ("3"
                                                (reveal 1)
                                                (("3"
                                                  (lemma
                                                   "sq_dot_eq_0[n]")
                                                  (("3"
                                                    (inst -1 v)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but 1)
                                            (("3" (grind) nil nil))
                                            nil)
                                           ("4"
                                            (assert)
                                            (("4"
                                              (lemma "sq_dot_eq_0[n]")
                                              (("4"
                                                (inst -1 v)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (hide-all-but 1)
                                            (("5" (grind) nil nil))
                                            nil)
                                           ("6"
                                            (skeep)
                                            (("6"
                                              (lemma "sq_dot_eq_0[n]")
                                              (("6"
                                                (inst -1 v)
                                                (("6"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred B)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (typepred B) (("2" (grind) nil nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (typepred B) (("3" (grind) nil nil))
                            nil))
                          nil)
                         ("4" (hide-all-but 1)
                          (("4" (typepred B) (("4" (grind) nil nil))
                            nil))
                          nil)
                         ("5" (lemma "sq_dot_eq_0[n]")
                          (("5" (inst -1 v)
                            (("5" (assert)
                              (("5"
                                (skeep)
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (hide-all-but 1)
                          (("6" (typepred B) (("6" (grind) nil nil))
                            nil))
                          nil)
                         ("7" (assert)
                          (("7" (hide-all-but 1)
                            (("7" (typepred B) (("7" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (typepred B) (("2" (grind) nil nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1)
                        (("3" (typepred B) (("3" (grind) nil nil))
                          nil))
                        nil)
                       ("4" (skeep)
                        (("4" (lemma "sq_dot_eq_0[n]")
                          (("4" (inst -1 v) (("4" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (typepred B) (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (hide-all-but 1)
                    (("3" (typepred B) (("3" (grind) nil nil)) nil))
                    nil)
                   ("4" (hide-all-but 1)
                    (("4" (typepred B) (("4" (grind) nil nil)) nil))
                    nil)
                   ("5" (skeep)
                    (("5" (lemma "sq_dot_eq_0[n]")
                      (("5" (inst -1 v) (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (typepred B) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((block_semidef formula-decl nil posdef nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (sym_block_quad_expr formula-decl nil posdef nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors "vectors/")
    (zero? const-decl "bool" matrices nil)
    (Zero type-eq-decl nil matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (zero_vect_mult formula-decl nil matrices nil)
    (dot_eq_args_ge formula-decl nil vectors "vectors/")
    (sq_dot_eq_0 formula-decl nil vectors "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (dot_zero_right formula-decl nil vectors "vectors/")
    (dot_scal_right formula-decl nil vectors "vectors/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_0_neg formula-decl nil sigma_below "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (transpose2 formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (n skolem-const-decl "posnat" posdef nil)
    (* const-decl "Matrix" matrices nil)
    (alpha skolem-const-decl "real" posdef nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (v skolem-const-decl "Vector[n]" posdef nil)
    (B skolem-const-decl "Mat(n, n)" posdef nil))
   shostak))
 (chol_step2_TCC1 0
  (chol_step2_TCC1-1 nil 3637243542 ("" (subtype-tcc) nil nil)
   ((V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (chol_step2_TCC2 0
  (chol_step2_TCC2-1 nil 3637243542 ("" (subtype-tcc) nil nil)
   ((* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (chol_step2_TCC3 0
  (chol_step2_TCC3-1 nil 3637243542 ("" (subtype-tcc) nil nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (eye_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (chol_step2_TCC4 0
  (chol_step2_TCC4-1 nil 3637243542 ("" (subtype-tcc) nil nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (chol_step2_TCC5 0
  (chol_step2_TCC5-1 nil 3637243542 ("" (subtype-tcc) nil nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (chol_step2_TCC6 0
  (chol_step2_TCC6-1 nil 3637243542 ("" (subtype-tcc) nil nil)
   ((V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   nil))
 (chol_step2_TCC7 0
  (chol_step2_TCC7-1 nil 3637243542 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (I const-decl "(identity?)" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   nil))
 (chol_step2 0
  (chol_step2-1 nil 3637243544
   ("" (skeep)
    (("" (beta)
      (("" (bddsimp)
        (("" (lemma block_semidef)
          (("" (inst? -1)
            (("1" (assert)
              (("1" (flatten)
                (("1" (lemma semidef_qua_trans)
                  (("1"
                    (inst -1 "Block2M(M2Block(1, n, 1, n)
                                          (alpha * I(1), transpose(V2Ml(n, v)),
                                           V2Ml(n, v), B))"
                     "Block2M(M2Block(1,n,1,n)(0*I(1),-(1/alpha)*transpose(V2Ml(n,v)),V2Ml(n,zero[n]),I(n)))")
                    (("1" (assert)
                      (("1" (rewrite trans_conv)
                        (("1" (rewrite conv_transp)
                          (("1" (assert)
                            (("1" (assert)
                              (("1"
                                (rewrite trans_scal)
                                (("1"
                                  (rewrite trans_scal)
                                  (("1"
                                    (rewrite transpose2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand M2Block -1 (3 4 5 6))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand V2Ml -1 (9 10))
                                            (("1"
                                              (rewrite conv_mult)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case "I(n)*B = B")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         block_semidef)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten
                                                               -1)
                                                              (("1"
                                                                (delete
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -3)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "(-(1 / alpha) * transpose(V2Ml(n, v)) * (alpha * I(1)) +
                                                         I(n) * transpose(V2Ml(n, v))) = Zero_mat(n,1)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             zero_times_left_1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               n
                                                                               _)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 " (-(1 / alpha) * V2Ml(n, v))")
                                                                                (("1"
                                                                                  (expand
                                                                                   V2Ml
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       V2Ml
                                                                                       -1
                                                                                       2)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "(-(1 / alpha) * transpose(V2Ml(n, v)) * V2Ml(n, v) + B)
                                                          * I(n) = (-(1 / alpha) * transpose(V2Ml(n, v)) * V2Ml(n, v) + B)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   plus_comm
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "B + -(1 / alpha) * transpose(V2Ml(n, v)) * V2Ml(n, v) = B - (1 / alpha) * (transpose(V2Ml(n, v)) * V2Ml(n, v))")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   right_mult_ident_1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "(-(1 / alpha) * transpose(V2Ml(n, v)) * V2Ml(n, v) + B)")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         V2Ml
                                                                                                         -1
                                                                                                         3)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (rewrite
                                                                           right_scal_shift)
                                                                          (("1"
                                                                            (lemma
                                                                             left_scal_shift)
                                                                            (("1"
                                                                              (inst?
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     right_mult_ident)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             left_mult_ident)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (lemma
                                                         left_mult_ident)
                                                        (("2"
                                                          (inst? -1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                     ("4" (hide-all-but 1) (("4" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((block_semidef formula-decl nil posdef nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (semidef_qua_trans formula-decl nil posdef nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (conv_transp formula-decl nil block_matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (ident_trans formula-decl nil matrices nil)
    (* const-decl "Matrix" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (add_dim_row formula-decl nil matrices nil)
    (zero? const-decl "bool" matrices nil)
    (Zero type-eq-decl nil matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (zero_row formula-decl nil matrices nil)
    (zero_left_ident formula-decl nil matrices nil)
    (right_mult_ident_1 formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil)
    (plus_comm formula-decl nil matrices nil)
    (- const-decl "Matrix" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (zero_times_left_1 formula-decl nil matrices nil)
    (right_scal_shift formula-decl nil matrices nil)
    (left_mult_ident formula-decl nil matrices nil)
    (right_mult_ident formula-decl nil matrices nil)
    (left_scal_shift formula-decl nil matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (transpose2 formula-decl nil matrices nil)
    (trans_scal formula-decl nil matrices nil)
    (conv_mult formula-decl nil block_matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (trans_conv formula-decl nil block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (eye_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (zero const-decl "Vector" vectors "vectors/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (n skolem-const-decl "posnat" posdef nil)
    (* const-decl "Matrix" matrices nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (alpha skolem-const-decl "nzreal" posdef nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (v skolem-const-decl "Vector[n]" posdef nil)
    (B skolem-const-decl "Mat(n, n)" posdef nil))
   shostak))
 (cholesky_semidef_TCC1 0
  (cholesky_semidef_TCC1-1 nil 3637252859 ("" (subtype-tcc) nil nil)
   ((transpose const-decl "Matrix" matrices nil)) nil))
 (cholesky_semidef 0
  (cholesky_semidef-1 nil 3637252860
   ("" (lemma block_induct_1)
    (("" (inst? -1)
      (("" (assert)
        (("" (bddsimp -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (skeep)
              (("2" (skeep)
                (("2" (lemma block_symmetric)
                  (("2" (inst? -1)
                    (("2" (assert)
                      (("2" (expand Bsymmetric? -1)
                        (("2" (expand M2Block -1 (1 2 3 4))
                          (("2" (assert)
                            (("2" (expand V2Ml -1 (1 2))
                              (("2"
                                (flatten)
                                (("2"
                                  (rewrite transpose2)
                                  (("2"
                                    (replace -3 * rl)
                                    (("2"
                                      (lemma block_semidef)
                                      (("2"
                                        (inst? -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "a=0")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma chol_step1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       n
                                                       a
                                                       b
                                                       NN)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (inst
                                                             -8
                                                             NN)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skeep
                                                                 -8)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "Block2M(M2Block(1,n,1,n)(Zero_mat(1,1),Zero_mat(n,1),Zero_mat(1,n),R))")
                                                                  (("1"
                                                                    (rewrite
                                                                     trans_conv)
                                                                    (("1"
                                                                      (rewrite
                                                                       conv_transp)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           M2Block
                                                                           1
                                                                           (3
                                                                            4
                                                                            5
                                                                            6))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (rewrite
                                                                               eq_block)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   zero_times_left_1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     1
                                                                                     "Zero_mat(n,1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     zero_times_right_1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       1
                                                                                       "transpose(R)")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         R)
                                                                                        (("2"
                                                                                          (expand
                                                                                           transpose
                                                                                           -3
                                                                                           2)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               transpose
                                                                                               -3
                                                                                               2)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   NN)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           zero_times_left_1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             n
                                                                                                             "Zero_mat(1,1)")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     zero_times_left)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -1
                                                                                       R
                                                                                       "Zero_mat(1,n)")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (lemma
                                                                                           zero_times_right_1)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -1
                                                                                             "n"
                                                                                             "Zero_mat(1,1)")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (hide
                                                                                                   -1
                                                                                                   -2)
                                                                                                  (("3"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide
                                                                                 2)
                                                                                (("4"
                                                                                  (lemma
                                                                                   zero_times_left)
                                                                                  (("4"
                                                                                    (inst
                                                                                     -1
                                                                                     "Zero_mat(1,n)"
                                                                                     "Zero_mat(n,1)")
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -5)
                                                (("2"
                                                  (inst
                                                   -5
                                                   "NN-(1/a)*(transpose(V2Ml(n,b))*V2Ml(n,b))")
                                                  (("1"
                                                    (bddsimp -5)
                                                    (("1"
                                                      (skeep -1)
                                                      (("1"
                                                        (inst
                                                         2
                                                         "Block2M(M2Block(1,n,1,n)(sqrt(a)*I(1),Zero_mat(n,1),
 (1/sqrt(a))*V2Ml(n,b),R))")
                                                        (("1"
                                                          (rewrite
                                                           trans_conv)
                                                          (("1"
                                                            (rewrite
                                                             conv_transp)
                                                            (("1"
                                                              (expand
                                                               M2Block
                                                               2
                                                               (3
                                                                4
                                                                5
                                                                6))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   V2Ml
                                                                   2
                                                                   3)
                                                                  (("1"
                                                                    (rewrite
                                                                     trans_scal)
                                                                    (("1"
                                                                      (rewrite
                                                                       trans_scal)
                                                                      (("1"
                                                                        (rewrite
                                                                         conv_mult)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             eq_block)
                                                                            (("1"
                                                                              (hide
                                                                               3)
                                                                              (("1"
                                                                                (lemma
                                                                                 zero_times_right_1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   1
                                                                                   "Zero_mat(1,n)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               3)
                                                                              (("2"
                                                                                (lemma
                                                                                 zero_times_right_1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   1
                                                                                   "transpose(R)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       R)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           -
                                                                                           -1)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             NN)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -5)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       -
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -4)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               right_scal_shift)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 left_scal_shift)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   V2Ml
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 V2Ml
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("3"
                                                                                (lemma
                                                                                 zero_times_left_1)
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   1
                                                                                   R)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     R)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       NN)
                                                                                      (("3"
                                                                                        (expand
                                                                                         -
                                                                                         -3)
                                                                                        (("3"
                                                                                          (expand
                                                                                           -
                                                                                           -4)
                                                                                          (("3"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("3"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("3"
                                                                                                (replace
                                                                                                 -3)
                                                                                                (("3"
                                                                                                  (replace
                                                                                                   -4)
                                                                                                  (("3"
                                                                                                    (replace
                                                                                                     -5)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (rewrite
                                                                                                         left_scal_shift)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           right_scal_shift)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("4"
                                                                                (rewrite
                                                                                 left_scal_shift)
                                                                                (("4"
                                                                                  (rewrite
                                                                                   right_scal_shift)
                                                                                  (("4"
                                                                                    (rewrite
                                                                                     scal_assoc)
                                                                                    (("4"
                                                                                      (case
                                                                                       "(1 / sqrt(a)) * (1 / sqrt(a)) = 1/a")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           1
                                                                                           rl)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             plus_comm)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               minuses)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 NN
                                                                                                 "(1 / a) * (transpose(V2Ml(n, b)) * V2Ml(n, b))")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     plus_assoc)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       NN
                                                                                                       "(-((1 / a) * (transpose(V2Ml(n, b)) * V2Ml(n, b))))"
                                                                                                       "1 / a * (transpose(V2Ml(n, b)) * V2Ml(n, b))")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1
                                                                                                             -2
                                                                                                             -3
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               zero_neg_id)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 minuses)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "1 / a * (transpose(V2Ml(n, b)) * V2Ml(n, b)) "
                                                                                                                   "1 / a * (transpose(V2Ml(n, b)) * V2Ml(n, b))")
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     plus_comm)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -2
                                                                                                                         "1 / a * (transpose(V2Ml(n, b)) * V2Ml(n, b))")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               zero_right_ident)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (typepred
                                                             R)
                                                            (("3"
                                                              (typepred
                                                               NN)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide-all-but
                                                           1)
                                                          (("4"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("5"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("6"
                                                          (assert)
                                                          (("6"
                                                            (expand
                                                             semidef_pos?
                                                             -2)
                                                            (("6"
                                                              (inst
                                                               -2
                                                               "const_vec[1](1)")
                                                              (("6"
                                                                (hide-all-but
                                                                 (-2
                                                                  1
                                                                  2))
                                                                (("6"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         chol_step2)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           n
                                                           a
                                                           b
                                                           NN)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (-4 1))
                                                      (("3"
                                                        (lemma
                                                         symmetric_prod_2)
                                                        (("3"
                                                          (inst? -1)
                                                          (("3"
                                                            (lemma
                                                             minuses)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "NN"
                                                               "(1 / a) * (transpose(V2Ml(n, b)) * V2Ml(n, b))")
                                                              (("3"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 rl)
                                                                (("3"
                                                                  (rewrite
                                                                   symmetric_sum)
                                                                  (("3"
                                                                    (rewrite
                                                                     minus_scal)
                                                                    (("3"
                                                                      (rewrite
                                                                       scal_assoc)
                                                                      (("3"
                                                                        (rewrite
                                                                         symmetric_scal)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (inst 1 "sqrt(MM_1`matrix(0,0))*I(1)")
              (("1" (hide-all-but 1)
                (("1" (grind)
                  (("1" (decompose-equality)
                    (("1" (decompose-equality)
                      (("1" (grind) nil nil)
                       ("2" (grind)
                        (("2" (typepred MM_1)
                          (("2" (reveal -4)
                            (("2" (expand semidef_pos?)
                              (("2"
                                (inst -1 "const_vec[1](1)")
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (reveal -3)
                      (("2" (expand semidef_pos?)
                        (("2" (inst -1 "const_vec[1](1)")
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2" (expand semidef_pos?)
                  (("2" (inst -1 "const_vec[1](1)")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transp_col formula-decl nil matrices nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (symmetric? const-decl "bool" matrices nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (block_symmetric formula-decl nil block_matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (transpose2 formula-decl nil matrices nil)
    (block_semidef formula-decl nil posdef nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (zero? const-decl "bool" matrices nil)
    (Zero type-eq-decl nil matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (R skolem-const-decl "Mat(NN`rows, NN`cols)" posdef nil)
    (c skolem-const-decl "Vector[n]" posdef nil)
    (zero_row formula-decl nil matrices nil)
    (zero_col formula-decl nil matrices nil)
    (conv_transp formula-decl nil block_matrices nil)
    (zero_trans formula-decl nil matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (zero const-decl "Vector" vectors "vectors/")
    (eq_block formula-decl nil block_matrices nil)
    (zero_times_left_1 formula-decl nil matrices nil)
    (zero_right_ident formula-decl nil matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (sigma_nat application-judgement "nat" sigma_below "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_times_right_1 formula-decl nil matrices nil)
    (zero_times_left formula-decl nil matrices nil)
    (zero_left_ident formula-decl nil matrices nil)
    (conv_mult formula-decl nil block_matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (trans_conv formula-decl nil block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (chol_step1 formula-decl nil posdef nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "Matrix" matrices nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (symmetric_sum formula-decl nil matrices nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (symmetric_scal formula-decl nil matrices nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_scal formula-decl nil matrices nil)
    (symmetric_prod_2 formula-decl nil matrices nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (chol_step2 formula-decl nil posdef nil)
    (const_vec const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minuses formula-decl nil matrices nil)
    (- const-decl "Matrix" matrices nil)
    (add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil)
    (zero_neg_id formula-decl nil matrices nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (plus_assoc formula-decl nil matrices nil)
    (plus_comm formula-decl nil matrices nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scal_assoc formula-decl nil matrices nil)
    (right_scal_shift formula-decl nil matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (left_scal_shift formula-decl nil matrices nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sigma_nnreal application-judgement "nnreal" sigma_below "reals/")
    (ident_trans formula-decl nil matrices nil)
    (trans_scal formula-decl nil matrices nil)
    (R skolem-const-decl
     "Mat((NN - (1 / a) * (transpose(V2Ml(n, b)) * V2Ml(n, b)))`rows,
    (NN - (1 / a) * (transpose(V2Ml(n, b)) * V2Ml(n, b)))`cols)" posdef
     nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NN skolem-const-decl "Mat(n, n)" posdef nil)
    (b skolem-const-decl "Vector[n]" posdef nil)
    (a skolem-const-decl "real" posdef nil)
    (n skolem-const-decl "posnat" posdef nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (transp_row formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (Bsymmetric? const-decl "bool" block_matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MM_1 skolem-const-decl "Mat(1, 1)" posdef nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (block_induct_1 formula-decl nil block_matrices nil))
   shostak))
 (cholesky_rev_TCC1 0
  (cholesky_rev_TCC1-1 nil 3637404871 ("" (subtype-tcc) nil nil)
   ((transpose const-decl "Matrix" matrices nil)) nil))
 (cholesky_rev 0
  (cholesky_rev-1 nil 3637404872
   ("" (skeep)
    (("" (skeep)
      (("" (replace -1)
        (("" (rewrite symmetric_prod_2)
          (("" (lemma semidef_qua_trans)
            (("" (inst -1 "I(MM`rows)" "transpose(R)")
              (("1" (assert)
                (("1" (rewrite transpose2)
                  (("1" (lemma right_mult_ident)
                    (("1" (inst -1 "transpose(R)" "I(MM`rows)")
                      (("1" (replace -1)
                        (("1" (bddsimp -2)
                          (("1" (propax) nil nil)
                           ("2" (rewrite def_pos_semidef_pos)
                            (("2" (rewrite def_pos_id) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (hide 2 -1) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric_prod_2 formula-decl nil matrices nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (square? const-decl "bool" matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (MM skolem-const-decl "(square?)" posdef nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (eye_row formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (transpose2 formula-decl nil matrices nil)
    (def_pos_id formula-decl nil posdef nil)
    (def_pos_semidef_pos formula-decl nil posdef nil)
    (right_mult_ident formula-decl nil matrices nil)
    (semidef_qua_trans formula-decl nil posdef nil))
   shostak))
 (semidefpos_inv_defpos 0
  (semidefpos_inv_defpos-1 nil 3637316238
   ("" (skeep)
    (("" (typepred A)
      (("" (lemma cholesky_semidef)
        (("" (inst -1 A)
          (("" (assert)
            (("" (skeep)
              (("" (expand def_pos?)
                (("" (expand semidef_pos?)
                  (("" (skeep)
                    (("" (inst -5 x)
                      (("" (case "x*(A*x) = 0")
                        (("1" (replace -2 -1)
                          (("1" (lemma mult_assoc_vect)
                            (("1" (inst -1 "transpose(R)" R x)
                              (("1"
                                (replace -1)
                                (("1"
                                  (lemma trans_mat_scal)
                                  (("1"
                                    (inst -1 "transpose(R)" x "R*x")
                                    (("1"
                                      (case
                                       "matrices.transpose(R)`rows = A`rows")
                                      (("1"
                                        (replace -1 :actuals? t)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (case
                                             "matrices.transpose(matrices.transpose(R))`rows = A`rows")
                                            (("1"
                                              (replace -1 :actuals? t)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (rewrite transpose2)
                                                  (("1"
                                                    (lemma
                                                     "sq_dot_eq_0[A`rows]")
                                                    (("1"
                                                      (inst -1 "R*x")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "A*x = zero[A`rows]")
                                                          (("1"
                                                            (lemma
                                                             inv_prodvect)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               A
                                                               x)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -6
                                                             1)
                                                            (("2"
                                                              (replace
                                                               -4
                                                               1)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   matrix_prod_zero)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "transpose(R)")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "transpose(R)`cols = A`rows")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :actuals?
                                                                           t)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "transpose(R)`rows = A`rows")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :actuals?
                                                                                 t)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   R)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       square?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-6 -1 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-5 1))
                                              (("2"
                                                (typepred R)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-5 1))
                                        (("2"
                                          (typepred R)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-4 1))
                                      (("2"
                                        (typepred R)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (typepred R)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((invertible? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (A skolem-const-decl "(invertible?)" posdef nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (R skolem-const-decl "Mat(A`rows, A`cols)" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (trans_mat_scal formula-decl nil matrices nil)
    (transpose2 formula-decl nil matrices nil)
    (zero const-decl "Vector" vectors "vectors/")
    (inv_prodvect formula-decl nil matrix_lemmas nil)
    (matrix_prod_zero formula-decl nil matrix_lemmas nil)
    (dot_zero_right formula-decl nil vectors "vectors/")
    (transp_col formula-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_dot_eq_0 formula-decl nil vectors "vectors/")
    (transp_row formula-decl nil matrices nil)
    (mult_assoc_vect formula-decl nil matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (def_pos? const-decl "bool" posdef nil)
    (cholesky_semidef formula-decl nil posdef nil))
   shostak))
 (def_pos_sym 0
  (def_pos_sym-1 nil 3639845168
   ("" (skeep)
    (("" (bddsimp)
      (("1" (expand "symmetric_part")
        (("1" (rewrite defpos_scal)
          (("1" (hide 2)
            (("1" (split)
              (("1" (hide -1)
                (("1" (grind)
                  (("1" (typepred A) (("1" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand "def_pos?")
                (("2" (skeep)
                  (("2" (inst -1 x)
                    (("2" (bddsimp -1)
                      (("1" (case "(A + transpose(A))`rows = A`rows")
                        (("1" (replace -1 :actuals? t)
                          (("1" (propax) nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (lemma quad_sum)
                        (("2" (hide 1)
                          (("2" (inst -1 A "transpose(A)" x)
                            (("2"
                              (case "((matrices.+)(A, matrices.transpose(A)))`rows = A`cols")
                              (("1"
                                (replace -1 :actuals? t)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (case
                                     "x * (A * x) = x *(transpose(A)*x)")
                                    (("1"
                                      (replace -2 :actuals? t)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma pos_times_gt)
                                              (("1"
                                                (inst -1 2 "x*(A*x)")
                                                (("1"
                                                  (case
                                                   "((matrices.+)(A, matrices.transpose(A)))`rows = A`cols")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :actuals?
                                                     t)
                                                    (("1"
                                                      (bddsimp -2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        (("3"
                                                          (replace
                                                           -1
                                                           :actuals?
                                                           t)
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("5"
                                                        (assert)
                                                        (("5"
                                                          (replace
                                                           -1
                                                           :actuals?
                                                           t)
                                                          (("5"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma trans_mat_scal)
                                        (("2"
                                          (inst -1 A x x)
                                          (("2"
                                            (replace -2 :actuals? t)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace
                                                 -2
                                                 :actuals?
                                                 t)
                                                (("2"
                                                  (case
                                                   "matrices.transpose(A)`rows = A`cols")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :actuals?
                                                     t)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (rewrite
                                                           "dot_comm[A`cols]")
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -1)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred A)
                                    (("2"
                                      (expand square?)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "symmetric_part")
        (("2" (expand "def_pos?")
          (("2" (skeep)
            (("2" (inst -1 x)
              (("1" (bddsimp -1)
                (("1" (typepred A)
                  (("1" (expand square?)
                    (("1"
                      (case "(1/2 * (A + transpose(A)))`rows = A`rows")
                      (("1" (replace -1 :actuals? t)
                        (("1" (propax) nil nil)) nil)
                       ("2" (assert) nil nil) ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (case "x * (1/2 * (A + transpose(A)) * x) = x*(A*x)")
                  (("1" (typepred A)
                    (("1" (expand square?)
                      (("1"
                        (case "(matrices.*
                (1/2, ((matrices.+)(A, matrices.transpose(A)))))`rows = A`rows")
                        (("1" (replace -1 :actuals? t)
                          (("1" (replace -3) (("1" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (hide 2)
                      (("2" (hide 2)
                        (("2" (lemma scal_dist)
                          (("2"
                            (inst -1 "A`cols" "A`cols" A "transpose(A)"
                             "1/2")
                            (("1" (replace -1 1 rl)
                              (("1"
                                (lemma quad_sum)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (inst -1 x)
                                      (("1"
                                        (typepred A)
                                        (("1"
                                          (expand square?)
                                          (("1"
                                            (case
                                             "(matrices.*(1 / 2, A))`cols=A`rows")
                                            (("1"
                                              (replace -1 :actuals? t)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (lemma quad_scal)
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (inst -1 x)
                                                      (("1"
                                                        (hide -2 -4)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           :actuals?
                                                           t)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (lemma
                                                               quad_scal)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "transpose(A)"
                                                                 "1/2"
                                                                 x)
                                                                (("1"
                                                                  (case
                                                                   "transpose(A)`cols = A`cols")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :actuals?
                                                                     t)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (case
                                                                         "(x * (transpose(A) * x)) = x*(A*x)")
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           :actuals?
                                                                           t)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           trans_mat_scal)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "transpose(A)"
                                                                             x
                                                                             x)
                                                                            (("1"
                                                                              (rewrite
                                                                               transpose2)
                                                                              (("1"
                                                                                (case
                                                                                 "matrices.transpose(A)`rows = A`cols")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :actuals?
                                                                                   t)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -6
                                                                                     :actuals?
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "matrices.transpose(matrices.transpose(A))`rows = A`cols")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               :actuals?
                                                                                               t)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "dot_comm[A`cols]")
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2
                                                                               3)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           2)
                                                                          (("3"
                                                                            (hide
                                                                             -2
                                                                             -3)
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   square?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (grind)
                                          (("1"
                                            (typepred A)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (typepred A)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (typepred A)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred A)
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (typepred A)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (typepred A) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transp_row formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (defpos_scal formula-decl nil posdef nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (def_pos? const-decl "bool" posdef nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dot_comm formula-decl nil vectors "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (trans_mat_scal formula-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (quad_sum formula-decl nil posdef nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (add_dim_row formula-decl nil matrices nil)
    (symmetric_part const-decl "(symmetric?)" matrices nil)
    (A skolem-const-decl "(square?)" posdef nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (* const-decl "Matrix" matrices nil)
    (scal_dist formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (quad_scal formula-decl nil posdef nil)
    (sigma def-decl "real" sigma "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (transpose2 formula-decl nil matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil))
   shostak))
 (schur_semidef_1_TCC1 0
  (schur_semidef_1_TCC1-1 nil 3637416314 ("" (subtype-tcc) nil nil)
   ((square? const-decl "bool" matrices nil)) nil))
 (schur_semidef_1_TCC2 0
  (schur_semidef_1_TCC2-1 nil 3637416314 ("" (subtype-tcc) nil nil)
   ((transpose const-decl "Matrix" matrices nil)) nil))
 (schur_semidef_1_TCC3 0
  (schur_semidef_1_TCC3-1 nil 3637416314 ("" (subtype-tcc) nil nil)
   ((invertible? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil))
   nil))
 (schur_semidef_1_TCC4 0
  (schur_semidef_1_TCC4-1 nil 3637416314 ("" (subtype-tcc) nil nil)
   ((transpose const-decl "Matrix" matrices nil)) nil))
 (schur_semidef_1_TCC5 0
  (schur_semidef_1_TCC5-1 nil 3637416314 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Square type-eq-decl nil matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (def_pos? const-decl "bool" posdef nil)
    (invertible? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (inverse? const-decl "bool" matrices nil)
    (inverse const-decl "{N: Square | N`rows = M`rows}" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (schur_semidef_1_TCC6 0
  (schur_semidef_1_TCC6-1 nil 3637416314 ("" (subtype-tcc) nil nil)
   ((* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (schur_semidef_1_TCC7 0
  (schur_semidef_1_TCC7-1 nil 3637416314 ("" (subtype-tcc) nil nil)
   ((sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (def_pos? const-decl "bool" posdef nil)
    (invertible? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (inverse? const-decl "bool" matrices nil)
    (inverse const-decl "{N: Square | N`rows = M`rows}" matrices nil)
    (- const-decl "Matrix" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (schur_semidef_1 0
  (schur_semidef_1-1 nil 3637416315
   ("" (skeep)
    (("" (bddsimp)
      (("1" (lemma semidef_qua_trans)
        (("1"
          (inst -1
           "Block2M(M2Block(n, m, n, m)(A, transpose(B), B, D))"
           "Block2M(M2Block(n,m,n,m)(I(n),transpose(-inverse(A)*B),Zero_mat(n,m),I(m)))")
          (("1" (assert)
            (("1" (rewrite trans_conv)
              (("1" (rewrite conv_transp)
                (("1" (expand M2Block -1 (4 5 6 7))
                  (("1" (assert)
                    (("1" (rewrite conv_mult)
                      (("1" (assert)
                        (("1" (lemma block_semidef)
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -3 -1)
                                  (("1"
                                    (rewrite transpose2)
                                    (("1"
                                      (rewrite transpose_product)
                                      (("1"
                                        (rewrite minus_scal)
                                        (("1"
                                          (rewrite trans_scal)
                                          (("1"
                                            (rewrite right_scal_shift)
                                            (("1"
                                              (expand symmetric? -3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (rewrite transp_inv)
                                                  (("1"
                                                    (replace -4 *)
                                                    (("1"
                                                      (lemma
                                                       mult_assoc)
                                                      (("1"
                                                        (rewrite
                                                         left_scal_shift)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "transpose(B)"
                                                           " inverse(A)"
                                                           "A")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -2
                                                             rl)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (rewrite
                                                                 inverse_ident)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     right_mult_ident)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "transpose(B)"
                                                                       "I(A`rows)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             left_mult_ident)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               D
                                                                               "I(m)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     left_mult_ident)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "transpose(B)"
                                                                                       "I(m)")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "transpose(B) = 1*transpose(B)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               transpose
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 transpose
                                                                                                 -2
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       scal_dist_left)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         m
                                                                                                         n
                                                                                                         "-1"
                                                                                                         1
                                                                                                         "transpose(B)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           -2
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               zero_scal)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "transpose(B)")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         B)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               zero_times_left)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "(-1) * inverse(A) * B"
                                                                                                                                 "Zero_mat(m, n)")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       right_mult_ident)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "((-1) * (transpose(B) * inverse(A)) * B + D)"
                                                                                                                                         "I(m)")
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               plus_comm)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "(-1) * (transpose(B) * inverse(A)) * B"
                                                                                                                                                 " D")
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     minuses)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       " D"
                                                                                                                                                       "transpose(B) * inverse(A) * B")
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         1
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (rewrite
                                                                                                                                                           minus_scal)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               left_scal_shift)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   left_scal_shift
                                                                                                                                                                   -5)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide-all-but
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             A)
                                                                                                                                            (("2"
                                                                                                                                              (typepred
                                                                                                                                               B)
                                                                                                                                              (("2"
                                                                                                                                                (grind
                                                                                                                                                 :exclude
                                                                                                                                                 inverse)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (typepred
                                                                                                                                     B)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       A)
                                                                                                                                      (("2"
                                                                                                                                        (grind
                                                                                                                                         :exclude
                                                                                                                                         inverse)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 B)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   A)
                                                                                                  (("2"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     inverse)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               B)
                                                              (("2"
                                                                (typepred
                                                                 A)
                                                                (("2"
                                                                  (grind
                                                                   :exclude
                                                                   inverse)
                                                                  (("2"
                                                                    (rewrite
                                                                     inverse_cols)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           inverse_cols)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite inverse_cols)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind :exclude inverse) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand - 1)
                        (("2" (rewrite inverse_rows)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (grind :exclude inverse) nil nil)) nil)
           ("3" (hide-all-but 1)
            (("3" (grind :exclude inverse) nil nil)) nil)
           ("4" (expand - 1)
            (("4" (rewrite inverse_cols) (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma block_semidef)
        (("2" (inst? -1)
          (("1" (assert)
            (("1" (flatten)
              (("1" (rewrite semidefpos_inv_defpos) nil nil)) nil))
            nil)
           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (lemma diag_block_semidef)
        (("3" (inst -1 n m A "D - transpose(B) * inverse(A) * B")
          (("1" (assert)
            (("1" (lemma def_pos_semidef_pos)
              (("1" (inst -1 A)
                (("1" (assert)
                  (("1" (lemma semidef_qua_trans)
                    (("1"
                      (inst -1 "Block2M(M2Block(n, m, n, m)
                                  (A, Zero_mat(m, n), Zero_mat(n, m),
                                   D - transpose(B) * inverse(A) * B))"
                       "Block2M(M2Block(n,m,n,m)(I(n),transpose(inverse(A)*B),Zero_mat(n,m),I(m)))")
                      (("1" (assert)
                        (("1" (rewrite trans_conv)
                          (("1" (rewrite conv_transp)
                            (("1" (expand M2Block -1 (4 5 6 7))
                              (("1"
                                (assert)
                                (("1"
                                  (typepred B)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (rewrite conv_mult)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "Block2M(M2Block(n, m, n, m)
                                  ((I(n) * A +
                                     Zero_mat(n, m) * Zero_mat(m, n))
                                    * I(n)
                                    +
                                    (I(n) * Zero_mat(n, m) +
                                      Zero_mat(n, m) *
                                       (D - transpose(B) * inverse(A) * B))
                                     * Zero_mat(m, n),
                                   (transpose(inverse(A) * B) * A +
                                     I(m) * Zero_mat(m, n))
                                    * I(n)
                                    +
                                    (transpose(inverse(A) * B) *
                                      Zero_mat(n, m)
                                      +
                                      I(m) *
                                       (D - transpose(B) * inverse(A) * B))
                                     * Zero_mat(m, n),
                                   (I(n) * A +
                                     Zero_mat(n, m) * Zero_mat(m, n))
                                    * transpose(transpose(inverse(A) * B))
                                    +
                                    (I(n) * Zero_mat(n, m) +
                                      Zero_mat(n, m) *
                                       (D - transpose(B) * inverse(A) * B))
                                     * I(m),
                                   (transpose(inverse(A) * B) * A +
                                     I(m) * Zero_mat(m, n))
                                    * transpose(transpose(inverse(A) * B))
                                    +
                                    (transpose(inverse(A) * B) *
                                      Zero_mat(n, m)
                                      +
                                      I(m) *
                                       (D - transpose(B) * inverse(A) * B))
                                     * I(m))) = Block2M(M2Block(n, m, n, m)(A, transpose(B), B, D))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (rewrite eq_block)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (lemma
                                                     "zero_times_left")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Zero_mat(m,n)"
                                                       "Zero_mat(n,m)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             zero_times_right)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "Zero_mat(n,m)"
                                                               "I(n)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   zero_times_right)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "Zero_mat(m,n)"
                                                                     "Zero_mat(n, m) * (D - transpose(B) * inverse(A) * B)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             left_mult_ident)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               A
                                                                               "I(n)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     right_mult_ident)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       A
                                                                                       "I(n)")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         B)
                                                                        (("2"
                                                                          (typepred
                                                                           A)
                                                                          (("2"
                                                                            (grind
                                                                             :exclude
                                                                             inverse)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     zero_times_right)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "Zero_mat(m,n)"
                                                       "(transpose(inverse(A) * B) * Zero_mat(n, m) +
         I(m) * (D - transpose(B) * inverse(A) * B))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           transpose_product
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             transp_inv)
                                                            (("2"
                                                              (expand
                                                               symmetric?
                                                               -6)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -7)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (lemma
                                                                       mult_assoc)
                                                                      (("2"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             inverse_ident)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 right_mult_ident)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "transpose(B)"
                                                                                   "I(A`rows)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       zero_times_right)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "Zero_mat(m,n)"
                                                                                         "I(m)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           inverse_cols)
                                                                          (("2"
                                                                            (typepred
                                                                             A)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (rewrite
                                                     transpose2)
                                                    (("3"
                                                      (lemma
                                                       zero_times_right)
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "Zero_mat(m,n)"
                                                         "Zero_mat(n,m)")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (hide -1)
                                                            (("3"
                                                              (lemma
                                                               left_mult_ident)
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 A
                                                                 "I(n)")
                                                                (("3"
                                                                  (replace
                                                                   -1)
                                                                  (("3"
                                                                    (lemma
                                                                     mult_assoc)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       A
                                                                       "inverse(A)"
                                                                       B)
                                                                      (("3"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("3"
                                                                          (rewrite
                                                                           ident_inverse)
                                                                          (("3"
                                                                            (lemma
                                                                             left_mult_ident)
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               B
                                                                               "I(A`rows)")
                                                                              (("3"
                                                                                (replace
                                                                                 -1)
                                                                                (("3"
                                                                                  (lemma
                                                                                   zero_times_right)
                                                                                  (("3"
                                                                                    (inst
                                                                                     -1
                                                                                     "Zero_mat(n,m) "
                                                                                     "I(n)")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("3"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("3"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("3"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 right_mult_ident)
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "Zero_mat(n, m) * (D - transpose(B) * inverse(A) * B)"
                                                                                                   "I(m)")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "Zero_mat(n, m) * (D - transpose(B) * inverse(A) * B) = Zero_mat(n,m)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             zero_times_left_1)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               n
                                                                                                               "(D - transpose(B) * inverse(A) * B)")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 -
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   D)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     -
                                                                                                                     -3
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       inverse)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide 2)
                                                  (("4"
                                                    (rewrite
                                                     transpose_product)
                                                    (("4"
                                                      (rewrite
                                                       transp_inv)
                                                      (("4"
                                                        (expand
                                                         symmetric?
                                                         -5)
                                                        (("4"
                                                          (flatten)
                                                          (("4"
                                                            (replace
                                                             -6)
                                                            (("4"
                                                              (rewrite
                                                               transpose_product)
                                                              (("4"
                                                                (rewrite
                                                                 transpose2)
                                                                (("4"
                                                                  (rewrite
                                                                   transp_inv)
                                                                  (("4"
                                                                    (replace
                                                                     -6)
                                                                    (("4"
                                                                      (case
                                                                       "zero?(transpose(B) * inverse(A) * Zero_mat(n, m))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "zero?(I(m) * Zero_mat(m, n))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -2)
                                                                              (("1"
                                                                                (lemma
                                                                                 mult_assoc)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "transpose(B)"
                                                                                   "inverse(A) "
                                                                                   " A")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       inverse_ident)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         right_mult_ident)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "transpose(B)"
                                                                                           "I(A`rows)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 left_mult_ident)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "(D - transpose(B) * inverse(A) * B)"
                                                                                                   "I(m)")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       right_mult_ident)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "(D - transpose(B) * inverse(A) * B)"
                                                                                                         "I(m)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   minuses)
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       1
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         plus_comm)
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 minus_scal)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   plus_assoc)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "transpose(B) * (inverse(A) * B) = 1*(transpose(B) * (inverse(A) * B))")
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         scal_dist_left)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           m
                                                                                                                                           m
                                                                                                                                           1
                                                                                                                                           "-1"
                                                                                                                                           "(transpose(B) * (inverse(A) * B))")
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             mult_assoc)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "transpose(B)"
                                                                                                                                               "inverse(A)"
                                                                                                                                               B)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 1
                                                                                                                                                 rl)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2
                                                                                                                                                   1
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     zero_scal)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (grind
                                                                                                                                           :exclude
                                                                                                                                           inverse)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind
                                                                                                             :exclude
                                                                                                             inverse)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       inverse)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind
                                                                                       :exclude
                                                                                       inverse)
                                                                                      (("2"
                                                                                        (grind
                                                                                         :exclude
                                                                                         inverse)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           A)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             inverse_cols)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               zero_times_right)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "Zero_mat(m,n)"
                                                                                 "I(m)")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         zero_times_right)
                                                                        (("2"
                                                                          (inst?
                                                                           -1)
                                                                          (("2"
                                                                            (rewrite
                                                                             inverse_cols)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (grind :exclude inverse) nil nil)) nil)
                       ("3" (hide-all-but 1)
                        (("3" (grind :exclude inverse) nil nil)) nil)
                       ("4" (rewrite inverse_cols)
                        (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (grind :exclude inverse) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((B skolem-const-decl "Mat(n, m)" posdef nil)
    (m skolem-const-decl "posnat" posdef nil)
    (A skolem-const-decl "Mat(n, n)" posdef nil)
    (Mat type-eq-decl nil matrices nil)
    (n skolem-const-decl "posnat" posdef nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inverse const-decl "{N: Square | N`rows = M`rows}" matrices nil)
    (invertible? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (- const-decl "Matrix" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "Matrix" matrices nil)
    (D skolem-const-decl "Mat(m, m)" posdef nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (Zero type-eq-decl nil matrices nil)
    (zero? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (transp_col formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (zero_col formula-decl nil matrices nil)
    (zero_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (trans_conv formula-decl nil block_matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (block_semidef formula-decl nil posdef nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (transpose_product formula-decl nil matrices nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (trans_scal formula-decl nil matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (transp_inv formula-decl nil matrix_lemmas nil)
    (mult_assoc formula-decl nil matrices nil)
    (scal_dist_left formula-decl nil matrices nil)
    (zero_scal formula-decl nil matrices nil)
    (zero_times_left formula-decl nil matrices nil)
    (zero_left_ident formula-decl nil matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (plus_comm formula-decl nil matrices nil)
    (minuses formula-decl nil matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "Matrix" matrices nil)
    (left_mult_ident formula-decl nil matrices nil)
    (right_mult_ident formula-decl nil matrices nil)
    (inverse_ident formula-decl nil matrix_lemmas nil)
    (inverse_cols formula-decl nil matrix_lemmas nil)
    (left_scal_shift formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (right_scal_shift formula-decl nil matrices nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_scal formula-decl nil matrices nil)
    (transpose2 formula-decl nil matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (inverse_rows formula-decl nil matrix_lemmas nil)
    (add_dim_col formula-decl nil matrices nil)
    (add_dim_row formula-decl nil matrices nil)
    (conv_mult formula-decl nil block_matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (zero_trans formula-decl nil matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (ident_trans formula-decl nil matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (conv_transp formula-decl nil block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semidef_qua_trans formula-decl nil posdef nil)
    (semidefpos_inv_defpos formula-decl nil posdef nil)
    (- const-decl "Matrix" matrices nil)
    (def_pos_semidef_pos formula-decl nil posdef nil)
    (plus_assoc formula-decl nil matrices nil)
    (ident_inverse formula-decl nil matrix_lemmas nil)
    (zero_times_left_1 formula-decl nil matrices nil)
    (zero_times_right formula-decl nil matrices nil)
    (zero_right_ident formula-decl nil matrices nil)
    (eq_block formula-decl nil block_matrices nil)
    (diag_block_semidef formula-decl nil posdef nil))
   shostak))
 (schur_semidef_2_TCC1 0
  (schur_semidef_2_TCC1-1 nil 3637422289 ("" (subtype-tcc) nil nil)
   ((transpose const-decl "Matrix" matrices nil)) nil))
 (schur_semidef_2_TCC2 0
  (schur_semidef_2_TCC2-1 nil 3637422289 ("" (subtype-tcc) nil nil)
   ((invertible? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil))
   nil))
 (schur_semidef_2_TCC3 0
  (schur_semidef_2_TCC3-1 nil 3637422289 ("" (subtype-tcc) nil nil) nil
   nil))
 (schur_semidef_2_TCC4 0
  (schur_semidef_2_TCC4-1 nil 3637422289 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Square type-eq-decl nil matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (def_pos? const-decl "bool" posdef nil)
    (invertible? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (inverse? const-decl "bool" matrices nil)
    (inverse const-decl "{N: Square | N`rows = M`rows}" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (schur_semidef_2_TCC5 0
  (schur_semidef_2_TCC5-1 nil 3637422289 ("" (subtype-tcc) nil nil)
   ((* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (schur_semidef_2_TCC6 0
  (schur_semidef_2_TCC6-1 nil 3637422289 ("" (subtype-tcc) nil nil)
   ((sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (def_pos? const-decl "bool" posdef nil)
    (invertible? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (inverse? const-decl "bool" matrices nil)
    (inverse const-decl "{N: Square | N`rows = M`rows}" matrices nil)
    (- const-decl "Matrix" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (schur_semidef_2 0
  (schur_semidef_2-1 nil 3637422290
   ("" (skeep)
    (("" (lemma schur_semidef_1)
      (("" (inst -1 m n D "transpose(B)" A)
        (("" (assert)
          (("" (rewrite transpose2)
            (("" (bddsimp)
              (("1" (lemma semidef_qua_trans)
                (("1"
                  (inst -1
                   "Block2M(M2Block(m, n, m, n)(D, B, transpose(B), A))"
                   "Block2M(M2Block(n,m,m,n)(Zero_mat(n,m),I(m),I(n),Zero_mat(m,n)))")
                  (("1" (assert)
                    (("1" (rewrite trans_conv)
                      (("1" (rewrite conv_transp)
                        (("1" (expand M2Block -1 (3 4 5 6))
                          (("1" (assert)
                            (("1"
                              (case "zero?((Zero_mat(n, m) * D + I(n) * B) *
                                    Zero_mat(m, n))")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (case
                                     "zero?(Zero_mat(n, m) * transpose(B))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "I(n)*A*I(n) = A")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (case
                                             "zero?((I(m) * D + Zero_mat(m, n) * B) *
                                    Zero_mat(m, n))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1 -2 -3)
                                                (("1"
                                                  (case
                                                   "I(m) * transpose(B) = transpose(B)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (case
                                                         "zero?(Zero_mat(m, n) * A)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "transpose(B)*I(n) = transpose(B)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "zero?(Zero_mat(n, m) * D)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "zero?(I(n) * A * Zero_mat(n, m))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "I(n) * B * I(m) = B")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3
                                                                             -4
                                                                             -5)
                                                                            (("1"
                                                                              (case
                                                                               "zero?(Zero_mat(m,n)*B)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "zero?(transpose(B)*Zero_mat(n,m))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "I(m) * D * I(m) = D")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           left_mult_ident)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             right_mult_ident)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       zero_times_right)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   zero_times_left)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           left_mult_ident)
                                                                          (("2"
                                                                            (rewrite
                                                                             right_mult_ident)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       zero_times_right)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   zero_times_left)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 right_mult_ident)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           zero_times_left)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     left_mult_ident)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               zero_times_right)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite left_mult_ident)
                                          (("2"
                                            (rewrite right_mult_ident)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite zero_times_left)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite zero_times_right)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (lemma semidef_qua_trans)
                (("2"
                  (inst -1
                   "Block2M(M2Block(n, m, n, m)(A, transpose(B), B, D))"
                   "Block2M(M2Block(m,n,n,m)(Zero_mat(m,n),I(n),I(m),Zero_mat(n,m)))")
                  (("1" (assert)
                    (("1" (rewrite trans_conv)
                      (("1" (rewrite conv_transp)
                        (("1" (expand M2Block -1 (3 4 5 6))
                          (("1" (assert)
                            (("1" (case "zero?(Zero_mat(m, n) * A)")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "zero?(I(m) * transpose(B) * Zero_mat(n, m))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "zero?(Zero_mat(m,n)*B)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1 -2 -3)
                                          (("1"
                                            (case "I(m)*D*I(m) = D")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (case
                                                 "zero?((I(n) * A +
                                     Zero_mat(n, m) * transpose(B))
                                    * Zero_mat(n, m))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "zero?(Zero_mat(n,m)*D)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "I(n) * B * I(m) = B")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (case
                                                             "I(m) * transpose(B) * I(n) = transpose(B)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "zero?(I(m) * D * Zero_mat(m, n))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "zero?(I(n) * B * Zero_mat(m, n))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -3
                                                                           -4
                                                                           -5
                                                                           -6)
                                                                          (("1"
                                                                            (case
                                                                             "zero?( Zero_mat(n, m) * transpose(B))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "I(n)*A*I(n) = A")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   left_mult_ident)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     right_mult_ident)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               zero_times_left)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       zero_times_right)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   zero_times_right)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               left_mult_ident)
                                                              (("2"
                                                                (rewrite
                                                                 right_mult_ident)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           left_mult_ident)
                                                          (("2"
                                                            (rewrite
                                                             right_mult_ident)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       zero_times_left)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   zero_times_right)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite left_mult_ident)
                                              (("2"
                                                (rewrite
                                                 right_mult_ident)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite zero_times_left)
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite zero_times_right)
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("2" (rewrite zero_times_left) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (lemma block_semidef)
                (("3"
                  (inst -1
                   "M2Block(n, m, n, m)(A, transpose(B), B, D)")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (lemma semidefpos_inv_defpos)
                        (("1" (inst -1 D) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((schur_semidef_1 formula-decl nil posdef nil)
    (A skolem-const-decl "Mat(n, n)" posdef nil)
    (B skolem-const-decl "Mat(n, m)" posdef nil)
    (D skolem-const-decl "Mat(m, m)" posdef nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (Zero type-eq-decl nil matrices nil)
    (zero? const-decl "bool" matrices nil)
    (m skolem-const-decl "posnat" posdef nil)
    (n skolem-const-decl "posnat" posdef nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (eye_col formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (zero_col formula-decl nil matrices nil)
    (zero_row formula-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (trans_conv formula-decl nil block_matrices nil)
    (* const-decl "Matrix" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (zero_right_ident formula-decl nil matrices nil)
    (left_mult_ident formula-decl nil matrices nil)
    (right_mult_ident formula-decl nil matrices nil)
    (zero_times_right formula-decl nil matrices nil)
    (zero_times_left formula-decl nil matrices nil)
    (zero_left_ident formula-decl nil matrices nil)
    (add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (ident_trans formula-decl nil matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (zero_trans formula-decl nil matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (conv_transp formula-decl nil block_matrices nil)
    (conv_mult formula-decl nil block_matrices nil)
    (transp_col formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semidef_qua_trans formula-decl nil posdef nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (invertible? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (semidefpos_inv_defpos formula-decl nil posdef nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (block_semidef formula-decl nil posdef nil)
    (transpose2 formula-decl nil matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (posdef22_TCC1 0
  (posdef22_TCC1-1 nil 3637171025 ("" (cond-disjoint-tcc) nil nil) nil
   nil))
 (posdef22_TCC2 0
  (posdef22_TCC2-1 nil 3637171025 ("" (cond-coverage-tcc) nil nil) nil
   nil))
 (posdef22_TCC3 0
  (posdef22_TCC3-1 nil 3637171025 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (posdef22_TCC4 0
  (posdef22_TCC4-1 nil 3637171025 ("" (subtype-tcc) nil nil)
   ((expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (square? const-decl "bool" matrices nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (posdef22 0
  (posdef22-1 nil 3637171027
   ("" (skeep)
    (("" (expand def_pos?)
      (("" (skeep)
        (("" (expand *)
          (("" (assert)
            (("" (typepred MM)
              (("" (replace -1)
                (("" (replace -2)
                  (("" (expand sigma)
                    (("" (expand sigma)
                      (("" (assert)
                        (("" (replace -3)
                          (("" (assert)
                            (("" (lemma quadratic_gt_0)
                              ((""
                                (case "x(1)=0")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "x(0)=0")
                                        (("1"
                                          (replace -4 :actuals? t)
                                          (("1"
                                            (expand zero)
                                            (("1"
                                              (apply-extensionality)
                                              (("1"
                                                (case "x!1 = 0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (case "x!1 =1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred x!1)
                                                    (("2"
                                                      (replace -5 -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -4 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (typepred p11)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case "x(0)*x(0)>0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -3 3))
                                                    (("1"
                                                      (grind)
                                                      (("1"
                                                        (lemma
                                                         pos_times_gt)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x(0)*x(0)"
                                                           p11)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite sq_rew)
                                                    (("2"
                                                      (rewrite sq_gt_0)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst
                                   -1
                                   p11
                                   "2*x(1)*p12"
                                   "x(1)*x(1)*p22"
                                   "x(0)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand sq -1 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide 4 2)
                                          (("2"
                                            (expand discr 2)
                                            (("2"
                                              (expand sq 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "4 * (x(1) * x(1) * p12 * p12) - 4 * (x(1) * x(1) * p11 * p22) = 4* sq(x(1)) * (p12^2-p11*p22)")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (lemma
                                                           pos_times_lt)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "4*sq(x(1))"
                                                             "p12^2-p11*p22")
                                                            (("1"
                                                              (bddsimp
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (case
                                                                 "(p12 ^ 2 - p11 * p22) = 0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "4 * sq(x(1)) = 0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       sq
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "4 * sq(x(1)) * (p12 ^ 2 - p11 * p22) = 0")
                                                                    (("1"
                                                                      (lemma
                                                                       zero_times3)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "4*sq(x(1))"
                                                                         "(p12^2-p11*p22)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("6"
                                                                (assert)
                                                                (("6"
                                                                  (case
                                                                   "4 * (sq(x(1)) * p12 ^ 2) - 4 * (sq(x(1)) * p11 * p22) = 0")
                                                                  (("1"
                                                                    (lemma
                                                                     zero_times3)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "4*sq(x(1))"
                                                                       "p12^2-p11*p22")
                                                                      (("1"
                                                                        (bddsimp
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (lemma
                                                                               zero_times3)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 4
                                                                                 "sq(x(1))")
                                                                                (("1"
                                                                                  (bddsimp
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         sq)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand ^ 1)
                                                          (("2"
                                                            (expand
                                                             expt)
                                                            (("2"
                                                              (expand
                                                               expt)
                                                              (("2"
                                                                (expand
                                                                 expt)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     sq)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       pos_times_gt)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "x(1)*x(1)"
                                                         p22)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             sq_gt_0)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x(1)")
                                                              (("2"
                                                                (expand
                                                                 sq)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((def_pos? const-decl "bool" posdef nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (Mat type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (quadratic_gt_0 formula-decl nil quadratic "reals/")
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (pos_times_lt formula-decl nil real_props nil)
    (zero_times3 formula-decl nil real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (expt def-decl "real" exponentiation nil)
    (discr const-decl "real" quadratic "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_gt_0 formula-decl nil sq "reals/")
    (sq_rew formula-decl nil sq "reals/")
    (pos_times_gt formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (MM skolem-const-decl "Mat(2, 2)" posdef nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (zero const-decl "Vector" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (sigma_0_neg formula-decl nil sigma_below "reals/")
    (sigma def-decl "real" sigma "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)))

