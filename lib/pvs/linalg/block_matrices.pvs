% --------------------------------------------------------------
%  File Name: block_matrices
%  Author Names: Romain Jobredeaux & Heber Herencia-Zapana
%
% ---------------------------------------------------------------
% This theory introduces block matrices and useful results on them,
% such as rank one update inverse and proof by induction.

block_matrices: THEORY

 BEGIN

 IMPORTING matrices,reals@sigma_below_sub, reals@sigma_swap, matrix_lemmas

 m,n,p,q: VAR posnat

%------------------------------------------------------------
% Definition of Block Matrices
%------------------------------------------------------------

Block_Matrix:
TYPE = [# rows1: posnat,rows2: posnat,cols1: posnat,cols2: posnat,
	  matrix: [below(rows1 + rows2), below(cols1 + cols2) -> real] #]

Block_Mat(m,n,p,q):
TYPE = {M: Block_Matrix | M`rows1 = m AND M`rows2 = n AND
			  M`cols1 = p AND M`cols2 = q}

 M,N: VAR Block_Matrix

%------------------------------------------------------------
% Conversions
%------------------------------------------------------------

 Block2M(M):
 Matrix =
 (# rows := M`rows1 + M`rows2,
    cols := M`cols1 + M`cols2,
    matrix := LAMBDA (i: below(M`rows1 + M`rows2), j: below(M`cols1 + M`cols2)):
      M`matrix(i,j) #)

 Block2M1(M): %upper left block
Matrix =
 (# rows := M`rows1, cols := M`cols1,matrix :=
 LAMBDA (i: below(M`rows1), j: below(M`cols1)): M`matrix(i,j) #)

 Block2M2(M): %lower left block
Matrix =
 (# rows := M`rows2, cols := M`cols1,matrix :=
 LAMBDA (i: below(M`rows2), j: below(M`cols1)): M`matrix(i + M`rows1,j) #)

 Block2M3(M): %upper right block
Matrix =
 (# rows := M`rows1,
    cols := M`cols2,
    matrix := LAMBDA (i: below(M`rows1), j: below(M`cols2)):
      M`matrix(i,j + M`cols1) #)

 Block2M4(M): %lower right block
Matrix =
 (# rows := M`rows2, cols := M`cols2,matrix :=
 LAMBDA (i: below(M`rows2), j: below(M`cols2)):
		M`matrix(i + M`rows1,j + M`cols1) #)

M2Block(m,n,p,q)(A: Mat(m,p),B: Mat(n,p),C: Mat(m,q),D: Mat(n,q)):
Block_Matrix =
(# rows1 := A`rows,rows2 := B`rows,cols1 := A`cols,cols2 := C`cols,matrix :=
	    LAMBDA (i: below(A`rows + B`rows), j: below(A`cols + C`cols)):
	    IF i < A`rows THEN
		 IF j < A`cols THEN A`matrix(i,j)
		    ELSE C`matrix(i,j - A`cols)
		 ENDIF
		 ELSE IF j < A`cols THEN B`matrix (i - A`rows,j)
		    ELSE D`matrix(i - A`rows,j - A`cols)
		 ENDIF
	    ENDIF
	    #)

% (A C)
% (B D)

 conversion Block2M

access_m_1:
 LEMMA
 FORALL (A: Mat(m,p),B: Mat(n,p),C: Mat(m,q),D: Mat(n,q)):
	    Block2M1(M2Block(m,n,p,q)(A,B,C,D))=A ;
access_m_2:
 LEMMA
 FORALL (A: Mat(m,p),B: Mat(n,p),C: Mat(m,q),D: Mat(n,q)):
	    Block2M2(M2Block(m,n,p,q)(A,B,C,D))=B ;
access_m_3:
 LEMMA
 FORALL (A: Mat(m,p),B: Mat(n,p),C: Mat(m,q),D: Mat(n,q)):
	    Block2M3(M2Block(m,n,p,q)(A,B,C,D))=C ;
access_m_4:
 LEMMA
 FORALL (A: Mat(m,p),B: Mat(n,p),C: Mat(m,q),D: Mat(n,q)):
	    Block2M4(M2Block(m,n,p,q)(A,B,C,D))=D ;

%------------------------------------------------------------
% Block vectors
%------------------------------------------------------------

 Block_Vector: TYPE = [# comp1: posnat,comp2: posnat,
		       vector: [below(comp1 + comp2) -> real] #]

 Block_Vector2: TYPE = [# comp1: posnat,comp2: posnat,
			vector1: [below(comp1) -> real],
			vector2: [below(comp2) -> real] #]

 Block_Vect(m,n): TYPE = {V: Block_Vector | V`comp1 = m AND V`comp2 = n}

 V: Var Block_Vector

 BV1toBV2(V): Block_Vector2 = (# comp1 := V`comp1, comp2 := V`comp2,
 vector1 := LAMBDA (i: below(V`comp1)): V`vector(i),
 vector2 := LAMBDA (i: below(V`comp2)): V`vector(i + V`comp1)#)

 BV2toBV1(V: Block_Vector2):
 Block_Vector = (# comp1 := V`comp1, comp2 := V`comp2,
 vector := LAMBDA (i: below(V`comp1 + V`comp2)): IF i < V`comp1
			THEN V`vector1(i) ELSE V`vector2(i - V`comp1) ENDIF #)

 conversion BV1toBV2,BV2toBV1

 Block2V(V): Vector[V`comp1 + V`comp2] =
 LAMBDA (i: below[V`comp1 + V`comp2]): V`vector(i)

 Block2V1(V): Vector[V`comp1] = LAMBDA (i: below[V`comp1]): V`vector(i)

 Block2V2(V): Vector[V`comp2] =
 LAMBDA (i: below[V`comp2]): V`vector(i + V`comp1)

V2Block(m,n:posnat)(x: Vector[m],y: Vector[n]):
Block_Vector = (# comp1 := m,comp2 := n,vector :=
	    LAMBDA (i: below(m + n)):
	    IF i < m THEN x(i)
	    ELSE y(i - m) ENDIF
	    #);

V2 : Var Block_Vector2

access_v_1:
LEMMA
 Block2V1(BV2toBV1(V2)) = V2`vector1;

access_v_2:
LEMMA
 Block2V2(BV2toBV1(V2)) = V2`vector2;

access_vb_1 :
LEMMA
 FORALL (x:Vector[m], y:Vector[n]):
	Block2V1(V2Block(m,n)(x,y)) = x;
access_vb_2 :
LEMMA
 FORALL (x:Vector[m], y:Vector[n]):
	Block2V2(V2Block(m,n)(x,y)) = y;

*(V, (W: Block_Vect(V`comp1,V`comp2))):
	 real = Block2V1(V)*Block2V1(W) + Block2V2(V)*Block2V2(W)

conversion Block2V

%------------------------------------------------------------
% Operations with Block Matrices
%------------------------------------------------------------

 Btranspose(M): Block_Matrix =  (# rows1 := M`cols1,rows2 := M`cols2,
				cols1 := M`rows1,cols2 := M`rows2,
				matrix :=
 LAMBDA (i: below(M`cols1 + M`cols2), j: below(M`rows1 + M`rows2)):
			  M`matrix(j,i) #)

 conv_transp:
LEMMA
 FORALL (M: Block_Matrix):
Btranspose(M) = M2Block(M`cols1,M`cols2,M`rows1,M`rows2)(transpose(Block2M1(M)),
 transpose(Block2M3(M)),transpose(Block2M2(M)),transpose(Block2M4(M)))

 Bsquare?(M): bool = square?(M)

 Bdiag_square?(M): bool = square?(Block2M1(M)) AND square?(Block2M4(M))

 block_square:
LEMMA
 FORALL (M: Block_Matrix):
 Bdiag_square?(M) IMPLIES Bsquare?(M)

 trans_conv:
LEMMA
 FORALL (M: Block_Matrix):
 transpose(Block2M(M)) = (Block2M(Btranspose(M)));

 Bsymmetric?(M): bool = symmetric?(M)

 block_symmetric:
LEMMA
 FORALL (M: Block_Matrix):
 Bsymmetric?(M) AND M`cols1 = M`rows1 AND M`cols2 = M`rows2
 IFF
 symmetric?(Block2M1(M)) AND symmetric?(Block2M4(M)) AND
 transpose(Block2M2(M)) = Block2M3(M);

 transpose_eq:
LEMMA
 FORALL (M:Block_Matrix):
 Btranspose(M) =transpose(Block2M(M));

 *(M: Block_Matrix,V: Block_Vect(M`cols1,M`cols2)):
 Block_Vector2 = (# comp1 := M`rows1, comp2 := M`rows2,
		  vector1 := Block2M1(M)*Block2V1(V) + Block2M3(M)*Block2V2(V),
		  vector2 := Block2M2(M)*Block2V1(V) + Block2M4(M)*Block2V2(V)#)

 same_Bdim?(M)(N): bool = M`rows1 = N`rows1 AND M`rows2 = N`rows2 AND
		   M`cols1 = N`cols1 AND M`cols2 = N`cols2;

 +(M: Block_Matrix,N: (same_Bdim?(M))):
 Block_Matrix =
 (# rows1 := M`rows1,rows2 := M`rows2,
    cols1 := M`cols1 ,cols2 := M`cols2,
    matrix := LAMBDA (i: below(M`rows1 + M`rows2),j: below(M`cols1 + M`cols2)):
      M`matrix(i,j) + N`matrix(i,j) #);

 *(r: real, M: Block_Matrix):
 Block_Matrix = M WITH
 [`matrix := LAMBDA (i: below(M`rows1 + M`rows2), j: below(M`cols1 + M`cols2)):
     r * M`matrix(i, j)];

 *(M: Block_Matrix, (v: Vector[M`cols1 + M`cols2])):
 Vector[M`rows1 + M`rows2] = LAMBDA (i: below(M`rows1 + M`rows2)):
   sigma(0, M`cols1 + M`cols2 - 1,
     LAMBDA (j: below(M`cols1 + M`cols2)): M`matrix(i, j) * v(j));

 *(M:Block_Matrix,N:{N:Block_Matrix|N`rows1=M`cols1 AND N`rows2=M`cols2}):
 Block_Matrix =
 M2Block(M`rows1,M`rows2,N`cols1,N`cols2)(
   Block2M1(M)*Block2M1(N) + Block2M3(M)*Block2M2(N),
   Block2M2(M)*Block2M1(N) +Block2M4(M)*Block2M2(N),
   Block2M1(M)*Block2M3(N) + Block2M3(M)*Block2M4(N),
   Block2M2(M)*Block2M3(N) +Block2M4(M)*Block2M4(N));

conv_mult:
LEMMA
 FORALL (m,n,p,q,r,s:posnat, A:Mat(m,p), B:Mat(n,p), C:Mat(m,q),
	 D:Mat(n,q), E:Mat(p,r), F:Mat(q,r), G:Mat(p,s), H:Mat(q,s)):
	 Block2M(M2Block(m,n,p,q)(A,B,C,D))*Block2M(M2Block(p,q,r,s)(E,F,G,H)) =
	 Block2M(M2Block(m,n,r,s)(A*E+C*F, B*E+D*F, A*G+C*H,B*G+D*H));

conv_sum:
LEMMA
 FORALL (m,n,p,q:posnat, A:Mat(m,p), B:Mat(n,p), C:Mat(m,q),
	 D:Mat(n,q), E:Mat(m,p), F:Mat(n,p), G:Mat(m,q), H:Mat(n,q)):
	 Block2M(M2Block(m,n,p,q)(A,B,C,D))+Block2M(M2Block(m,n,p,q)(E,F,G,H)) =
	 Block2M(M2Block(m,n,p,q)(A+E, B+F, C+G,D+H));

conv_scal :
LEMMA
 FORALL (m,n,p,q:posnat, A:Mat(m,p), B:Mat(n,p), C:Mat(m,q),
	  D:Mat(n,q), a:real):
	  a*Block2M(M2Block(m,n,p,q)(A,B,C,D)) =
	  Block2M(M2Block(m,n,p,q)(a*A,a*B,a*C,a*D))

eq_block:
LEMMA
 FORALL (m,n,p,q:posnat, A:Mat(m,p), B:Mat(n,p), C:Mat(m,q),
	  D:Mat(n,q), E:Mat(m,p), F:Mat(n,p), G:Mat(m,q), H:Mat(n,q)):
	  A=E AND B=F AND C=G AND D=H IMPLIES
	    Block2M(M2Block(m,n,p,q)(A,B,C,D)) =
	      Block2M(M2Block(m,n,p,q)(E,F,G,H));

block_mult_comm:

LEMMA

FORALL (M:(Bdiag_square?), V:Block_Vect(M`cols1,M`cols2)):
  Block2M(M)*Block2V(V) = Block2V(M*V);

block_v_mult_comm:
LEMMA
 FORALL (V1,V2:Block_Vect(m,n)): Block2V(V1)*Block2V(V2) = V1*V2;

block_v_mult_comm2:
LEMMA
 FORALL (M:Block_Matrix, VV:Block_Vect(M`cols1,M`cols2)):
 Block2M(M)*Block2V(VV) = Block2V(M*VV)

 split_vect:
LEMMA
 FORALL (n:{n:posnat|n>=2},z:Vector[n],m:{m:posnat|m<n}):
   EXISTS (x:Vector[m],y:Vector[n-m]):
     z = Block2V(BV2toBV1((# comp1:=m ,comp2:=n-m,vector1:=x, vector2:=y #)));

id_block:
LEMMA
 FORALL (n,m:posnat):
   I(n+m) = Block2M(M2Block(n,m,n,m)(I(n),Zero_mat(m,n),Zero_mat(n,m),I(m)))

block_induct_1:
LEMMA
 FORALL (p:pred[Square]):
   (FORALL (MM:Mat(1,1)): p(MM)) AND
   (FORALL (n:posnat):
     (FORALL (MM:Mat(n,n)): p(MM))
     IMPLIES
       (FORALL (NN:Mat(n,n), a:real,b,c:Vector[n]):
	p(Block2M(M2Block(1,n,1,n)(a*I(1),transpose(V2Ml(n,b)),V2Ml(n,c),NN)))))
     IMPLIES FORALL(MM:Square): p(MM)

 AUTO_REWRITE+ access_m_1
 AUTO_REWRITE+ access_m_2
 AUTO_REWRITE+ access_m_3
 AUTO_REWRITE+ access_m_4
 AUTO_REWRITE+ access_v_1
 AUTO_REWRITE+ access_v_2
 AUTO_REWRITE+ block_mult_comm
 AUTO_REWRITE+ conv_mult
 AUTO_REWRITE+ block_v_mult_comm

 block_invertible :
LEMMA
 FORALL (NN:Mat(n,n), c:real,b:Vector[n]):
  invertible?(NN) IMPLIES
    (c- (b*(inverse(NN)*b))) /=0 IMPLIES
      invertible?(Block2M(M2Block(1,n,1,n)(
	c*I(1),transpose(V2Ml(n,b)),
	V2Ml(n,b),NN)))

END block_matrices
