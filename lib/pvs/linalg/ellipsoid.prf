(ellipsoid
 (difference_TCC1 0
  (difference_TCC1-1 nil 3538133283 ("" (tcc))
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (times_TCC1 0
  (times_TCC1-1 nil 3538133283 ("" (tcc))
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (in_ellipsoid_P?_TCC1 0
  (in_ellipsoid_P?_TCC1-1 nil 3636905292 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero const-decl "Vector" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (def_pos? const-decl "bool" posdef nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (in_ellipsoid_P?_TCC2 0
  (in_ellipsoid_P?_TCC2-1 nil 3636905292 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero const-decl "Vector" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (def_pos? const-decl "bool" posdef nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (in_ellipsoid_Q?_TCC1 0
  (in_ellipsoid_Q?_TCC1-1 nil 3560099992 ("" (tcc))
   ((eye_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil))
   nil))
 (in_ellipsoid_Q?_TCC2 0
  (in_ellipsoid_Q?_TCC2-1 nil 3560099992 ("" (tcc))
   ((V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (in_ellipsoid_Q?_TCC3 0
  (in_ellipsoid_Q?_TCC3-1 nil 3560099992 ("" (tcc))
   ((V2Ml const-decl "Matrix" matrices nil)) nil))
 (in_ellipsoid_Q?_TCC4 0
  (in_ellipsoid_Q?_TCC4-1 nil 3560099992 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (in_ellipsoid_Q?_TCC5 0
  (in_ellipsoid_Q?_TCC5-1 nil 3560099992
   ("" (skeep)
    (("" (typepred Q)
      (("" (expand square?)
        (("" (assert)
          (("" (expand Block2M)
            (("" (expand M2Block) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (eye_col formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil))
   shostak))
 (ellipsoid_TCC1 0
  (ellipsoid_TCC1-1 nil 3504869522 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (ellipsoid_TCC2 0
  (ellipsoid_TCC2-1 nil 3504869522 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (ellipsoid_TCC3 0
  (ellipsoid_TCC3-1 nil 3504869522 ("" (tcc)) nil nil))
 (ellipsoid_TCC4 0
  (ellipsoid_TCC4-1 nil 3508764162 ("" (tcc))
   ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ellipsoid_TCC5 0
  (ellipsoid_TCC5-1 nil 3508764162 ("" (tcc))
   ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ellipsoid_TCC6 0
  (ellipsoid_TCC6-1 nil 3508764162
   ("" (skeep)
    (("" (skeep)
      (("" (typepred M)
        (("" (expand squareMat?)
          (("" (expand square?)
            (("" (assert)
              (("" (replace -1)
                (("" (replace -2) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil))
   shostak))
 (ellipsoid_TCC7 0
  (ellipsoid_TCC7-1 nil 3520826443
   ("" (skeep)
    (("" (skeep)
      (("" (typepred M)
        (("" (expand square?)
          (("" (expand squareMat?)
            (("" (replace -1)
              (("" (replace -2) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil))
   shostak))
 (ellipsoid_TCC8 0
  (ellipsoid_TCC8-1 nil 3520826443
   ("" (skeep)
    (("" (typepred M)
      (("" (expand square?)
        (("" (expand squareMat?)
          (("" (replace -1)
            (("" (replace -2) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (ellipsoid_TCC9 0
  (ellipsoid_TCC9-1 nil 3520826443
   ("" (skeep)
    (("" (typepred Q)
      (("" (typepred M)
        (("" (expand square?)
          (("" (assert)
            (("" (expand squareMat?) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (transp_row formula-decl nil matrices nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (ellipsoid_TCC10 0
  (ellipsoid_TCC10-1 nil 3520826443 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (- const-decl "real" vectors "vectors/")
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_TCC11 0
  (tcc "tcc" 3520936757
       ("" (skosimp)
        (("" (split)
          (("1" (grind) nil nil)
           ("2" (expand "squareMat?")
            (("2" (assert)
              (("2" (typepred "M!1")
                (("2" (typepred "Q!1")
                  (("2" (expand "squareMat?")
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (lemma "bijec_prod")
            (("3" (inst?)
              (("1" (assert)
                (("1" (split)
                  (("1" (assert)
                    (("1" (typepred "Q!1")
                      (("1" (typepred "M!1")
                        (("1" (expand "square?")
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "Q!1")
                    (("2" (typepred "M!1")
                      (("2" (expand "square?") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "bijec_prod")
                    (("3" (inst?)
                      (("1" (assert)
                        (("1" (split)
                          (("1" (assert)
                            (("1" (hide 2 3)
                              (("1"
                                (typepred "M!1")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "M!1")
                            (("2" (hide 2 3) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("3" (lemma "bijec_transpose")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "M!1")
                        (("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "Q!1")
                (("2" (typepred "M!1")
                  (("2" (expand "square?")
                    (("2" (assert)
                      (("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((transpose const-decl "Matrix" matrices nil)
        (* const-decl "Matrix" matrices nil)
        (square? const-decl "bool" matrices nil)
        (real_times_real_is_real application-judgement "real" reals
         nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (mult_dim_row formula-decl nil matrices nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (below type-eq-decl nil naturalnumbers nil)
        (real nonempty-type-from-decl nil reals nil)
        (Matrix type-eq-decl nil matrices nil)
        (Square type-eq-decl nil matrices nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (SquareMat type-eq-decl nil matrices nil)
        (squareMat? const-decl "bool" matrices nil)
        (M!1 skolem-const-decl "SquareMat(n!1)" ellipsoid nil)
        (Q!1 skolem-const-decl "SquareMat(n!1)" ellipsoid nil)
        (n!1 skolem-const-decl "posnat" ellipsoid nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (mult_dim_col formula-decl nil matrices nil)
        (transp_col formula-decl nil matrices nil)
        (sigma def-decl "real" sigma "reals/")
        (bijec_transpose formula-decl nil matrix_operator nil)
        (bijec_prod formula-decl nil matrix_operator nil))
       shostak)
  (ellipsoid_TCC11-1 nil 3520826443 ("" (subtype-tcc) nil nil) nil
   nil))
 (ellipsoid_TCC12 0
  (ellipsoid_TCC12-1 nil 3520826443
   ("" (skeep)
    (("" (hide-all-but 1)
      (("" (expand *)
        (("" (expand inv)
          (("" (expand transpose)
            (("" (expand L) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (transpose const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil))
   shostak))
 (ellipsoid_TCC13 0
  (ellipsoid_TCC13-1 nil 3520826443
   ("" (skeep)
    (("" (expand inv) (("" (expand L) (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil))
   shostak))
 (ellipsoid 0
  (thm "thm" 3521305299
   ("" (skosimp)
    (("" (replace -4)
      (("" (assert)
        (("" (lemma "add_cancel_neg2[n!1]")
          (("" (inst -1 "b!1" "M!1 * x!1")
            (("1" (typepred "M!1")
              (("1" (expand "squareMat?")
                (("1" (replace -2 :actuals? t :hide? t)
                  (("1" (hide -1)
                    (("1" (replace -1 :hide? t)
                      (("1" (lemma "left_distributive_vect")
                        (("1" (inst -1 "M!1" "x!1" "c!1")
                          (("1" (typepred "M!1")
                            (("1" (expand "squareMat?")
                              (("1"
                                (replace -2 :actuals? t :hide? t)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma "prod_inv_oper")
                                      (("1"
                                        (inst
                                         -1
                                         "M!1"
                                         "Q!1*transpose(M!1)"
                                         "n!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "square?(Q!1 * transpose(M!1)) AND
                         squareMat?(n!1)(Q!1 * transpose(M!1)) AND
                          bijective?(n!1)(T(n!1, n!1)(Q!1 * transpose(M!1)))")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1 -2 -3)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "mult_assoc_vect")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "inv(n!1)(Q!1*transpose(M!1))"
                                                         "inv(n!1)(M!1)"
                                                         "M!1*(x!1-c!1)")
                                                        (("1"
                                                          (reveal -8)
                                                          (("1"
                                                            (expand
                                                             "square?")
                                                            (("1"
                                                              (reveal
                                                               -9)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 :dir
                                                                 rl
                                                                 :actuals?
                                                                 t
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :actuals?
                                                                   t
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "inv(n!1)(M!1) * (M!1 * (x!1 - c!1))=x!1-c!1")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "prod_inv_oper")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "Q!1"
                                                                               "transpose(M!1)"
                                                                               "n!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "square?(transpose(M!1)) AND
                                     squareMat?(n!1)(transpose(M!1)) AND
                                      bijective?(n!1)(T(n!1, n!1)(transpose(M!1)))")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2
                                                                                         -3)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "mult_assoc_vect")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "inv(n!1)(transpose(M!1))"
                                                                                               "inv(n!1)(Q!1)"
                                                                                               "x!1-c!1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "trans_mat_scal")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "inv(n!1)(transpose(M!1))"
                                                                                                     "M!1*(x!1-c!1)"
                                                                                                     "inv(n!1)(Q!1)*(x!1-c!1)")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "inv(n!1)(transpose(M!1))`rows = n!1")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         :actuals?
                                                                                                         t
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "(transpose(inv(n!1)(transpose(M!1))) * (M!1 * (x!1 - c!1)))=x!1-c!1")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-11
                                                                                                                    1))
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "transpose(inv(n!1)(transpose(M!1)))`rows = n!1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :actuals?
                                                                                                                       t
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "tran_inv_oper")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "M!1"
                                                                                                                     "n!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "transpose2")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "inv(n!1)(M!1)")
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -24)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -24)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "M!1")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "M!1")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "bijec_transpose")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "M!1"
                                                                                           "n!1")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (hide
                                                                                       2)
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "mult_assoc_vect")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "inv(n!1)(M!1)"
                                                                                 "M!1"
                                                                                 "x!1-c!1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "iso_inv")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "M!1"
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "ident_vect")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "I(n!1)"
                                                                                                     "x!1-c!1")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "M!1")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("3"
                                                                            (typepred
                                                                             "M!1")
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "M!1")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (typepred
                                                             "M!1")
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred "M!1")
                                                    (("1"
                                                      (typepred "Q!1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred "M!1")
                                                  (("2"
                                                    (typepred "Q!1")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma "bijec_prod")
                                                (("3"
                                                  (inst
                                                   -1
                                                   "Q!1"
                                                   "transpose(M!1)"
                                                   "n!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (typepred
                                                           "M!1")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (typepred
                                                           "M!1")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (lemma
                                                         "bijec_transpose")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "M!1"
                                                           "n!1")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred "M!1")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (flatten)
                                              (("3"
                                                (hide 2)
                                                (("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (typepred "M!1")
                                                    (("3"
                                                      (typepred "Q!1")
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "M!1") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (add_cancel_neg2 formula-decl nil vectors "vectors/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (prod_inv_oper formula-decl nil matrix_operator nil)
    (bijec_prod formula-decl nil matrix_operator nil)
    (mult_assoc_vect formula-decl nil matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (iso_inv formula-decl nil matrix_operator nil)
    (ident_vect formula-decl nil matrices nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (trans_mat_scal formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tran_inv_oper formula-decl nil matrix_operator nil)
    (transpose2 formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bijec_transpose formula-decl nil matrix_operator nil)
    (- const-decl "real" vectors "vectors/")
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (left_distributive_vect formula-decl nil matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (n!1 skolem-const-decl "posnat" ellipsoid nil)
    (SquareMat type-eq-decl nil matrices nil)
    (M!1 skolem-const-decl "SquareMat(n!1)" ellipsoid nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)
  (ellipsoid-3 "thm" 3521305283
   ("" (skosimp)
    (("" (replace -4)
      (("" (assert)
        (("" (lemma "add_cancel_neg2[n!1]")
          (("" (inst -1 "b!1" "M!1 * x!1")
            (("1" (typepred "M!1")
              (("1" (expand "squareMat?")
                (("1" (replace -2 :actuals? t :hide? t)
                  (("1" (hide -1)
                    (("1" (replace -1 :hide? t)
                      (("1" (lemma "left_distributive_vect")
                        (("1" (inst -1 "M!1" "x!1" "c!1")
                          (("1" (typepred "M!1")
                            (("1" (expand "squareMat?")
                              (("1"
                                (replace -2 :actuals? t :hide? t)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma "prod_inv_oper")
                                      (("1"
                                        (inst
                                         -1
                                         "M!1"
                                         "Q!1*transpose(M!1)"
                                         "n!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "square?(Q!1 * transpose(M!1)) AND
                         squareMat?(n!1)(Q!1 * transpose(M!1)) AND
                          bijective?(n!1)(T(n!1, n!1)(Q!1 * transpose(M!1)))")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1 -2 -3)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "mult_assoc_vect")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "inv(n!1)(Q!1*transpose(M!1))"
                                                         "inv(n!1)(M!1)"
                                                         "M!1*(x!1-c!1)")
                                                        (("1"
                                                          (reveal -8)
                                                          (("1"
                                                            (expand
                                                             "square?")
                                                            (("1"
                                                              (reveal
                                                               -9)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 :dir
                                                                 rl
                                                                 :actuals?
                                                                 t
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :actuals?
                                                                   t
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "inv(n!1)(M!1) * (M!1 * (x!1 - c!1))=x!1-c!1")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "prod_inv_oper")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "Q!1"
                                                                               "transpose(M!1)"
                                                                               "n!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "square?(transpose(M!1)) AND
                                     squareMat?(n!1)(transpose(M!1)) AND
                                      bijective?(n!1)(T(n!1, n!1)(transpose(M!1)))")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2
                                                                                         -3)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "mult_assoc_vect")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "inv(n!1)(transpose(M!1))"
                                                                                               "inv(n!1)(Q!1)"
                                                                                               "x!1-c!1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "trans_mat_scal")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "inv(n!1)(transpose(M!1))"
                                                                                                     "M!1*(x!1-c!1)"
                                                                                                     "inv(n!1)(Q!1)*(x!1-c!1)")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "inv(n!1)(transpose(M!1))`rows = n!1")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         :actuals?
                                                                                                         t
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "(transpose(inv(n!1)(transpose(M!1))) * (M!1 * (x!1 - c!1)))=x!1-c!1")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-11
                                                                                                                    1))
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "transpose(inv(n!1)(transpose(M!1)))`rows = n!1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :actuals?
                                                                                                                       t
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil)))
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil)))))))))))))
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "tran_inv_oper")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "M!1"
                                                                                                                     "n!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "transpose2")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "inv(n!1)(M!1)")
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil)))))))))))))))))))
                                                                                                             ("3"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (grind)
                                                                                                                nil)))))))))
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil)))))
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -24)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -24)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "M!1")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil)))))
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "M!1")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil)))))
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "bijec_transpose")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "M!1"
                                                                                           "n!1")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil)))))))))
                                                                                   ("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (hide
                                                                                       2)
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil)))))))))))))))
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "mult_assoc_vect")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "inv(n!1)(M!1)"
                                                                                 "M!1"
                                                                                 "x!1-c!1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "iso_inv")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "M!1"
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "ident_vect")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "I(n!1)"
                                                                                                     "x!1-c!1")
                                                                                                    nil)))))))))))))))))))
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "M!1")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil)))))))))))))))
                                                                         ("3"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("3"
                                                                            (typepred
                                                                             "M!1")
                                                                            (("3"
                                                                              (grind)
                                                                              nil)))))))))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "M!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))
                                                         ("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (typepred
                                                             "M!1")
                                                            (("3"
                                                              (grind)
                                                              nil)))))))))))))))))
                                             ("2"
                                              (split)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred "M!1")
                                                    (("1"
                                                      (typepred "Q!1")
                                                      (("1"
                                                        (grind)
                                                        nil)))))))))
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred "M!1")
                                                  (("2"
                                                    (typepred "Q!1")
                                                    (("2"
                                                      (grind)
                                                      nil)))))))
                                               ("3"
                                                (lemma "bijec_prod")
                                                (("3"
                                                  (inst
                                                   -1
                                                   "Q!1"
                                                   "transpose(M!1)"
                                                   "n!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (typepred
                                                           "M!1")
                                                          (("1"
                                                            (grind)
                                                            nil)))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (typepred
                                                           "M!1")
                                                          (("2"
                                                            (grind)
                                                            nil)))))
                                                       ("3"
                                                        (lemma
                                                         "bijec_transpose")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "M!1"
                                                           "n!1")
                                                          (("3"
                                                            (assert)
                                                            nil)))))))))
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred "M!1")
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))
                                             ("3"
                                              (flatten)
                                              (("3"
                                                (hide 2)
                                                (("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (typepred "M!1")
                                                    (("3"
                                                      (typepred "Q!1")
                                                      (("3"
                                                        (grind)
                                                        nil)))))))))))))))))))))))))))))))))))))))))))
             ("2" (hide-all-but 1)
              (("2" (typepred "M!1") (("2" (grind) nil))))))))))))))
    nil)
   nil nil)
  (thm "thm" 3521286628
   ("" (skosimp)
    (("" (replace -4)
      (("" (assert)
        (("" (lemma "add_cancel_neg2[n!1]")
          (("" (inst -1 "b!1" "M!1 * x!1")
            (("1" (typepred "M!1")
              (("1" (expand "squareMat?")
                (("1" (replace -2 :actuals? t :hide? t)
                  (("1" (hide -1)
                    (("1" (replace -1 :hide? t)
                      (("1" (lemma "left_distributive_vect")
                        (("1" (inst -1 "M!1" "x!1" "c!1")
                          (("1" (typepred "M!1")
                            (("1" (expand "squareMat?")
                              (("1"
                                (replace -2 :actuals? t :hide? t)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma "prod_inv_oper")
                                      (("1"
                                        (inst
                                         -1
                                         "M!1"
                                         "Q!1*transpose(M!1)"
                                         "n!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "square?(Q!1 * transpose(M!1)) AND
                squareMat?(n!1)(Q!1 * transpose(M!1)) AND
                 bijective?(n!1)(T(n!1, n!1)(Q!1 * transpose(M!1)))")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1 -2 -3)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "mult_assoc_vect")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "inv(n!1)(Q!1*transpose(M!1))"
                                                         "inv(n!1)(M!1)"
                                                         "M!1*(x!1-c!1)")
                                                        (("1"
                                                          (reveal -8)
                                                          (("1"
                                                            (expand
                                                             "square?")
                                                            (("1"
                                                              (reveal
                                                               -9)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 :dir
                                                                 rl
                                                                 :actuals?
                                                                 t
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :actuals?
                                                                   t
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "inv(n!1)(M!1) * (M!1 * (x!1 - c!1))=x!1-c!1")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "prod_inv_oper")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "Q!1"
                                                                               "transpose(M!1)"
                                                                               "n!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "square?(transpose(M!1)) AND
                      squareMat?(n!1)(transpose(M!1)) AND
                       bijective?(n!1)(T(n!1, n!1)(transpose(M!1)))")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2
                                                                                         -3)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "mult_assoc_vect")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "inv(n!1)(transpose(M!1))"
                                                                                               "inv(n!1)(Q!1)"
                                                                                               "x!1-c!1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "trans_mat_scal")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "inv(n!1)(transpose(M!1))"
                                                                                                     "M!1*(x!1-c!1)"
                                                                                                     "inv(n!1)(Q!1)*(x!1-c!1)")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "inv(n!1)(transpose(M!1))`rows = n!1")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         :actuals?
                                                                                                         t
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "(transpose(inv(n!1)(transpose(M!1))) * (M!1 * (x!1 - c!1)))=x!1-c!1")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-11
                                                                                                                    1))
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "transpose(inv(n!1)(transpose(M!1)))`rows = n!1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :actuals?
                                                                                                                       t
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "tran_inv_oper")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "M!1"
                                                                                                                     "n!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "transpose2")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "inv(n!1)(M!1)")
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -24)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -24)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "M!1")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "M!1")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "bijec_transpose")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "M!1"
                                                                                           "n!1")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (hide
                                                                                       2)
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "mult_assoc_vect")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "inv(n!1)(M!1)"
                                                                                 "M!1"
                                                                                 "x!1-c!1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "iso_inv")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "M!1"
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "ident_vect")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "I(n!1)"
                                                                                                     "x!1-c!1")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "M!1")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("3"
                                                                            (typepred
                                                                             "M!1")
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "M!1")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (typepred
                                                             "M!1")
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred "M!1")
                                                    (("1"
                                                      (typepred "Q!1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred "M!1")
                                                  (("2"
                                                    (typepred "Q!1")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma "bijec_prod")
                                                (("3"
                                                  (inst
                                                   -1
                                                   "Q!1"
                                                   "transpose(M!1)"
                                                   "n!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (typepred
                                                           "M!1")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (typepred
                                                           "M!1")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (lemma
                                                         "bijec_transpose")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "M!1"
                                                           "n!1")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred "M!1")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (flatten)
                                              (("3"
                                                (hide 2)
                                                (("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (typepred "M!1")
                                                    (("3"
                                                      (typepred "Q!1")
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "M!1") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ellipsoid-2 "thm" 3521286610
   ("" (skosimp)
    (("" (replace -4)
      (("" (assert)
        (("" (lemma "add_cancel_neg2[n!1]")
          (("" (inst -1 "b!1" "M!1 * x!1")
            (("1" (typepred "M!1")
              (("1" (expand "squareMat?")
                (("1" (replace -2 :actuals? t :hide? t)
                  (("1" (hide -1)
                    (("1" (replace -1 :hide? t)
                      (("1" (lemma "left_distributive_vect")
                        (("1" (inst -1 "M!1" "x!1" "c!1")
                          (("1" (typepred "M!1")
                            (("1" (expand "squareMat?")
                              (("1"
                                (replace -2 :actuals? t :hide? t)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma "prod_inv_oper")
                                      (("1"
                                        (inst
                                         -1
                                         "M!1"
                                         "Q!1*transpose(M!1)"
                                         "n!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "square?(Q!1 * transpose(M!1)) AND
                squareMat?(n!1)(Q!1 * transpose(M!1)) AND
                 bijective?(n!1)(T(n!1, n!1)(Q!1 * transpose(M!1)))")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1 -2 -3)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "mult_assoc_vect")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "inv(n!1)(Q!1*transpose(M!1))"
                                                         "inv(n!1)(M!1)"
                                                         "M!1*(x!1-c!1)")
                                                        (("1"
                                                          (reveal -8)
                                                          (("1"
                                                            (expand
                                                             "square?")
                                                            (("1"
                                                              (reveal
                                                               -9)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 :dir
                                                                 rl
                                                                 :actuals?
                                                                 t
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :actuals?
                                                                   t
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "inv(n!1)(M!1) * (M!1 * (x!1 - c!1))=x!1-c!1")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "prod_inv_oper")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "Q!1"
                                                                               "transpose(M!1)"
                                                                               "n!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "square?(transpose(M!1)) AND
                      squareMat?(n!1)(transpose(M!1)) AND
                       bijective?(n!1)(T(n!1, n!1)(transpose(M!1)))")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2
                                                                                         -3)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "mult_assoc_vect")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "inv(n!1)(transpose(M!1))"
                                                                                               "inv(n!1)(Q!1)"
                                                                                               "x!1-c!1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "trans_mat_scal")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "inv(n!1)(transpose(M!1))"
                                                                                                     "M!1*(x!1-c!1)"
                                                                                                     "inv(n!1)(Q!1)*(x!1-c!1)")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "inv(n!1)(transpose(M!1))`rows = n!1")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         :actuals?
                                                                                                         t
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "(transpose(inv(n!1)(transpose(M!1))) * (M!1 * (x!1 - c!1)))=x!1-c!1")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-11
                                                                                                                    1))
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "transpose(inv(n!1)(transpose(M!1)))`rows = n!1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :actuals?
                                                                                                                       t
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil)))
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil)))))))))))))
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "tran_inv_oper")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "M!1"
                                                                                                                     "n!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "transpose2")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "inv(n!1)(M!1)")
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil)))))))))))))))))))
                                                                                                             ("3"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (grind)
                                                                                                                nil)))))))))
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil)))))
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -24)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil)))
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -24)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil)))))))))))))))))))))))))
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "M!1")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil)))))
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "M!1")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil)))))
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "bijec_transpose")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "M!1"
                                                                                           "n!1")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil)))))))))
                                                                                   ("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (hide
                                                                                       2)
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil)))))))))))))))
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "mult_assoc_vect")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "inv(n!1)(M!1)"
                                                                                 "M!1"
                                                                                 "x!1-c!1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "iso_inv")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "M!1"
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "ident_vect")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "I(n!1)"
                                                                                                     "x!1-c!1")
                                                                                                    nil)))))))))))))))))))
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "M!1")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil)))))))))))))))
                                                                         ("3"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("3"
                                                                            (typepred
                                                                             "M!1")
                                                                            (("3"
                                                                              (grind)
                                                                              nil)))))))))))))))))))))
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "M!1")
                                                            (("2"
                                                              (grind)
                                                              nil)))))
                                                         ("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (typepred
                                                             "M!1")
                                                            (("3"
                                                              (grind)
                                                              nil)))))))))))))))))
                                             ("2"
                                              (split)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred "M!1")
                                                    (("1"
                                                      (typepred "Q!1")
                                                      (("1"
                                                        (grind)
                                                        nil)))))))))
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred "M!1")
                                                  (("2"
                                                    (typepred "Q!1")
                                                    (("2"
                                                      (grind)
                                                      nil)))))))
                                               ("3"
                                                (lemma "bijec_prod")
                                                (("3"
                                                  (inst
                                                   -1
                                                   "Q!1"
                                                   "transpose(M!1)"
                                                   "n!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (typepred
                                                           "M!1")
                                                          (("1"
                                                            (grind)
                                                            nil)))))
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (typepred
                                                           "M!1")
                                                          (("2"
                                                            (grind)
                                                            nil)))))
                                                       ("3"
                                                        (lemma
                                                         "bijec_transpose")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "M!1"
                                                           "n!1")
                                                          (("3"
                                                            (assert)
                                                            nil)))))))))
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred "M!1")
                                                      (("2"
                                                        (grind)
                                                        nil)))))))))))
                                             ("3"
                                              (flatten)
                                              (("3"
                                                (hide 2)
                                                (("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (typepred "M!1")
                                                    (("3"
                                                      (typepred "Q!1")
                                                      (("3"
                                                        (grind)
                                                        nil)))))))))))))))))))))))))))))))))))))))))))
             ("2" (hide-all-but 1)
              (("2" (typepred "M!1") (("2" (grind) nil))))))))))))))
    nil)
   nil nil)
  (thm "thm" 3520609934
   ("" (skosimp)
    (("" (replace -4)
      (("" (assert)
        (("" (lemma "add_cancel_neg2[n!1]")
          (("" (inst -1 "b!1" "M!1 * x!1")
            (("1" (typepred "M!1")
              (("1" (expand "squareMat?")
                (("1" (replace -2 :actuals? t :hide? t)
                  (("1" (hide -1)
                    (("1" (replace -1 :hide? t)
                      (("1" (lemma "left_distributive_vect")
                        (("1" (inst -1 "M!1" "x!1" "c!1")
                          (("1" (typepred "M!1")
                            (("1" (expand "squareMat?")
                              (("1"
                                (replace -2 :actuals? t :hide? t)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma "prod_inv_oper")
                                      (("1"
                                        (inst
                                         -1
                                         "M!1"
                                         "Q!1*transpose(M!1)"
                                         "n!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "square?(Q!1 * transpose(M!1)) AND
       squareMat?(n!1)(Q!1 * transpose(M!1)) AND
        bijective?(n!1)(T(n!1, n!1)(Q!1 * transpose(M!1)))")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1 -2 -3)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "mult_assoc_vect")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "inv(n!1)(Q!1*transpose(M!1))"
                                                         "inv(n!1)(M!1)"
                                                         "M!1*(x!1-c!1)")
                                                        (("1"
                                                          (reveal -8)
                                                          (("1"
                                                            (expand
                                                             "square?")
                                                            (("1"
                                                              (reveal
                                                               -9)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 :dir
                                                                 rl
                                                                 :actuals?
                                                                 t
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :actuals?
                                                                   t
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "inv(n!1)(M!1) * (M!1 * (x!1 - c!1))=x!1-c!1")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "prod_inv_oper")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "Q!1"
                                                                               "transpose(M!1)"
                                                                               "n!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "square?(transpose(M!1)) AND
       squareMat?(n!1)(transpose(M!1)) AND
        bijective?(n!1)(T(n!1, n!1)(transpose(M!1)))")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2
                                                                                         -3)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "mult_assoc_vect")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "inv(n!1)(transpose(M!1))"
                                                                                               "inv(n!1)(Q!1)"
                                                                                               "x!1-c!1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "trans_mat_scal")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "inv(n!1)(transpose(M!1))"
                                                                                                     "M!1*(x!1-c!1)"
                                                                                                     "inv(n!1)(Q!1)*(x!1-c!1)")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "inv(n!1)(transpose(M!1))`rows = n!1")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         :actuals?
                                                                                                         t
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "(transpose(inv(n!1)(transpose(M!1))) * (M!1 * (x!1 - c!1)))=x!1-c!1")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-11
                                                                                                                    1))
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "transpose(inv(n!1)(transpose(M!1)))`rows = n!1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :actuals?
                                                                                                                       t
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "tran_inv_oper")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "M!1"
                                                                                                                     "n!1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "transpose2")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "inv(n!1)(M!1)")
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -24)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -24)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "M!1")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "M!1")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "bijec_transpose")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "M!1"
                                                                                           "n!1")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (hide
                                                                                       2)
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "mult_assoc_vect")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "inv(n!1)(M!1)"
                                                                                 "M!1"
                                                                                 "x!1-c!1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "iso_inv")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "M!1"
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "ident_vect")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "I(n!1)"
                                                                                                     "x!1-c!1")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "M!1")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("3"
                                                                            (typepred
                                                                             "M!1")
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "M!1")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           1)
                                                          (("3"
                                                            (typepred
                                                             "M!1")
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (typepred "M!1")
                                                    (("1"
                                                      (typepred "Q!1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred "M!1")
                                                  (("2"
                                                    (typepred "Q!1")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma "bijec_prod")
                                                (("3"
                                                  (inst
                                                   -1
                                                   "Q!1"
                                                   "transpose(M!1)"
                                                   "n!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (typepred
                                                           "M!1")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (typepred
                                                           "M!1")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (lemma
                                                         "bijec_transpose")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "M!1"
                                                           "n!1")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred "M!1")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (flatten)
                                              (("3"
                                                (hide 2)
                                                (("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (typepred "M!1")
                                                    (("3"
                                                      (typepred "Q!1")
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "M!1") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (ellipsoid-1 nil 3504886332
   ("" (skosimp)
    (("" (replace -4)
      (("" (assert)
        (("" (lemma "left_distributive_vect_n")
          (("" (inst -1 "M!1" "x!1" "c!1")
            (("" (swap-rel -1)
              (("" (replace -1)
                (("" (lemma "prod_inv_oper")
                  (("" (inst -1 "M!1" "Q!1*transpose(M!1)" "n")
                    (("" (assert)
                      ((""
                        (case "    square?(M!1) AND squareMat?(n)(M!1)
       AND square?(Q!1 * transpose(M!1))
       AND squareMat?(n)(Q!1 * transpose(M!1))
       AND bijective?(n)(T(n, n)(Q!1 * transpose(M!1)))")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (hide -1 -2 -3 -4 -5)
                              (("1"
                                (replace -1)
                                (("1"
                                  (lemma "mult_assoc_vect_n")
                                  (("1"
                                    (inst
                                     -1
                                     "inv(n)(Q!1*transpose(M!1))"
                                     "inv(n)(M!1)"
                                     "M!1*(x!1-c!1)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "inv(n)(M!1) * (M!1 * (x!1 - c!1))=x!1-c!1")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (lemma "prod_inv_oper")
                                              (("1"
                                                (inst
                                                 -1
                                                 "Q!1"
                                                 "transpose(M!1)"
                                                 "n")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "square?(Q!1) AND squareMat?(n)(Q!1) AND square?(transpose(M!1))
       AND squareMat?(n)(transpose(M!1))
       AND bijective?(n)(T(n, n)(transpose(M!1)))")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3
                                                           -4
                                                           -5)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (lemma
                                                               "mult_assoc_vect_n")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "inv(n)(transpose(M!1))"
                                                                 "inv(n)(Q!1)"
                                                                 "x!1-c!1")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "trans_mat_scal_n")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "inv(n)(transpose(M!1))"
                                                                       "M!1*(x!1-c!1)"
                                                                       "inv(n)(Q!1)*(x!1-c!1)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (case
                                                                           "(transpose(inv(n)(transpose(M!1))) * (M!1 * (x!1 - c!1)))=x!1-c!1")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "tran_inv_oper")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "M!1"
                                                                                   "n")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "transpose2")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "inv(n)(M!1)")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("5"
                                                          (lemma
                                                           "bijec_transpose")
                                                          (("5"
                                                            (inst
                                                             -1
                                                             "M!1"
                                                             "n")
                                                            (("5"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (flatten)
                                                      (("3"
                                                        (hide 2)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "mult_assoc_vect_n")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "inv(n)(M!1)"
                                                   "M!1"
                                                   "x!1-c!1")
                                                  (("2"
                                                    (swap-rel -1)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "iso_inv")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "M!1"
                                                             "n")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (grind) nil nil) ("4" (grind) nil nil)
                           ("5" (lemma "bijec_prod")
                            (("5" (inst -1 "Q!1" "transpose(M!1)" "n")
                              (("1"
                                (assert)
                                (("1"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil)
                                   ("4" (grind) nil nil)
                                   ("5"
                                    (lemma "bijec_transpose")
                                    (("5"
                                      (inst -1 "M!1" "n")
                                      (("5"
                                        (assert)
                                        (("5"
                                          (hide 2 3 4)
                                          (("5" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("3" (flatten)
                          (("3" (hide 2) (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (ellipsoid_simp_TCC1 0
  (ellipsoid_simp_TCC1-1 nil 3538155731 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_simp_TCC2 0
  (ellipsoid_simp_TCC2-1 nil 3538155731 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_simp_TCC3 0
  (ellipsoid_simp_TCC3-1 nil 3538155731 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_simp_TCC4 0
  (ellipsoid_simp_TCC4-1 nil 3538155731 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_simp_TCC5 0
  (ellipsoid_simp_TCC5-1 nil 3538155731
   ("" (skeep)
    (("" (split)
      (("1" (typepred M)
        (("1" (typepred Q)
          (("1" (hide -5 -6 -7 -8) (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (hide -1 -2 -3 -4)
        (("2" (typepred M)
          (("2" (typepred Q) (("2" (grind) nil nil)) nil)) nil))
        nil)
       ("3" (lemma bijec_transpose)
        (("3" (inst -1 M n)
          (("3" (bddsimp -1)
            (("1" (lemma bijec_prod)
              (("1" (inst-cp -1 "Q" "transpose(M)" n)
                (("1" (assert)
                  (("1" (bddsimp -2)
                    (("1" (inst -2 "M" "Q*transpose(M)" n)
                      (("1" (assert)
                        (("1" (hide-all-but 1)
                          (("1" (typepred Q)
                            (("1" (typepred M) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (typepred Q)
                          (("2" (typepred M) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (typepred Q)
                        (("2" (typepred M) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1)
                      (("3" (typepred Q)
                        (("3" (typepred M) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (typepred Q)
                    (("2" (typepred M) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (hide-all-but 1)
              (("3" (typepred Q)
                (("3" (typepred M) (("3" (propax) nil nil)) nil)) nil))
              nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transpose const-decl "Matrix" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Matrix" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (bijec_prod formula-decl nil matrix_operator nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Q skolem-const-decl "SquareMat(n)" ellipsoid nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (M skolem-const-decl "SquareMat(n)" ellipsoid nil)
    (bijec_transpose formula-decl nil matrix_operator nil))
   shostak))
 (ellipsoid_simp_TCC6 0
  (ellipsoid_simp_TCC6-1 nil 3538155731 ("" (grind) nil nil)
   ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (ellipsoid_simp_TCC7 0
  (ellipsoid_simp_TCC7-1 nil 3538155731 ("" (grind) nil nil)
   ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (ellipsoid_simp 0
  (ellipsoid_simp-1 nil 3538155733
   ("" (skosimp*)
    (("" (lemma "ellipsoid")
      ((""
        (inst -1 "n!1" "Q!1" "M!1" "x!1" "y!1" "vectors[n!1].zero"
         "vectors[n!1].zero")
        (("" (assert)
          (("" (lemma "zero_times_vect_right")
            (("" (inst?)
              (("" (assert)
                (("" (expand * -1)
                  (("" (expand * -2 1)
                    ((""
                      (case "y!1 -
        (LAMBDA (i: below(M!1`rows)):
           sigma[below(M!1`cols)]
               (0, M!1`cols - 1,
                LAMBDA (k: below(M!1`cols)):
                  M!1`matrix(i, k) * vectors[n!1].zero(k))) = y!1")
                      (("1" (replace -1)
                        (("1" (expand * -3 5)
                          (("1" (replace -1) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand -)
                          (("2" (assert)
                            (("2" (apply-extensionality)
                              (("1"
                                (lemma
                                 " sigma[below(M!1`cols)].sigma_restrict_eq_0")
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (typepred M!1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (grind)
                                        (("3"
                                          (typepred M!1)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 3)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (grind)
                                  (("3"
                                    (typepred M!1 `cols)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (grind)
                                  (("4"
                                    (typepred M!1)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide 2)
                                (("5" (grind) nil nil))
                                nil)
                               ("6"
                                (hide 2)
                                (("6" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1)
                        (("3" (grind)
                          (("1" (typepred M!1) (("1" (grind) nil nil))
                            nil)
                           ("2" (typepred M!1) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide-all-but 1) (("4" (grind) nil nil))
                        nil)
                       ("5" (hide-all-but 1)
                        (("5" (grind)
                          (("5" (typepred M!1) (("5" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("6" (hide-all-but 1) (("6" (grind) nil nil))
                        nil)
                       ("7" (hide-all-but 1) (("7" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ellipsoid formula-decl nil ellipsoid nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub_zero_right formula-decl nil vectors "vectors/")
    (add_zero_right formula-decl nil vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "real" vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (M!1 skolem-const-decl "SquareMat(n!1)" ellipsoid nil)
    (n!1 skolem-const-decl "posnat" ellipsoid nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (comp_zero formula-decl nil vectors "vectors/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!2 skolem-const-decl "Index[n!1]" ellipsoid nil)
    (sigma_restrict_eq_0 formula-decl nil sigma "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (zero_times_vect_right formula-decl nil matrix_operator nil)
    (zero const-decl "Vector" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (ellipsoid_general_TCC1 0
  (ellipsoid_general_TCC1-1 nil 3560099992 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_TCC2 0
  (ellipsoid_general_TCC2-1 nil 3560099992 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_TCC3 0
  (ellipsoid_general_TCC3-1 nil 3560099992 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_TCC4 0
  (ellipsoid_general_TCC4-1 nil 3637359798
   ("" (skeep)
    (("" (assert)
      (("" (typepred Q) (("" (hide -3) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((transp_row formula-decl nil matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil))
   nil))
 (ellipsoid_general_TCC5 0
  (ellipsoid_general_TCC5-1 nil 3637359798
   ("" (skeep)
    (("" (hide -1)
      (("" (typepred Q) (("" (typepred M) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil))
   nil))
 (ellipsoid_general 0
  (ellipsoid_general-1 nil 3560181764
   ("" (skeep)
    (("" (expand in_ellipsoid_Q?)
      (("" (flatten)
        (("" (split)
          (("1" (lemma semidef_qua_trans)
            (("1" (inst -1 Q M)
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (typepred M)
                  (("2" (typepred Q)
                    (("2" (expand square?)
                      (("2" (expand squareMat?)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma symetric_qua_trans)
            (("2" (inst -1 Q M)
              (("1" (assert) nil nil)
               ("2" (typepred M)
                (("2" (typepred Q)
                  (("2" (expand squareMat?) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (lemma semidef_qua_trans)
            (("3"
              (case "Block2M(M2Block(1, m, 1, m)
                                  (I(1), transpose(V2Ml(m, y)), V2Ml(m, y),
                                   M * Q * transpose(M))) = Block2M(M2Block(1, m, 1, n)(I(1),Zero_mat(m,1),Zero_mat(1,n),M))*Block2M(M2Block(1, n, 1, n)
                                  (I(1), transpose(V2Ml(n, x)), V2Ml(n, x),
                                   Q))*transpose(Block2M(M2Block(1, m, 1, n)(I(1),Zero_mat(m,1),Zero_mat(1,n),M)))")
              (("1" (replace -1)
                (("1"
                  (inst -2 "Block2M(M2Block(1, n, 1, n)
                                   (I(1), transpose(V2Ml(n, x)),
                                    V2Ml(n, x), Q))"
                   "Block2M(M2Block(1, m, 1, n)
                                  (I(1), Zero_mat(m, 1), Zero_mat(1, n),
                                   M))")
                  (("1" (assert) nil nil)
                   ("2" (hide 2)
                    (("2" (hide-all-but 1)
                      (("2" (expand Block2M)
                        (("2" (expand M2Block)
                          (("2" (expand I)
                            (("2" (expand transpose)
                              (("2"
                                (expand V2Ml)
                                (("2"
                                  (expand Zero_mat)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma transpose_eq)
                  (("2"
                    (inst -1 "M2Block(1, m, 1, n)
                                 (I(1), Zero_mat(m, 1), Zero_mat(1, n), M)")
                    (("2" (replace -1 1 rl)
                      (("2" (lemma conv_transp)
                        (("2"
                          (inst -1 "M2Block(1, m, 1, n)
                                  (I(1), Zero_mat(m, 1), Zero_mat(1, n),
                                   M)")
                          (("2" (replace -1)
                            (("2" (expand M2Block 1 (5 6 7 8))
                              (("2"
                                (expand I 1 (4 5))
                                (("2"
                                  (expand Zero_mat 1 (3 4))
                                  (("2"
                                    (lemma access_m_1)
                                    (("2"
                                      (hide -3)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (inst
                                           -1
                                           "1"
                                           "m"
                                           "1"
                                           "n"
                                           "I(1)"
                                           "Zero_mat(m,1)"
                                           "Zero_mat(1,n)"
                                           "M")
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (lemma access_m_2)
                                              (("2"
                                                (inst
                                                 -1
                                                 "1"
                                                 "m"
                                                 "1"
                                                 "n"
                                                 "I(1)"
                                                 "Zero_mat(m,1)"
                                                 "Zero_mat(1,n)"
                                                 "M")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (lemma access_m_3)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "1"
                                                       "m"
                                                       "1"
                                                       "n"
                                                       "I(1)"
                                                       "Zero_mat(m,1)"
                                                       "Zero_mat(1,n)"
                                                       "M")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (lemma
                                                           access_m_4)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "1"
                                                             "m"
                                                             "1"
                                                             "n"
                                                             "I(1)"
                                                             "Zero_mat(m,1)"
                                                             "Zero_mat(1,n)"
                                                             "M")
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (lemma
                                                                 "ident_trans")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (lemma
                                                                       "zero_trans")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         1
                                                                         n)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (lemma
                                                                             zero_trans)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               m
                                                                               1)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   conv_mult)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     1
                                                                                     m
                                                                                     1
                                                                                     n
                                                                                     1
                                                                                     n
                                                                                     "I(1)"
                                                                                     "Zero_mat(m, 1)"
                                                                                     "Zero_mat(1, n)"
                                                                                     "M"
                                                                                     "I(1)"
                                                                                     "transpose(V2Ml(n, x))"
                                                                                     "V2Ml(n, x)"
                                                                                     "Q")
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         left_mult_ident)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "I(1)"
                                                                                           "I(1)")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               zero_times_left)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "transpose(V2Ml(n, x))"
                                                                                                 "Zero_mat(1, n)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     zero_right_ident)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "Zero_mat(1, n) * transpose(V2Ml(n, x))"
                                                                                                       "I(1)")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             zero_times_left)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "I(1)"
                                                                                                               "Zero_mat(m,1)")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 zero_left_ident)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "Zero_mat(m, 1) * I(1)"
                                                                                                                   "M * transpose(V2Ml(n, x))")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       left_mult_ident)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "V2Ml(n,x)"
                                                                                                                         "I(1)")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             zero_times_left)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "Q"
                                                                                                                               "Zero_mat(1,n)")
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 zero_right_ident)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "Zero_mat(1,n)*Q"
                                                                                                                                   "V2Ml(n,x)")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       zero_times_left)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "V2Ml(n,x)"
                                                                                                                                         "Zero_mat(m,1)")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           zero_left_ident)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "Zero_mat(m, 1) * V2Ml(n, x)"
                                                                                                                                             "M*Q")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 conv_mult)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   1
                                                                                                                                                   m
                                                                                                                                                   1
                                                                                                                                                   n
                                                                                                                                                   1
                                                                                                                                                   m
                                                                                                                                                   "I(1)"
                                                                                                                                                   "M * transpose(V2Ml(n, x))"
                                                                                                                                                   " V2Ml(n, x)"
                                                                                                                                                   "M * Q"
                                                                                                                                                   "I(1)"
                                                                                                                                                   "Zero_mat(n, 1)"
                                                                                                                                                   "Zero_mat(1, m)"
                                                                                                                                                   "transpose(M)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       right_mult_ident)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         (1
                                                                                                                                                          -1))
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "I(1)"
                                                                                                                                                           "I(1)")
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               zero_times_right)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "Zero_mat(n,1)"
                                                                                                                                                                 "V2Ml(n,x)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   zero_right_ident)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "V2Ml(n, x) * Zero_mat(n, 1)"
                                                                                                                                                                     "I(1)")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (lemma
                                                                                                                                                                         right_mult_ident)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -1
                                                                                                                                                                           "M * transpose(V2Ml(n, x))"
                                                                                                                                                                           "I(1)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               zero_times_right)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -1
                                                                                                                                                                                 "Zero_mat(n,1)"
                                                                                                                                                                                 "M*Q")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   zero_right_ident)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -1
                                                                                                                                                                                     "M * Q * Zero_mat(n, 1)"
                                                                                                                                                                                     "M*transpose(V2Ml(n,x))")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "zero_times_right")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -1
                                                                                                                                                                                           "Zero_mat(1,m)"
                                                                                                                                                                                           "I(1)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               zero_right_ident)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 zero_left_ident)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   "I(1) * Zero_mat(1, m)"
                                                                                                                                                                                                   "V2Ml(n, x) * transpose(M)")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     zero_times_left)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                       zero_times_right)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -1
                                                                                                                                                                                                         "Zero_mat(1,m)"
                                                                                                                                                                                                         "     M * transpose(V2Ml(n, x))")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                           zero_left_ident)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -1
                                                                                                                                                                                                             "M * transpose(V2Ml(n, x)) * Zero_mat(1, m)"
                                                                                                                                                                                                             "M * Q * transpose(M)")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (reveal
                                                                                                                                                                                                                     -34)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                       "transpose(V2Ml(m, y))=M * transpose(V2Ml(n, x)) AND V2Ml(m, y)=V2Ml(n, x) * transpose(M)")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (flatten)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                             -2)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (split)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (hide
                                                                                                                                                                                                                           2)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             transpose)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               V2Ml)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 *)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (decompose-equality)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                                                       M)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (reveal
                                                                                                                                                                                                                                         -28)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                           *
                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (decompose-equality
                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                                 x!1)
                                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("3"
                                                                                                                                                                                                                                      (skeep)
                                                                                                                                                                                                                                      (("3"
                                                                                                                                                                                                                                        (skeep)
                                                                                                                                                                                                                                        (("3"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("4"
                                                                                                                                                                                                                                      (skeep)
                                                                                                                                                                                                                                      (("4"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        (("4"
                                                                                                                                                                                                                                          (typepred
                                                                                                                                                                                                                                           i)
                                                                                                                                                                                                                                          (("4"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             V2Ml)
                                                                                                                                                                                                                                            (("4"
                                                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                          (hide
                                                                                                                                                                                                                           2)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             V2Ml)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               transpose)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 *)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (decompose-equality)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                                     sigma_trick)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                                                       M)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (typepred!
                                                                                                                                                                                                                                           M)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (typepred
                                                                                                                                                                                                                                             Q)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                               square?)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                 squareMat?)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                                                                       Q)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                         square?)
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                           squareMat?)
                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                                                                             "sigma_below_sub[M`cols,n].sigma_diff_eq")
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (inst
                                                                                                                                                                                                                                                               -1
                                                                                                                                                                                                                                                               "LAMBDA (k: below(M`cols)): M`matrix(x!2, k) * x(k)"
                                                                                                                                                                                                                                                               "LAMBDA (k_1: below(n)): x(k_1) * M`matrix(x!2, k_1)"
                                                                                                                                                                                                                                                               "n-1"
                                                                                                                                                                                                                                                               "0")
                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                  (reveal
                                                                                                                                                                                                                                                                   -35)
                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                      (decompose-equality
                                                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                                                         x!2)
                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                    (skeep)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (typepred
                                                                                                                                                                                                                                         M)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                   ("3"
                                                                                                                                                                                                                                    (skeep)
                                                                                                                                                                                                                                    (("3"
                                                                                                                                                                                                                                      (skeep)
                                                                                                                                                                                                                                      (("3"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (hide
                                                                                                                                                                                                           2)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             V2Ml)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         V2Ml)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (typepred
                                                                                                                                                                                       Q)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         squareMat?)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             square?)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (hide-all-but
                                                                                                                                                                             1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               V2Ml)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         V2Ml)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       V2Ml)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (typepred
                                                                                                                                                     Q)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       squareMat?)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         square?)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("3"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               V2Ml)
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     I)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           V2Ml)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (typepred
                                                                                                                                               Q)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 square?)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   squareMat?)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (typepred
                                                                                                                                     Q)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       square?)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         squareMat?)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             V2Ml)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         Q)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           square?)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             squareMat?)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   V2Ml)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   Q)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     square?)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       squareMat?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             V2Ml)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (typepred Q)
                (("3" (expand square?)
                  (("3" (expand squareMat?)
                    (("3" (assert)
                      (("3" (hide-all-but 1)
                        (("3" (expand transpose)
                          (("3" (expand Zero_mat)
                            (("3" (expand *)
                              (("3"
                                (expand V2Ml)
                                (("3"
                                  (expand I)
                                  (("3"
                                    (typepred Q)
                                    (("3"
                                      (expand square?)
                                      (("3"
                                        (expand squareMat?)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (expand Block2M)
                                            (("3"
                                              (expand M2Block)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide-all-but 1)
                (("4" (expand Block2M)
                  (("4" (expand M2Block)
                    (("4" (expand transpose)
                      (("4" (expand Zero_mat)
                        (("4" (expand V2Ml)
                          (("4" (expand I) (("4" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (Q skolem-const-decl "SquareMat(n)" ellipsoid nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (M skolem-const-decl "Mat(m, n)" ellipsoid nil)
    (Mat type-eq-decl nil matrices nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (m skolem-const-decl "posnat" ellipsoid nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semidef_qua_trans formula-decl nil posdef nil)
    (symetric_qua_trans formula-decl nil posdef nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (Zero type-eq-decl nil matrices nil)
    (zero? const-decl "bool" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (transpose const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "Matrix" matrices nil)
    (x skolem-const-decl "Vector[n]" ellipsoid nil)
    (conv_mult formula-decl nil block_matrices nil)
    (zero_row formula-decl nil matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (zero_col formula-decl nil matrices nil)
    (transpose_eq formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (zero_trans formula-decl nil matrices nil)
    (zero_times_left formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil)
    (add_dim_row formula-decl nil matrices nil)
    (right_mult_ident formula-decl nil matrices nil)
    (zero_times_right formula-decl nil matrices nil)
    (sigma_diff_eq formula-decl nil sigma_below_sub "reals/")
    (sigma_trick formula-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "nat" ellipsoid nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (y skolem-const-decl "Vector[m]" ellipsoid nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_times_right_1 formula-decl nil matrices nil)
    (zero_left_ident formula-decl nil matrices nil)
    (zero_right_ident formula-decl nil matrices nil)
    (left_mult_ident formula-decl nil matrices nil)
    (ident_trans formula-decl nil matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (conv_transp formula-decl nil block_matrices nil)
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (ellipsoid_equivalence_TCC1 0
  (ellipsoid_equivalence_TCC1-1 nil 3636905314
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (invertible? const-decl "bool" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (inverse? const-decl "bool" matrices nil)
    (inverse const-decl "{N: Square | N`rows = M`rows}" matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (ellipsoid_equivalence 0
  (ellipsoid_equivalence-1 nil 3636905314
   ("" (skeep)
    (("" (expand in_ellipsoid_Q?)
      (("" (expand in_ellipsoid_P?)
        (("" (bddsimp)
          (("1" (lemma schur_semidef_2)
            (("1" (inst -1 1 n "I(1)" "V2Ml(n,x)" "inverse(P)")
              (("1" (assert)
                (("1" (rewrite inverse_invertible)
                  (("1" (expand symmetric? -1 1)
                    (("1" (expand square? -1)
                      (("1" (expand I -1 (1 2 3 4))
                        (("1" (expand transpose -1 1)
                          (("1"
                            (lemma "matrix_lemmas.inverse_invertible")
                            (("1" (inst -1 P)
                              (("1"
                                (rewrite semidefpos_inv_defpos)
                                (("1"
                                  (rewrite inverse2)
                                  (("1"
                                    (lemma mult_assoc)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 -3 rl)
                                        (("1"
                                          (rewrite v2ml_quad)
                                          (("1"
                                            (case "I(1) = 1 * I(1)")
                                            (("1"
                                              (expand I -1 1)
                                              (("1"
                                                (expand I -4 1)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (lemma
                                                     scal_dist_left)
                                                    (("1"
                                                      (lemma minuses)
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           *
                                                           rl)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (rewrite
                                                               minus_scal)
                                                              (("1"
                                                                (rewrite
                                                                 scal_assoc)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     1
                                                                     1
                                                                     1
                                                                     "(-1) * (x * (P * x))"
                                                                     "I(1)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -4
                                                                       rl)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-4
                                                                            1))
                                                                          (("1"
                                                                            (expand
                                                                             semidef_pos?)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "const_vec[1](1)")
                                                                              (("1"
                                                                                (expand
                                                                                 *
                                                                                 -1
                                                                                 (1
                                                                                  4
                                                                                  5))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     sigma)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         const_vec)
                                                                                        (("1"
                                                                                          (expand
                                                                                           I)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (typepred P)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (typepred P)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "symmetric?(inverse(inverse(P)))")
            (("1" (rewrite inverse2) nil nil)
             ("2" (rewrite sym_inv) nil nil)
             ("3" (rewrite inverse_invertible) nil nil))
            nil)
           ("3" (case "def_pos?(inverse(P))")
            (("1" (lemma posdef_inv)
              (("1" (inst -1 n "inverse(P)")
                (("1" (rewrite inverse_invertible)
                  (("1" (assert) (("1" (rewrite inverse2) nil nil))
                    nil))
                  nil)
                 ("2" (expand squareMat? 1)
                  (("2" (rewrite inverse_rows)
                    (("2" (assert)
                      (("2" (typepred P)
                        (("2" (expand squareMat? -2)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma semidefpos_inv_defpos)
              (("2" (inst -1 "inverse(P)")
                (("1" (assert) nil nil)
                 ("2" (rewrite inverse_invertible) nil nil))
                nil))
              nil))
            nil)
           ("4" (lemma schur_semidef_2)
            (("4" (inst -1 1 n "I(1)" "V2Ml(n,x)" "inverse(P)")
              (("4" (assert)
                (("4" (rewrite inverse_invertible)
                  (("4" (rewrite sym_inv)
                    (("4" (bddsimp -1)
                      (("1" (hide 2)
                        (("1" (rewrite inverse2)
                          (("1" (lemma mult_assoc)
                            (("1" (inst? -1)
                              (("1"
                                (replace -1 1 rl)
                                (("1"
                                  (rewrite v2ml_quad)
                                  (("1"
                                    (case "I(1) = 1*I(1)")
                                    (("1"
                                      (expand I -1 1)
                                      (("1"
                                        (expand I 1 1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lemma minuses)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (rewrite
                                                     minus_scal
                                                     1)
                                                    (("1"
                                                      (rewrite
                                                       scal_assoc)
                                                      (("1"
                                                        (lemma
                                                         scal_dist_left)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           1
                                                           1
                                                           1
                                                           "((-1) * (x * (P * x)))"
                                                           "I(1)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               semidef_scal)
                                                              (("1"
                                                                (expand
                                                                 square?)
                                                                (("1"
                                                                  (expand
                                                                   I
                                                                   1
                                                                   (1
                                                                    2))
                                                                  (("1"
                                                                    (lemma
                                                                     def_pos_id)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (rewrite
                                                                         def_pos_semidef_pos)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (typepred P)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (typepred P)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite posdef_inveq) nil nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (rewrite sym_inv) nil nil)
           ("6" (rewrite def_pos_semidef_pos)
            (("6" (rewrite posdef_inv) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (invertible? const-decl "bool" matrices nil)
    (inverse const-decl "{N: Square | N`rows = M`rows}" matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (inverse_invertible formula-decl nil matrix_lemmas nil)
    (transpose const-decl "Matrix" matrices nil)
    (inverse2 formula-decl nil matrix_lemmas nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (P skolem-const-decl "SquareMat(n)" ellipsoid nil)
    (v2ml_col formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (v2ml_quad formula-decl nil matrices nil)
    (minuses formula-decl nil matrices nil)
    (minus_scal formula-decl nil matrices nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (const_vec const-decl "Vector" vectors "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_0_neg formula-decl nil sigma_below "reals/")
    (sigma def-decl "real" sigma "reals/")
    (semidef_pos? const-decl "bool" posdef nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_assoc formula-decl nil matrices nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (scal_dist_left formula-decl nil matrices nil)
    (* const-decl "Matrix" matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_assoc formula-decl nil matrices nil)
    (semidefpos_inv_defpos formula-decl nil posdef nil)
    (symmetric? const-decl "bool" matrices nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (schur_semidef_2 formula-decl nil posdef nil)
    (sym_inv formula-decl nil matrix_lemmas nil)
    (posdef_inv formula-decl nil posdef nil)
    (inverse_rows formula-decl nil matrix_lemmas nil)
    (def_pos? const-decl "bool" posdef nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (semidef_scal formula-decl nil posdef nil)
    (def_pos_semidef_pos formula-decl nil posdef nil)
    (def_pos_id formula-decl nil posdef nil)
    (posdef_inveq formula-decl nil posdef nil)
    (in_ellipsoid_P? const-decl "bool" ellipsoid nil))
   shostak))
 (ellipsoid_combination_TCC1 0
  (ellipsoid_combination_TCC1-1 nil 3560099992 ("" (tcc))
   ((squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil))
   nil))
 (ellipsoid_combination_TCC2 0
  (ellipsoid_combination_TCC2-1 nil 3560099992 ("" (tcc))
   ((squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil))
   nil))
 (ellipsoid_combination_TCC3 0
  (ellipsoid_combination_TCC3-1 nil 3560099992 ("" (grind) nil nil)
   ((sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (ellipsoid_combination_TCC4 0
  (ellipsoid_combination_TCC4-1 nil 3560099992 ("" (tcc))
   ((* const-decl "Matrix" matrices nil)) nil))
 (ellipsoid_combination_TCC5 0
  (ellipsoid_combination_TCC5-1 nil 3560099992 ("" (tcc))
   ((Zero_mat const-decl "Zero" matrices nil)) nil))
 (ellipsoid_combination_TCC6 0
  (ellipsoid_combination_TCC6-1 nil 3560099992 ("" (tcc))
   ((Zero_mat const-decl "Zero" matrices nil)) nil))
 (ellipsoid_combination_TCC7 0
  (ellipsoid_combination_TCC7-1 nil 3560099992 ("" (tcc))
   ((* const-decl "Matrix" matrices nil)) nil))
 (ellipsoid_combination_TCC8 0
  (ellipsoid_combination_TCC8-1 nil 3560099992 ("" (grind) nil nil)
   ((sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (* const-decl "Matrix" matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (ellipsoid_combination 0
  (ellipsoid_combination-4 nil 3599412783
   ("" (skeep)
    (("" (expand in_ellipsoid_Q?)
      (("" (flatten)
        (("" (assert)
          (("" (split)
            (("1" (hide-all-but (1 -1 -4))
              (("1" (expand semidef_pos?)
                (("1" (skeep)
                  (("1" (lemma split_vect)
                    (("1" (inst -1 "n+m" "x!1" "n")
                      (("1" (assert)
                        (("1" (skeep -1)
                          (("1" (lemma semidef_scal)
                            (("1" (inst-cp -1 "1/lambda_1" "Q_1")
                              (("1"
                                (inst -1 "1/lambda_2" "Q_2")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma block_mult_comm)
                                      (("1"
                                        (inst
                                         -1
                                         "M2Block(n, m, n, m)
                                                     (1 / lambda_1 * Q_1, Zero_mat(m, n), Zero_mat(n, m),
                                                      1 / lambda_2 * Q_2)"
                                         "BV2toBV1((# comp1 := n,
                                                           comp2 := m,
                                                           vector1 := x!2,
                                                           vector2 := y!1 #))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 block_v_mult_comm)
                                                (("1"
                                                  (inst
                                                   -1
                                                   n
                                                   m
                                                   "BV2toBV1((# comp1 := n,
                                                              comp2 := m,
                                                              vector1 := x!2,
                                                              vector2 := y!1 #))"
                                                   "BV2toBV1(M2Block(n, m, n, m)
                                                                   (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                                                    Zero_mat(n, m), 1 / lambda_2 * Q_2)
                                                             *
                                                             BV2toBV1((# comp1 := n,
                                                                         comp2 := m,
                                                                         vector1 := x!2,
                                                                         vector2 := y!1 #)))")
                                                  (("1"
                                                    (expand * -1 1)
                                                    (("1"
                                                      (expand * 1 1)
                                                      (("1"
                                                        (lemma
                                                         "sigma_below_sub[BV2toBV1((# comp1 := n,
                                                                                 comp2 := m,
                                                                                 vector1 := x!2,
                                                                                 vector2 := y!1 #))`comp1
                                                                      +
                                                                      BV2toBV1((# comp1 := n,
                                                                                  comp2 := m,
                                                                                  vector1 := x!2,
                                                                                  vector2 := y!1 #))`comp2,Block2M(M2Block(n, m, n, m)
                                                                                    (1 / lambda_1 * Q_1,
                                                                                     Zero_mat(m, n), Zero_mat(n, m),
                                                                                     1 / lambda_2 * Q_2))`rows].sigma_diff_eq")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             Block2M
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               M2Block
                                                               1
                                                               (1 2))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   BV2toBV1
                                                                   -1
                                                                   (1
                                                                    2))
                                                                  (("1"
                                                                    (expand
                                                                     BV2toBV1
                                                                     -2
                                                                     (1
                                                                      2))
                                                                    (("1"
                                                                      (typepred
                                                                       Q_1)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "LAMBDA (i:
                                                                Index
                                                                    [BV2toBV1((# comp1 := n,
                                                                                 comp2 := m,
                                                                                 vector1 := x!2,
                                                                                 vector2 := y!1 #))`comp1
                                                                      +
                                                                      BV2toBV1((# comp1 := n,
                                                                                  comp2 := m,
                                                                                  vector1 := x!2,
                                                                                  vector2 := y!1 #))`comp2]):
                                                        Block2V(BV2toBV1((# comp1 := n,
                                                                            comp2 := m,
                                                                            vector1 := x!2,
                                                                            vector2 := y!1 #)))
                                                               (i)
                                                         *
                                                         Block2V(BV2toBV1(M2Block(n, m, n, m)
                                                                                 (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                                                                  Zero_mat(n, m), 1 / lambda_2 * Q_2)
                                                                           *
                                                                           BV2toBV1((# comp1 := n,
                                                                                       comp2 := m,
                                                                                       vector1 := x!2,
                                                                                       vector2 := y!1 #))))
                                                                (i)"
                                                                             "LAMBDA (i:
                                                                Index
                                                                    [Block2M(M2Block(n, m, n, m)
                                                                                    (1 / lambda_1 * Q_1,
                                                                                     Zero_mat(m, n), Zero_mat(n, m),
                                                                                     1 / lambda_2 * Q_2))`rows]):
                                                        Block2V(BV2toBV1((# comp1 := n,
                                                                            comp2 := m,
                                                                            vector1 := x!2,
                                                                            vector2 := y!1 #)))
                                                               (i)
                                                         *
                                                         Block2V(BV2toBV1(M2Block(n, m, n, m)
                                                                                 (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                                                                  Zero_mat(n, m), 1 / lambda_2 * Q_2)
                                                                           *
                                                                           BV2toBV1((# comp1 := n,
                                                                                       comp2 := m,
                                                                                       vector1 := x!2,
                                                                                       vector2 := y!1 #))))
                                                                (i)"
                                                                             "m+n-1"
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 Block2M
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   M2Block
                                                                                   -1
                                                                                   (1
                                                                                    2))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             *
                                                                                             1
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 *
                                                                                                 1
                                                                                                 4)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     *
                                                                                                     1
                                                                                                     8)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           semidef_pos?)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             y!1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               x!2)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   *
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       +
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           BV2toBV1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             Zero_mat
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               *
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 *
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -3
                                                                                                                                   -4
                                                                                                                                   -5)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       Q_1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               Q_2)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -1
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma_below_sub[(1 / lambda_2 * Q_2)`rows, BV2toBV1((# comp1 := n,
                                                                                                    comp2 := m,
                                                                                                    vector1 := x!2,
                                                                                                    vector2 := y!1 #))`comp2].sigma_diff_eq")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "LAMBDA (i_1: Index[(1 / lambda_2 * Q_2)`rows]):
                                                                          y!1(i_1) *
                                                                           sigma[below(Q_2`cols)]
                                                                               (0, m - 1,
                                                                                LAMBDA (k: below(Q_2`cols)):
                                                                                  y!1(k) * Q_2`matrix(i_1, k) * (1 / lambda_2))"
                                                                                                                                                         " LAMBDA (i_1:
                                                                                   Index
                                                                                       [BV2toBV1((# comp1 := n,
                                                                                                    comp2 := m,
                                                                                                    vector1 := x!2,
                                                                                                    vector2 := y!1 #))`comp2]):
                                                                           y!1(i_1) *
                                                                            sigma[below(Zero_mat(m, n)`cols)]
                                                                                (0, n - 1,
                                                                                 LAMBDA (k: below(Zero_mat(m, n)`cols)): 0 * x!2(k))
                                                                            +
                                                                            y!1(i_1) *
                                                                             sigma[below(Q_2`cols)]
                                                                                 (0, m - 1,
                                                                                  LAMBDA (k: below(Q_2`cols)):
                                                                                    y!1(k) * Q_2`matrix(i_1, k) * (1 / lambda_2))"
                                                                                                                                                         "m-1"
                                                                                                                                                         "0")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (bddsimp
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1
                                                                                                                                                               1
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma_below_sub[(1 / lambda_1 * Q_1)`rows,BV2toBV1((# comp1 := n,
                                                                                                               comp2 := m,
                                                                                                               vector1 := x!2,
                                                                                                               vector2 := y!1 #))`comp1].sigma_diff_eq")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "LAMBDA (i_1: Index[(1 / lambda_1 * Q_1)`rows]):
                                                                                      x!2(i_1) *
                                                                                       sigma[below(Q_1`cols)]
                                                                                           (0, n - 1,
                                                                                            LAMBDA (k: below(Q_1`cols)):
                                                                                              x!2(k) * Q_1`matrix(i_1, k) * (1 / lambda_1))"
                                                                                                                                                                     "LAMBDA (i_1:
                                                                                              Index
                                                                                                  [BV2toBV1((# comp1 := n,
                                                                                                               comp2 := m,
                                                                                                               vector1 := x!2,
                                                                                                               vector2 := y!1 #))`comp1]):
                                                                                      x!2(i_1) *
                                                                                       sigma[below(Q_1`cols)]
                                                                                           (0, n - 1,
                                                                                            LAMBDA (k: below(Q_1`cols)):
                                                                                              x!2(k) * Q_1`matrix(i_1, k) * (1 / lambda_1))
                                                                                       +
                                                                                       x!2(i_1) *
                                                                                        sigma[below(Zero_mat(n, m)`cols)]
                                                                                            (0, m - 1,
                                                                                             LAMBDA (k: below(Zero_mat(n, m)`cols)): 0 * y!1(k))"
                                                                                                                                                                     "n-1"
                                                                                                                                                                     "0")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           BV2toBV1
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(Zero_mat(n,m)`cols)].sigma_zero")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -3
                                                                                                                                                                                 -4)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("4"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("4"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("5"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("5"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("6"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("6"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("7"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("7"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("8"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("8"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("9"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("9"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (grind)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma[below((Zero_mat(m, n)`cols))].sigma_zero")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("3"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("4"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("4"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("5"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("5"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("6"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("6"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("7"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("7"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("8"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("8"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("9"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("9"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (hide-all-but 1)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred Q_2)
                                    (("2"
                                      (expand square?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand square?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand Block2M 1)
                          (("2" (expand M2Block 1)
                            (("2" (assert)
                              (("2"
                                (typepred Q_1)
                                (("2"
                                  (replace -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (case "Bsymmetric?(M2Block(n, m, n, m)
                                                           (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                                            Zero_mat(n, m), 1 / lambda_2 * Q_2))")
              (("1" (expand Bsymmetric?) (("1" (propax) nil nil)) nil)
               ("2" (hide 2)
                (("2" (lemma block_symmetric)
                  (("2" (inst? -1)
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (lemma symmetric_scal)
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (lemma symmetric_scal)
                                (("2"
                                  (hide-all-but (-1 1))
                                  (("2"
                                    (inst? -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -1 -2 -4 -5)
              (("3"
                (case "Block2M(M2Block(1, m + n, 1, m + n)
                                                             (I(1), transpose(V2Ml(m + n, z)),
                                                              V2Ml(m + n, z),
                                                              Block2M(M2Block(n, m, n, m)
                                                                             (1 / lambda_1 * Q_1,
                                                                              Zero_mat(m, n),
                                                                              Zero_mat(n, m),
                                                                              1 / lambda_2 * Q_2)))) = Block2M(M2Block(1, m + n, 1, m + n)
                                                             (lambda_1*I(1), transpose(V2Ml(m + n, Block2V(V2Block(n,m)(x,vectors[m].zero)))),
                                                              V2Ml(m + n, Block2V(V2Block(n,m)(x,vectors[m].zero))),
                                                              Block2M(M2Block(n, m, n, m)
                                                                             (1 / lambda_1 * Q_1,
                                                                              Zero_mat(m, n),
                                                                              Zero_mat(n, m),
                                                                              Zero_mat(m,m))))) + Block2M(M2Block(1, m + n, 1, m + n)
                                                             (lambda_2*I(1), transpose(V2Ml(m + n, Block2V(V2Block(n,m)(vectors[n].zero,y)))),
                                                              V2Ml(m + n, Block2V(V2Block(n,m)(vectors[n].zero,y))),
                                                              Block2M(M2Block(n, m, n, m)
                                                                             (Zero_mat(n,n),
                                                                              Zero_mat(m, n),
                                                                              Zero_mat(n, m),
                                                                              1 / lambda_2 * Q_2))))")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (lemma semidef_sum)
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1"
                              (case "Block2M(M2Block(1, m + n, 1, m + n)
                                                                          (lambda_1 * I(1),
                                                                           transpose(V2Ml(m + n,
                                                                                          Block2V(V2Block
                                                                                                  (n, m)
                                                                                                  (x,
                                                                                                   vectors
                                                                                                   [m].zero)))),
                                                                           V2Ml(m + n,
                                                                                Block2V(V2Block(n, m)
                                                                                               (x,
                                                                                                vectors[m].zero))),
                                                                           Block2M(M2Block(n, m, n, m)
                                                                                          (1 / lambda_1 * Q_1,
                                                                                           Zero_mat(m, n),
                                                                                           Zero_mat(n, m),
                                                                                           Zero_mat(m, m)))))=
                                        Block2M(M2Block(1,m+n,1,n)(sqrt(lambda_1)*I(1),Zero_mat(m+n,1),Zero_mat(1,n),
                                        concat_V(1/sqrt(lambda_1)*I(n),Zero_mat(m,n))))*Block2M(M2Block(1, n, 1, n)
                                                                          (I(1), transpose(V2Ml(n, x)), V2Ml(n, x),
                                                                           Q_1))*transpose(Block2M(M2Block(1,m+n,1,n)(sqrt(lambda_1)*I(1),Zero_mat(m+n,1),Zero_mat(1,n),
                                        concat_V(1/sqrt(lambda_1)*I(n),Zero_mat(m,n))))) AND
                                        Block2M(M2Block(1, m + n, 1, m + n)
                                                                           (lambda_2 * I(1),
                                                                            transpose(V2Ml(m + n,
                                                                                           Block2V(V2Block
                                                                                                   (n, m)
                                                                                                   (vectors
                                                                                                    [n].zero,
                                                                                                    y)))),
                                                                            V2Ml(m + n,
                                                                                 Block2V(V2Block(n, m)
                                                                                                (vectors[n].zero,
                                                                                                 y))),
                                                                            Block2M(M2Block(n, m, n, m)
                                                                                           (Zero_mat(n, n),
                                                                                            Zero_mat(m, n),
                                                                                            Zero_mat(n, m),
                                                                                            1 / lambda_2 * Q_2)))) =
                                        Block2M(M2Block(1,m+n,1,m)(sqrt(lambda_2)*I(1),Zero_mat(m+n,1),Zero_mat(1,m),concat_V(Zero_mat(n,m),1/sqrt(lambda_2)*I(m))))*Block2M(M2Block(1, m, 1, m)
                                                                          (I(1), transpose(V2Ml(m, y)), V2Ml(m, y),
                                                                           Q_2)) * transpose(Block2M(M2Block(1,m+n,1,m)(sqrt(lambda_2)*I(1),Zero_mat(m+n,1),Zero_mat(1,m),concat_V(Zero_mat(n,m),1/sqrt(lambda_2)*I(m)))))")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (lemma semidef_qua_trans)
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (lemma semidef_qua_trans)
                                            (("1"
                                              (inst
                                               -1
                                               "Block2M(M2Block(1, m, 1, m)
                                                                      (I(1), transpose(V2Ml(m, y)), V2Ml(m, y),
                                                                       Q_2))"
                                               "Block2M(M2Block(1, m + n, 1, m)
                                                                       (sqrt(lambda_2) * I(1),
                                                                        Zero_mat(m + n, 1), Zero_mat(1, m),
                                                                        concat_V(Zero_mat(n, m),
                                                                                 1/sqrt(lambda_2) * I(m))))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand Block2M 1)
                                                  (("2"
                                                    (expand M2Block)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand Block2M)
                                              (("2"
                                                (expand M2Block)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -1 -2)
                                    (("2"
                                      (lemma trans_conv)
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (lemma trans_conv)
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       conv_transp)
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (lemma
                                                                 conv_transp)
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           M2Block
                                                                           1
                                                                           (5
                                                                            6
                                                                            7
                                                                            8
                                                                            13
                                                                            14
                                                                            15
                                                                            16))
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   eq_block)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               right_mult_ident)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "sqrt(lambda_1)*I(1)"
                                                                                                 "I(1)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     zero_times_left_1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "1"
                                                                                                       "transpose(V2Ml(n,x))")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         V2Ml
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           transpose
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 zero_times_left_1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   "Q_1")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     Q_1)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -3)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               zero_times_right)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 zero_times_right_1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "1"
                                                                                                                                   "sqrt(lambda_1) * I(1) * V2Ml(n, x)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         transpose)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           *)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             I)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               sigma)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               zero_times_left_1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "m+n"
                                                                                                 "I(1)")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   I
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         zero_times_left_1)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "m"
                                                                                                           "transpose(V2Ml(n,x))")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             transpose
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               V2Ml
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   zero_times_right_1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     1
                                                                                                                     "(Zero_mat(m + n, 1) * V2Ml(n, x) +
                                                    concat_V(1 / sqrt(lambda_1) * I(n), Zero_mat(m, n)) * Q_1)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           transpose)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             V2Ml)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               Block2V)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 V2Block)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   *)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     I)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         sigma
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (apply-extensionality
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 x!1<n)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     concat_V)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "sigma[below(concat_V(I(n)
                                                                                   WITH [`matrix
                                                                                           := LAMBDA (i: below(I(n)`rows),
                                                                                                      j: below(I(n)`cols)):
                                                                                                1 / sqrt(lambda_1) *
                                                                                                 I(n)`matrix(i, j)],
                                                                                 Zero_mat(m, n))`cols)].sigma_middle")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "LAMBDA (k:
                                                                                  below(concat_V(I(n)
                                                                                                   WITH [`matrix
                                                                                                           := LAMBDA (i:
                                                                                                                      below(I(n)`rows),
                                                                                                                      j:
                                                                                                                      below(I
                                                                                                                            (n)`cols)):
                                                                                                                1 / sqrt(lambda_1) *
                                                                                                                 I(n)`matrix(i, j)],
                                                                                                 Zero_mat(m, n))`cols)):
                                                                          x(k) * (1 / sqrt(lambda_1)) * IF x!1 = k THEN 1 ELSE 0 ENDIF"
                                                                                                                                                           "n-1"
                                                                                                                                                           "x!1"
                                                                                                                                                           "0")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma[below(concat_V(I(n)
                                                                                               WITH [`matrix
                                                                                                       := LAMBDA (i: below(I(n)`rows),
                                                                                                                  j: below(I(n)`cols)):
                                                                                                            1 / sqrt(lambda_1) *
                                                                                                             I(n)`matrix(i, j)],
                                                                                             Zero_mat(m, n))`cols)].sigma_restrict_eq_0")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(concat_V(I(n)
                                                                                                           WITH [`matrix
                                                                                                                   := LAMBDA (i: below(I(n)`rows),
                                                                                                                              j: below(I(n)`cols)):
                                                                                                                        1 / sqrt(lambda_1) *
                                                                                                                         I(n)`matrix(i, j)],
                                                                                                         Zero_mat(m, n))`cols)].sigma_restrict_eq_0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide-all-but
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       x!1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         V2Ml)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (reveal
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "sigma[below(concat_V(I(n)
                                                                                   WITH [`matrix
                                                                                           := LAMBDA (i: below(I(n)`rows),
                                                                                                      j: below(I(n)`cols)):
                                                                                                1 / sqrt(lambda_1) *
                                                                                                 I(n)`matrix(i, j)],
                                                                                 Zero_mat(m, n))`cols)].sigma_zero")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("3"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("4"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("4"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("5"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("5"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (lemma
                                                                                             zero_times_right_1)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "m+n"
                                                                                               "(sqrt(lambda_1) * I(1) * I(1) +
                                                   Zero_mat(1, n) * transpose(V2Ml(n, x)))")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 *
                                                                                                 -1
                                                                                                 (5
                                                                                                  6
                                                                                                  7))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   I
                                                                                                   -1
                                                                                                   (3
                                                                                                    4))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     +
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           zero_times_left_1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "1"
                                                                                                             "transpose(V2Ml(n,x))")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               transpose
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 V2Ml
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       zero_times_right_1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "m+n"
                                                                                                                         "sqrt(lambda_1) * I(1) * I(1)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           *
                                                                                                                           -1
                                                                                                                           (4
                                                                                                                            5))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             I
                                                                                                                             -1
                                                                                                                             (3
                                                                                                                              4))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 zero_times_left_1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "1"
                                                                                                                                   "Q_1")
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     Q_1)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -3)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 zero_times_right_1)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "m+n"
                                                                                                                                                   "sqrt(lambda_1) * matrices.I(1) * matrices.I(1)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         transpose)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           I)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             V2Ml)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               Block2V)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 V2Block)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   concat_V)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     Zero_mat)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       *)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (decompose-equality)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             x!2<n)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 sigma
                                                                                                                                                                                 1
                                                                                                                                                                                 2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "sigma[below(n)].sigma_middle")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -1
                                                                                                                                                                                         "x!2")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst?
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                               "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst?
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (grind)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "sigma[below(n)].sigma_zero")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               zero_times_left_1)
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 zero_times_right_1)
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "m+n"
                                                                                                   "(matrices.+)
                                                               (matrices.*
                                                                    (matrices.Zero_mat(m + n, 1), matrices.I(1)),
                                                                matrices.*
                                                                    (matrices.concat_V
                                                                         (matrices.*
                                                                              (1 / reals@sqrt.sqrt(lambda_1),
                                                                               matrices.I(n)),
                                                                          matrices.Zero_mat(m, n)),
                                                                     matrices.transpose(V2Ml(n, x))))")
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        (("4"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "m+n"
                                                                                                             "V2Ml(n,x)")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              (("4"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("4"
                                                                                                                  (assert)
                                                                                                                  (("4"
                                                                                                                    (expand
                                                                                                                     Block2M)
                                                                                                                    (("4"
                                                                                                                      (expand
                                                                                                                       M2Block)
                                                                                                                      (("4"
                                                                                                                        (expand
                                                                                                                         Zero_mat)
                                                                                                                        (("4"
                                                                                                                          (expand
                                                                                                                           I)
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             concat_V)
                                                                                                                            (("4"
                                                                                                                              (expand
                                                                                                                               transpose)
                                                                                                                              (("4"
                                                                                                                                (expand
                                                                                                                                 *)
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  (("4"
                                                                                                                                    (hide
                                                                                                                                     -1
                                                                                                                                     -2
                                                                                                                                     -3)
                                                                                                                                    (("4"
                                                                                                                                      (apply-extensionality)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "x!1<Q_1`rows")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "x!2<Q_1`cols")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   " sigma[below(Q_1`cols)].sigma_middle")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "x!2")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 " sigma[below(n)].sigma_middle")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       -2)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst?
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                   "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (inst?
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (grind)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "sigma[below(Q_1`cols)].sigma_zero")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (case
                                                                                                                                                 x!2<n)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "sigma[below(n)].sigma_zero")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       x!2=i)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "sigma[below(Q_1`cols)].sigma_zero")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("3"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("4"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("4"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 eq_block)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           zero_times_left_1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "1"
                                                                                             " transpose(V2Ml(m, y))")
                                                                                            (("1"
                                                                                              (expand
                                                                                               transpose
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 V2Ml
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       zero_times_right_1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "1"
                                                                                                         "(matrices.+)
                                                               (matrices.*
                                                                    (matrices.*
                                                                         (reals@sqrt.sqrt(lambda_2), matrices.I(1)),
                                                                     V2Ml(m, y)),
                                                                matrices.*(matrices.Zero_mat(1, m), Q_2))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               *)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 I)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   transpose)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       sigma)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             zero_times_left_1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "m+n"
                                                                                               "I(1)")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 I
                                                                                                 -1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       zero_times_left_1)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "m"
                                                                                                         "transpose(V2Ml(m,y))")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           transpose
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             V2Ml
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 zero_times_right_1)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   "(Zero_mat(m + n, 1) * V2Ml(m, y) +
                                                                 concat_V(Zero_mat(n, m),1/ sqrt(lambda_2) * I(m)) * Q_2)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1
                                                                                                                       -2
                                                                                                                       -3
                                                                                                                       -4
                                                                                                                       -5)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         transpose)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           V2Ml)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             Block2V)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               V2Block)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 *)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   I)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       sigma
                                                                                                                                       1
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (apply-extensionality
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               concat_V)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   x!1<n)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       Zero_mat)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "sigma[below(concat_V(Zero_mat(n, m),
                                                                                 I(m)
                                                                                   WITH [`matrix
                                                                                           := LAMBDA (i: below(I(m)`rows),
                                                                                                      j: below(I(m)`cols)):
                                                                                                1/sqrt(lambda_2) *
                                                                                                 I(m)`matrix(i, j)])`cols)].sigma_zero")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma[below(concat_V(Zero_mat(n, m),
                                                                                 I(m)
                                                                                   WITH [`matrix
                                                                                           := LAMBDA (i: below(I(m)`rows),
                                                                                                      j: below(I(m)`cols)):
                                                                                                1/sqrt(lambda_2) *
                                                                                                 I(m)`matrix(i, j)])`cols)].sigma_middle")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "x!1-n")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (bddsimp
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "sigma[below(concat_V(Zero_mat(n, m),
                                                                                                         I(m)
                                                                                                           WITH [`matrix
                                                                                                                   := LAMBDA (i: below(I(m)`rows),
                                                                                                                              j: below(I(m)`cols)):
                                                                                                                        1/sqrt(lambda_2) *
                                                                                                                         I(m)`matrix(i, j)])`cols)].sigma_restrict_eq_0")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst?
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "sigma[below(concat_V(Zero_mat(n, m),
                                                                                                                     I(m)
                                                                                                                       WITH [`matrix
                                                                                                                               := LAMBDA (i: below(I(m)`rows),
                                                                                                                                          j: below(I(m)`cols)):
                                                                                                                                    1/sqrt(lambda_2) *
                                                                                                                                     I(m)`matrix(i, j)])`cols)].sigma_restrict_eq_0")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (hide-all-but
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (grind)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (grind)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide-all-but
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (typepred
                                                                                                                                                                   x!1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     V2Ml
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (typepred
                                                                                                                                                               x!1)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 V2Ml
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("3"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("4"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("5"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("5"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (lemma
                                                                                           zero_times_right_1)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -1
                                                                                             "m+n"
                                                                                             "(sqrt(lambda_2) * I(1) * I(1) +
                                                   Zero_mat(1, m) * transpose(V2Ml(m, y)))")
                                                                                            (("1"
                                                                                              (expand
                                                                                               *
                                                                                               -1
                                                                                               (5
                                                                                                6
                                                                                                7))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 I
                                                                                                 -1
                                                                                                 (3
                                                                                                  4))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   +
                                                                                                   -1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         zero_times_left_1)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "1"
                                                                                                           "transpose(V2Ml(m,y))")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             transpose
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               V2Ml
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     zero_times_right_1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "m+n"
                                                                                                                       "sqrt(lambda_2) * I(1) * I(1)")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         *
                                                                                                                         -1
                                                                                                                         (4
                                                                                                                          5))
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           I
                                                                                                                           -1
                                                                                                                           (3
                                                                                                                            4))
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               zero_times_left_1)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "1"
                                                                                                                                 "Q_2")
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   Q_1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         zero_times_right_1)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "m+n"
                                                                                                                                           "sqrt(lambda_1) * matrices.I(1) * matrices.I(1)")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 zero_times_right_1)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "m+n"
                                                                                                                                                   "matrices.*(matrices.*(reals@sqrt.sqrt(lambda_2), matrices.I(1)),
                      matrices.I(1))")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       zero_times_left_1)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         1
                                                                                                                                                         "Q_2")
                                                                                                                                                        (("1"
                                                                                                                                                          (typepred
                                                                                                                                                           Q_2)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1
                                                                                                                                                                 -2
                                                                                                                                                                 -3
                                                                                                                                                                 -4)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   V2Ml)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     Block2V)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       V2Block)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         I)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           concat_V)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             transpose)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               *)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (apply-extensionality)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (case
                                                                                                                                                                                       x!2<n)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           sigma
                                                                                                                                                                                           1
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               Zero_mat)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "sigma[below(m)].sigma_zero")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (inst?
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           sigma
                                                                                                                                                                                           2
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "       sigma[below(m)].sigma_middle")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst?
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     "x!2-n")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                               "       sigma[below(m)].sigma_restrict_eq_0")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst?
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                           "       sigma[below(m)].sigma_restrict_eq_0")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (inst?
                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (grind)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("3"
                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (grind)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("4"
                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("4"
                                                                                                                                                                                      (grind)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("5"
                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("5"
                                                                                                                                                                                      (grind)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (lemma
                                                                                             zero_times_right_1)
                                                                                            (("4"
                                                                                              (inst
                                                                                               -1
                                                                                               "m+n"
                                                                                               "(matrices.+)
                     (matrices.*
                          (matrices.Zero_mat(m + n, 1), matrices.I(1)),
                      matrices.*
                          (matrices.concat_V
                               (matrices.Zero_mat(n, m),
                                matrices.*
                                    (1 / reals@sqrt.sqrt(lambda_2),
                                     matrices.I(m))),
                           matrices.transpose(V2Ml(m, y))))")
                                                                                              (("4"
                                                                                                (assert)
                                                                                                (("4"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("4"
                                                                                                        (lemma
                                                                                                         zero_times_left_1)
                                                                                                        (("4"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "m+n"
                                                                                                           "V2Ml(m,y)")
                                                                                                          (("4"
                                                                                                            (assert)
                                                                                                            (("4"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                (("4"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   -2
                                                                                                                   -3)
                                                                                                                  (("4"
                                                                                                                    (expand
                                                                                                                     Block2M)
                                                                                                                    (("4"
                                                                                                                      (expand
                                                                                                                       M2Block)
                                                                                                                      (("4"
                                                                                                                        (expand
                                                                                                                         Zero_mat)
                                                                                                                        (("4"
                                                                                                                          (expand
                                                                                                                           concat_V)
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             I)
                                                                                                                            (("4"
                                                                                                                              (expand
                                                                                                                               transpose)
                                                                                                                              (("4"
                                                                                                                                (expand
                                                                                                                                 *)
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  (("4"
                                                                                                                                    (apply-extensionality)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "x!1<n")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             x!2<n)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "sigma[below(Q_2`cols)].sigma_zero")
                                                                                                                                                (("1"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 " sigma[below(Q_2`cols)].sigma_restrict_eq_0")
                                                                                                                                                (("1"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (typepred
                                                                                                                                                               x!2)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 M2Block
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (typepred
                                                                                                                                                                     i)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (typepred
                                                                                                                                                                       Q_2)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             x!2-n=i)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 " sigma[below(m)].sigma_zero")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "x!2<n")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "      sigma[below(Q_2`cols)].sigma_zero")
                                                                                                                                                (("1"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 1
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "sigma[below(Q_2`cols)].sigma_middle")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "x!2-n")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (bddsimp
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma[below(Q_2`cols)].sigma_restrict_eq_0")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(Q_2`cols)].sigma_restrict_eq_0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "sigma[below(m)].sigma_middle")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -1
                                                                                                                                                                                               "x!1-n")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (bddsimp
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "sigma[below(m)].sigma_restrict_eq_0")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (hide
                                                                                                                                                                                                           -2)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst?
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                       "sigma[below(m)].sigma_restrict_eq_0")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (inst?
                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                     x!1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       M2Block
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (typepred
                                                                                                                                                                                                 x!1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   M2Block
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (typepred
                                                                                                                                                             Q_2)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (typepred
                                                                                                                                                                   x!2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     M2Block
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("3"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("4"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("4"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("5"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("5"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("6"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("6"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (flatten)
                                  (("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (expand Block2M)
                                      (("3"
                                        (expand M2Block)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (flatten)
                                  (("4"
                                    (hide-all-but 1)
                                    (("4"
                                      (expand Block2M 1)
                                      (("4"
                                        (expand M2Block 1)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide 2)
                                (("5"
                                  (flatten)
                                  (("5"
                                    (hide-all-but 1)
                                    (("5"
                                      (expand Block2M 1)
                                      (("5"
                                        (expand M2Block 1)
                                        (("5" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (hide 2)
                                (("6"
                                  (flatten)
                                  (("6"
                                    (expand V2Ml 1)
                                    (("6" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (hide 2)
                                (("7"
                                  (flatten)
                                  (("7"
                                    (expand V2Ml 1)
                                    (("7" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("8"
                                (hide 2)
                                (("8"
                                  (flatten)
                                  (("8"
                                    (expand V2Block)
                                    (("8" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("9"
                                (hide 2)
                                (("9"
                                  (expand Block2M 1)
                                  (("9"
                                    (expand M2Block 1)
                                    (("9" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("10"
                                (hide 2)
                                (("10"
                                  (expand Block2M 1)
                                  (("10"
                                    (expand M2Block 1)
                                    (("10" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("11"
                                (hide 2)
                                (("11"
                                  (expand V2Ml 1)
                                  (("11" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (assert)
                    (("2" (lemma conv_sum)
                      (("2" (inst? -1)
                        (("2" (replace -1)
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (lemma eq_block)
                                (("2"
                                  (hide -2 -3)
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (split)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand I)
                                              (("1"
                                                (expand *)
                                                (("1"
                                                  (expand +)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (hide -1 -2)
                                                    (("2"
                                                      (decompose-equality)
                                                      (("1"
                                                        (case x!1<n)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (replace -2)
                                            (("3"
                                              (hide -2 -3)
                                              (("3"
                                                (hide -1)
                                                (("3"
                                                  (grind)
                                                  (("3"
                                                    (decompose-equality)
                                                    (("1"
                                                      (case x!2<n)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (lemma conv_sum)
                                            (("4"
                                              (inst? -1)
                                              (("4"
                                                (replace -1)
                                                (("4"
                                                  (hide -1)
                                                  (("4"
                                                    (lemma eq_block)
                                                    (("4"
                                                      (inst? -1)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (assert)
                    (("3" (split)
                      (("1" (expand Block2M 1)
                        (("1" (expand M2Block 1)
                          (("1" (assert)
                            (("1" (expand V2Ml)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand Block2M)
                        (("2" (expand M2Block)
                          (("2" (assert)
                            (("2" (expand V2Ml)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
                 ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil)
                 ("6" (hide-all-but 1) (("6" (grind) nil nil)) nil)
                 ("7" (hide-all-but 1) (("7" (grind) nil nil)) nil)
                 ("8" (hide-all-but 1) (("8" (grind) nil nil)) nil)
                 ("9" (hide-all-but 1) (("9" (grind) nil nil)) nil)
                 ("10" (hide-all-but 1) (("10" (grind) nil nil)) nil)
                 ("11" (hide-all-but 1) (("11" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (conv_sum formula-decl nil block_matrices nil)
    (semidef_sum formula-decl nil posdef nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (* const-decl "Matrix" matrices nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (concat_V const-decl "Matrix" matrices nil)
    (eye_col formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (concat_v_row formula-decl nil matrices nil)
    (concat_v_col formula-decl nil matrices nil)
    (y skolem-const-decl "Vector[m]" ellipsoid nil)
    (conv_mult formula-decl nil block_matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (v2ml_row formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (v2ml_col formula-decl nil matrices nil)
    (semidef_qua_trans formula-decl nil posdef nil)
    (trans_conv formula-decl nil block_matrices nil)
    (conv_transp formula-decl nil block_matrices nil)
    (eq_block formula-decl nil block_matrices nil)
    (right_mult_ident formula-decl nil matrices nil)
    (zero_right_ident formula-decl nil matrices nil)
    (zero_times_right formula-decl nil matrices nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sigma_0_neg formula-decl nil sigma_below "reals/")
    (zero_times_right_1 formula-decl nil matrices nil)
    (zero_times_left_1 formula-decl nil matrices nil)
    (zero_left_ident formula-decl nil matrices nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sigma_restrict_eq_0 formula-decl nil sigma "reals/")
    (sigma_middle formula-decl nil sigma "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (I_preserves application-judgement "S" identity_props nil)
    (* const-decl "Matrix" matrices nil)
    (bijective? const-decl "bool" functions nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (comp_zero formula-decl nil vectors "vectors/")
    (subrange type-eq-decl nil integers nil)
    (sigma_nnreal application-judgement "nnreal" vectors "vectors/")
    (x!1 skolem-const-decl "below(M2Block(n, m, n, m)
             (Zero_mat(n, n), Zero_mat(m, n), Zero_mat(n, m),
              1 / lambda_2 * Q_2)`rows1
       +
       M2Block(n, m, n, m)
              (Zero_mat(n, n), Zero_mat(m, n), Zero_mat(n, m),
               1 / lambda_2 * Q_2)`rows2)" ellipsoid nil)
    (x!1 skolem-const-decl
     "below(V2Ml(m + n, Block2V(V2Block(n, m)(vectors[n].zero, y)))`cols)"
     ellipsoid nil)
    (add_dim_col formula-decl nil matrices nil)
    (add_dim_row formula-decl nil matrices nil)
    (x skolem-const-decl "Vector[n]" ellipsoid nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (zero const-decl "Vector" vectors "vectors/")
    (Bsymmetric? const-decl "bool" block_matrices nil)
    (block_symmetric formula-decl nil block_matrices nil)
    (zero_trans formula-decl nil matrices nil)
    (symmetric_scal formula-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Q_2 skolem-const-decl "Mat(m, m)" ellipsoid nil)
    (lambda_2 skolem-const-decl "posreal" ellipsoid nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (Zero type-eq-decl nil matrices nil)
    (zero? const-decl "bool" matrices nil)
    (Q_1 skolem-const-decl "Mat(n, n)" ellipsoid nil)
    (lambda_1 skolem-const-decl "posreal" ellipsoid nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "Matrix" matrices nil)
    (m skolem-const-decl "posnat" ellipsoid nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (square? const-decl "bool" matrices nil)
    (nnreal type-eq-decl nil real_types nil)
    (block_mult_comm formula-decl nil block_matrices nil)
    (* const-decl "Block_Vector2" block_matrices nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Block2V2 const-decl "Vector[V`comp2]" block_matrices nil)
    (Block2V1 const-decl "Vector[V`comp1]" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (access_v_2 formula-decl nil block_matrices nil)
    (access_v_1 formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (+ const-decl "real" vectors "vectors/")
    (sigma_zero formula-decl nil sigma "reals/")
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (zero_col formula-decl nil matrices nil)
    (* const-decl "real" block_matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero_row formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_diff_eq formula-decl nil sigma_below_sub "reals/")
    (* const-decl "real" vectors "vectors/")
    (block_v_mult_comm formula-decl nil block_matrices nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (y!1 skolem-const-decl "Vector[m]" ellipsoid nil)
    (x!2 skolem-const-decl "Vector[n]" ellipsoid nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (Block_Vector2 type-eq-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (semidef_scal formula-decl nil posdef nil)
    (split_vect formula-decl nil block_matrices nil)
    (semidef_pos? const-decl "bool" posdef nil))
   nil)
  (ellipsoid_combination-3 nil 3599412691
   ("" (skeep)
    (("" (expand in_ellipsoid_Q?)
      (("" (flatten)
        (("" (assert)
          (("" (split)
            (("1" (hide-all-but (1 -1 -4))
              (("1" (expand semidef_pos?)
                (("1" (skeep)
                  (("1" (lemma split_vect)
                    (("1" (inst -1 "n+m" "x!1" "n")
                      (("1" (assert)
                        (("1" (skeep -1)
                          (("1" (lemma semidef_scal)
                            (("1" (inst-cp -1 "1/lambda_1" "Q_1")
                              (("1"
                                (inst -1 "1/lambda_2" "Q_2")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma block_mult_comm)
                                      (("1"
                                        (inst
                                         -1
                                         "M2Block(n, m, n, m)
                                           (1 / lambda_1 * Q_1, Zero_mat(m, n), Zero_mat(n, m),
                                            1 / lambda_2 * Q_2)"
                                         "BV2toBV1((# comp1 := n,
                                                 comp2 := m,
                                                 vector1 := x!2,
                                                 vector2 := y!1 #))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 block_v_mult_comm)
                                                (("1"
                                                  (inst
                                                   -1
                                                   n
                                                   m
                                                   "BV2toBV1((# comp1 := n,
                                                  comp2 := m,
                                                  vector1 := x!2,
                                                  vector2 := y!1 #))"
                                                   "BV2toBV1(M2Block(n, m, n, m)
                                                       (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                                        Zero_mat(n, m), 1 / lambda_2 * Q_2)
                                                 *
                                                 BV2toBV1((# comp1 := n,
                                                             comp2 := m,
                                                             vector1 := x!2,
                                                             vector2 := y!1 #)))")
                                                  (("1"
                                                    (expand * -1 1)
                                                    (("1"
                                                      (expand * 1 1)
                                                      (("1"
                                                        (lemma
                                                         "sigma_below_sub[BV2toBV1((# comp1 := n,
                                                                   comp2 := m,
                                                                   vector1 := x!2,
                                                                   vector2 := y!1 #))`comp1
                                                        +
                                                        BV2toBV1((# comp1 := n,
                                                                    comp2 := m,
                                                                    vector1 := x!2,
                                                                    vector2 := y!1 #))`comp2,Block2M(M2Block(n, m, n, m)
                                                                      (1 / lambda_1 * Q_1,
                                                                       Zero_mat(m, n), Zero_mat(n, m),
                                                                       1 / lambda_2 * Q_2))`rows].sigma_diff_eq")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             Block2M
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               M2Block
                                                               1
                                                               (1 2))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   BV2toBV1
                                                                   -1
                                                                   (1
                                                                    2))
                                                                  (("1"
                                                                    (expand
                                                                     BV2toBV1
                                                                     -2
                                                                     (1
                                                                      2))
                                                                    (("1"
                                                                      (typepred
                                                                       Q_1)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "LAMBDA (i:
                                                  Index
                                                      [BV2toBV1((# comp1 := n,
                                                                   comp2 := m,
                                                                   vector1 := x!2,
                                                                   vector2 := y!1 #))`comp1
                                                        +
                                                        BV2toBV1((# comp1 := n,
                                                                    comp2 := m,
                                                                    vector1 := x!2,
                                                                    vector2 := y!1 #))`comp2]):
                                          Block2V(BV2toBV1((# comp1 := n,
                                                              comp2 := m,
                                                              vector1 := x!2,
                                                              vector2 := y!1 #)))
                                                 (i)
                                           *
                                           Block2V(BV2toBV1(M2Block(n, m, n, m)
                                                                   (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                                                    Zero_mat(n, m), 1 / lambda_2 * Q_2)
                                                             *
                                                             BV2toBV1((# comp1 := n,
                                                                         comp2 := m,
                                                                         vector1 := x!2,
                                                                         vector2 := y!1 #))))
                                                  (i)"
                                                                             "LAMBDA (i:
                                                  Index
                                                      [Block2M(M2Block(n, m, n, m)
                                                                      (1 / lambda_1 * Q_1,
                                                                       Zero_mat(m, n), Zero_mat(n, m),
                                                                       1 / lambda_2 * Q_2))`rows]):
                                          Block2V(BV2toBV1((# comp1 := n,
                                                              comp2 := m,
                                                              vector1 := x!2,
                                                              vector2 := y!1 #)))
                                                 (i)
                                           *
                                           Block2V(BV2toBV1(M2Block(n, m, n, m)
                                                                   (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                                                    Zero_mat(n, m), 1 / lambda_2 * Q_2)
                                                             *
                                                             BV2toBV1((# comp1 := n,
                                                                         comp2 := m,
                                                                         vector1 := x!2,
                                                                         vector2 := y!1 #))))
                                                  (i)"
                                                                             "m+n-1"
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 Block2M
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   M2Block
                                                                                   -1
                                                                                   (1
                                                                                    2))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             *
                                                                                             1
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 *
                                                                                                 1
                                                                                                 4)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     *
                                                                                                     1
                                                                                                     8)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           semidef_pos?)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             y!1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               x!2)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   *
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       +
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           BV2toBV1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             Zero_mat
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               *
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 *
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -3
                                                                                                                                   -4
                                                                                                                                   -5)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       Q_1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               Q_2)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -1
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma_below_sub[(1 / lambda_2 * Q_2)`rows, BV2toBV1((# comp1 := n,
                                                                                comp2 := m,
                                                                                vector1 := x!2,
                                                                                vector2 := y!1 #))`comp2].sigma_diff_eq")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "LAMBDA (i_1: Index[(1 / lambda_2 * Q_2)`rows]):
                                                      y!1(i_1) *
                                                       sigma[below(Q_2`cols)]
                                                           (0, m - 1,
                                                            LAMBDA (k: below(Q_2`cols)):
                                                              y!1(k) * Q_2`matrix(i_1, k) * (1 / lambda_2))"
                                                                                                                                                         " LAMBDA (i_1:
                                                               Index
                                                                   [BV2toBV1((# comp1 := n,
                                                                                comp2 := m,
                                                                                vector1 := x!2,
                                                                                vector2 := y!1 #))`comp2]):
                                                       y!1(i_1) *
                                                        sigma[below(Zero_mat(m, n)`cols)]
                                                            (0, n - 1,
                                                             LAMBDA (k: below(Zero_mat(m, n)`cols)): 0 * x!2(k))
                                                        +
                                                        y!1(i_1) *
                                                         sigma[below(Q_2`cols)]
                                                             (0, m - 1,
                                                              LAMBDA (k: below(Q_2`cols)):
                                                                y!1(k) * Q_2`matrix(i_1, k) * (1 / lambda_2))"
                                                                                                                                                         "m-1"
                                                                                                                                                         "0")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (bddsimp
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1
                                                                                                                                                               1
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma_below_sub[(1 / lambda_1 * Q_1)`rows,BV2toBV1((# comp1 := n,
                                                                                       comp2 := m,
                                                                                       vector1 := x!2,
                                                                                       vector2 := y!1 #))`comp1].sigma_diff_eq")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "LAMBDA (i_1: Index[(1 / lambda_1 * Q_1)`rows]):
                                                              x!2(i_1) *
                                                               sigma[below(Q_1`cols)]
                                                                   (0, n - 1,
                                                                    LAMBDA (k: below(Q_1`cols)):
                                                                      x!2(k) * Q_1`matrix(i_1, k) * (1 / lambda_1))"
                                                                                                                                                                     "LAMBDA (i_1:
                                                                      Index
                                                                          [BV2toBV1((# comp1 := n,
                                                                                       comp2 := m,
                                                                                       vector1 := x!2,
                                                                                       vector2 := y!1 #))`comp1]):
                                                              x!2(i_1) *
                                                               sigma[below(Q_1`cols)]
                                                                   (0, n - 1,
                                                                    LAMBDA (k: below(Q_1`cols)):
                                                                      x!2(k) * Q_1`matrix(i_1, k) * (1 / lambda_1))
                                                               +
                                                               x!2(i_1) *
                                                                sigma[below(Zero_mat(n, m)`cols)]
                                                                    (0, m - 1,
                                                                     LAMBDA (k: below(Zero_mat(n, m)`cols)): 0 * y!1(k))"
                                                                                                                                                                     "n-1"
                                                                                                                                                                     "0")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           BV2toBV1
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(Zero_mat(n,m)`cols)].sigma_zero")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -3
                                                                                                                                                                                 -4)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil)))))
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil)))))))))))))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("3"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("4"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("4"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("5"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("5"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("6"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("6"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("7"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("7"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("8"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("8"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("9"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("9"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))))))))))
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (grind)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma[below((Zero_mat(m, n)`cols))].sigma_zero")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil)))
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil)))))))))
                                                                                                                                                             ("3"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (grind)
                                                                                                                                                                nil)))))))
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("3"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("3"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("4"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("4"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("5"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("5"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("6"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("6"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("7"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("7"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("8"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("8"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("9"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("9"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil)))))
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))))))))))))))))))))))))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil)))
                                                                             ("3"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("3"
                                                                                (grind)
                                                                                nil)))
                                                                             ("4"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("4"
                                                                                (grind)
                                                                                nil)))))))))))))))))))))))))))))
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil)))
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (grind)
                                                      nil)))))))))))))
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil)))
                                         ("3"
                                          (hide-all-but 1)
                                          (("3" (grind) nil)))))))))))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred Q_2)
                                    (("2"
                                      (expand square?)
                                      (("2" (assert) nil)))))))))
                               ("2"
                                (expand square?)
                                (("2" (assert) nil)))))))))))
                       ("2" (assert)
                        (("2" (expand Block2M 1)
                          (("2" (expand M2Block 1)
                            (("2" (assert)
                              (("2"
                                (typepred Q_1)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    nil)))))))))))))))))))))))
             ("2"
              (case "Bsymmetric?(M2Block(n, m, n, m)
                                                  (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                                   Zero_mat(n, m), 1 / lambda_2 * Q_2))")
              (("1" (expand Bsymmetric?) (("1" (propax) nil)))
               ("2" (hide 2)
                (("2" (lemma block_symmetric)
                  (("2" (inst? -1)
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (lemma symmetric_scal)
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (lemma symmetric_scal)
                                (("2"
                                  (hide-all-but (-1 1))
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      nil)))))))))))))))))))))))))
             ("3" (hide -1 -2 -4 -5)
              (("3"
                (case "Block2M(M2Block(1, m + n, 1, m + n)
                                                    (I(1), transpose(V2Ml(m + n, z)),
                                                     V2Ml(m + n, z),
                                                     Block2M(M2Block(n, m, n, m)
                                                                    (1 / lambda_1 * Q_1,
                                                                     Zero_mat(m, n),
                                                                     Zero_mat(n, m),
                                                                     1 / lambda_2 * Q_2)))) = Block2M(M2Block(1, m + n, 1, m + n)
                                                    (lambda_1*I(1), transpose(V2Ml(m + n, Block2V(V2Block(n,m)(x,vectors[m].zero)))),
                                                     V2Ml(m + n, Block2V(V2Block(n,m)(x,vectors[m].zero))),
                                                     Block2M(M2Block(n, m, n, m)
                                                                    (1 / lambda_1 * Q_1,
                                                                     Zero_mat(m, n),
                                                                     Zero_mat(n, m),
                                                                     Zero_mat(m,m))))) + Block2M(M2Block(1, m + n, 1, m + n)
                                                    (lambda_2*I(1), transpose(V2Ml(m + n, Block2V(V2Block(n,m)(vectors[n].zero,y)))),
                                                     V2Ml(m + n, Block2V(V2Block(n,m)(vectors[n].zero,y))),
                                                     Block2M(M2Block(n, m, n, m)
                                                                    (Zero_mat(n,n),
                                                                     Zero_mat(m, n),
                                                                     Zero_mat(n, m),
                                                                     1 / lambda_2 * Q_2))))")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (lemma semidef_sum)
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1"
                              (case "Block2M(M2Block(1, m + n, 1, m + n)
                                                             (lambda_1 * I(1),
                                                              transpose(V2Ml(m + n,
                                                                             Block2V(V2Block
                                                                                     (n, m)
                                                                                     (x,
                                                                                      vectors
                                                                                      [m].zero)))),
                                                              V2Ml(m + n,
                                                                   Block2V(V2Block(n, m)
                                                                                  (x,
                                                                                   vectors[m].zero))),
                                                              Block2M(M2Block(n, m, n, m)
                                                                             (1 / lambda_1 * Q_1,
                                                                              Zero_mat(m, n),
                                                                              Zero_mat(n, m),
                                                                              Zero_mat(m, m)))))=
                           Block2M(M2Block(1,m+n,1,n)(sqrt(lambda_1)*I(1),Zero_mat(m+n,1),Zero_mat(1,n),
                           concat_V(1/sqrt(lambda_1)*I(n),Zero_mat(m,n))))*Block2M(M2Block(1, n, 1, n)
                                                             (I(1), transpose(V2Ml(n, x)), V2Ml(n, x),
                                                              Q_1))*transpose(Block2M(M2Block(1,m+n,1,n)(sqrt(lambda_1)*I(1),Zero_mat(m+n,1),Zero_mat(1,n),
                           concat_V(1/sqrt(lambda_1)*I(n),Zero_mat(m,n))))) AND
                           Block2M(M2Block(1, m + n, 1, m + n)
                                                              (lambda_2 * I(1),
                                                               transpose(V2Ml(m + n,
                                                                              Block2V(V2Block
                                                                                      (n, m)
                                                                                      (vectors
                                                                                       [n].zero,
                                                                                       y)))),
                                                               V2Ml(m + n,
                                                                    Block2V(V2Block(n, m)
                                                                                   (vectors[n].zero,
                                                                                    y))),
                                                               Block2M(M2Block(n, m, n, m)
                                                                              (Zero_mat(n, n),
                                                                               Zero_mat(m, n),
                                                                               Zero_mat(n, m),
                                                                               1 / lambda_2 * Q_2)))) =
                           Block2M(M2Block(1,m+n,1,m)(sqrt(lambda_2)*I(1),Zero_mat(m+n,1),Zero_mat(1,m),concat_V(Zero_mat(n,m),1/sqrt(lambda_2)*I(m))))*Block2M(M2Block(1, m, 1, m)
                                                             (I(1), transpose(V2Ml(m, y)), V2Ml(m, y),
                                                              Q_2)) * transpose(Block2M(M2Block(1,m+n,1,m)(sqrt(lambda_2)*I(1),Zero_mat(m+n,1),Zero_mat(1,m),concat_V(Zero_mat(n,m),(1/sqrt(lambda_2)*I(m)))))")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (lemma semidef_qua_trans)
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (lemma semidef_qua_trans)
                                            (("1"
                                              (inst
                                               -1
                                               "Block2M(M2Block(1, m, 1, m)
                                                          (I(1), transpose(V2Ml(m, y)), V2Ml(m, y),
                                                           Q_2))"
                                               "Block2M(M2Block(1, m + n, 1, m)
                                                           (sqrt(lambda_2) * I(1),
                                                            Zero_mat(m + n, 1), Zero_mat(1, m),
                                                            concat_V(Zero_mat(n, m),
                                                                     1/sqrt(lambda_2) * I(m))))")
                                              (("1" (assert) nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand Block2M 1)
                                                  (("2"
                                                    (expand M2Block)
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand Block2M)
                                              (("2"
                                                (expand M2Block)
                                                (("2"
                                                  (assert)
                                                  nil)))))))))))))))))))
                               ("2"
                                (hide 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -1 -2)
                                    (("2"
                                      (lemma trans_conv)
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (lemma trans_conv)
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       conv_transp)
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (lemma
                                                                 conv_transp)
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           M2Block
                                                                           1
                                                                           (5
                                                                            6
                                                                            7
                                                                            8
                                                                            13
                                                                            14
                                                                            15
                                                                            16))
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   eq_block)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               right_mult_ident)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "sqrt(lambda_1)*I(1)"
                                                                                                 "I(1)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     zero_times_left_1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "1"
                                                                                                       "transpose(V2Ml(n,x))")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         V2Ml
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           transpose
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 zero_times_left_1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   "Q_1")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     Q_1)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -3)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               zero_times_right)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 zero_times_right_1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "1"
                                                                                                                                   "sqrt(lambda_1) * I(1) * V2Ml(n, x)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         transpose)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           *)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             I)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               sigma)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               zero_times_left_1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "m+n"
                                                                                                 "I(1)")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   I
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         zero_times_left_1)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "m"
                                                                                                           "transpose(V2Ml(n,x))")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             transpose
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               V2Ml
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   zero_times_right_1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     1
                                                                                                                     "(Zero_mat(m + n, 1) * V2Ml(n, x) +
                                      concat_V(1 / sqrt(lambda_1) * I(n), Zero_mat(m, n)) * Q_1)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           transpose)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             V2Ml)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               Block2V)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 V2Block)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   *)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     I)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         sigma
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (apply-extensionality
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 x!1<n)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     concat_V)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "sigma[below(concat_V(I(n)
                                                                 WITH [`matrix
                                                                         := LAMBDA (i: below(I(n)`rows),
                                                                                    j: below(I(n)`cols)):
                                                                              1 / sqrt(lambda_1) *
                                                                               I(n)`matrix(i, j)],
                                                               Zero_mat(m, n))`cols)].sigma_middle")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "LAMBDA (k:
                                                              below(concat_V(I(n)
                                                                               WITH [`matrix
                                                                                       := LAMBDA (i:
                                                                                                  below(I(n)`rows),
                                                                                                  j:
                                                                                                  below(I
                                                                                                        (n)`cols)):
                                                                                            1 / sqrt(lambda_1) *
                                                                                             I(n)`matrix(i, j)],
                                                                             Zero_mat(m, n))`cols)):
                                                      x(k) * (1 / sqrt(lambda_1)) * IF x!1 = k THEN 1 ELSE 0 ENDIF"
                                                                                                                                                           "n-1"
                                                                                                                                                           "x!1"
                                                                                                                                                           "0")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma[below(concat_V(I(n)
                                                                         WITH [`matrix
                                                                                 := LAMBDA (i: below(I(n)`rows),
                                                                                            j: below(I(n)`cols)):
                                                                                      1 / sqrt(lambda_1) *
                                                                                       I(n)`matrix(i, j)],
                                                                       Zero_mat(m, n))`cols)].sigma_restrict_eq_0")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(concat_V(I(n)
                                                                                 WITH [`matrix
                                                                                         := LAMBDA (i: below(I(n)`rows),
                                                                                                    j: below(I(n)`cols)):
                                                                                              1 / sqrt(lambda_1) *
                                                                                               I(n)`matrix(i, j)],
                                                                               Zero_mat(m, n))`cols)].sigma_restrict_eq_0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil)))))
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil)))))))))))))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))))
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil)))))))))))
                                                                                                                                                           ("2"
                                                                                                                                                            (hide-all-but
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (grind)
                                                                                                                                                              nil)))))
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))))))))))
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       x!1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         V2Ml)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (reveal
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "sigma[below(concat_V(I(n)
                                                                 WITH [`matrix
                                                                         := LAMBDA (i: below(I(n)`rows),
                                                                                    j: below(I(n)`cols)):
                                                                              1 / sqrt(lambda_1) *
                                                                               I(n)`matrix(i, j)],
                                                               Zero_mat(m, n))`cols)].sigma_zero")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil)))
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil)))))))))))))))))))))))
                                                                                                                                             ("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (grind)
                                                                                                                                                nil)))
                                                                                                                                             ("3"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("3"
                                                                                                                                                (grind)
                                                                                                                                                nil)))
                                                                                                                                             ("4"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("4"
                                                                                                                                                (grind)
                                                                                                                                                nil)))
                                                                                                                                             ("5"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("5"
                                                                                                                                                (grind)
                                                                                                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                           ("3"
                                                                                            (lemma
                                                                                             zero_times_right_1)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "m+n"
                                                                                               "(sqrt(lambda_1) * I(1) * I(1) +
                                     Zero_mat(1, n) * transpose(V2Ml(n, x)))")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 *
                                                                                                 -1
                                                                                                 (5
                                                                                                  6
                                                                                                  7))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   I
                                                                                                   -1
                                                                                                   (3
                                                                                                    4))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     +
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           zero_times_left_1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "1"
                                                                                                             "transpose(V2Ml(n,x))")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               transpose
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 V2Ml
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       zero_times_right_1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "m+n"
                                                                                                                         "sqrt(lambda_1) * I(1) * I(1)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           *
                                                                                                                           -1
                                                                                                                           (4
                                                                                                                            5))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             I
                                                                                                                             -1
                                                                                                                             (3
                                                                                                                              4))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 zero_times_left_1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "1"
                                                                                                                                   "Q_1")
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     Q_1)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -3)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 zero_times_right_1)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "m+n"
                                                                                                                                                   "sqrt(lambda_1) * matrices.I(1) * matrices.I(1)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         transpose)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           I)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             V2Ml)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               Block2V)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 V2Block)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   concat_V)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     Zero_mat)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       *)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (decompose-equality)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             x!2<n)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 sigma
                                                                                                                                                                                 1
                                                                                                                                                                                 2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "sigma[below(n)].sigma_middle")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -1
                                                                                                                                                                                         "x!2")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst?
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                               "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst?
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil)))))))))))))))))))))))))))))
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (grind)
                                                                                                                                                                                        nil)))))))))))
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "sigma[below(n)].sigma_zero")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil)))
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil)))))))))
                                                                                                                                                                           ("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil)))))))
                                                                                           ("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               zero_times_left_1)
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 zero_times_right_1)
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "m+n"
                                                                                                   "(matrices.+)
                                                 (matrices.*
                                                      (matrices.Zero_mat(m + n, 1), matrices.I(1)),
                                                  matrices.*
                                                      (matrices.concat_V
                                                           (matrices.*
                                                                (1 / reals@sqrt.sqrt(lambda_1),
                                                                 matrices.I(n)),
                                                            matrices.Zero_mat(m, n)),
                                                       matrices.transpose(V2Ml(n, x))))")
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        (("4"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "m+n"
                                                                                                             "V2Ml(n,x)")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              (("4"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("4"
                                                                                                                  (assert)
                                                                                                                  (("4"
                                                                                                                    (expand
                                                                                                                     Block2M)
                                                                                                                    (("4"
                                                                                                                      (expand
                                                                                                                       M2Block)
                                                                                                                      (("4"
                                                                                                                        (expand
                                                                                                                         Zero_mat)
                                                                                                                        (("4"
                                                                                                                          (expand
                                                                                                                           I)
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             concat_V)
                                                                                                                            (("4"
                                                                                                                              (expand
                                                                                                                               transpose)
                                                                                                                              (("4"
                                                                                                                                (expand
                                                                                                                                 *)
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  (("4"
                                                                                                                                    (hide
                                                                                                                                     -1
                                                                                                                                     -2
                                                                                                                                     -3)
                                                                                                                                    (("4"
                                                                                                                                      (apply-extensionality)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "x!1<Q_1`rows")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "x!2<Q_1`cols")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   " sigma[below(Q_1`cols)].sigma_middle")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "x!2")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 " sigma[below(n)].sigma_middle")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       -2)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst?
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                   "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (inst?
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil)))))))))))))))))))))))))
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (grind)
                                                                                                                                                                                                nil)))))))))))))))
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil)))))))))))))))))))
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil)))))))))))))))
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil)))))
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil)))))))
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "sigma[below(Q_1`cols)].sigma_zero")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil)))
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil)))))))))))
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (case
                                                                                                                                                 x!2<n)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "sigma[below(n)].sigma_zero")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       x!2=i)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil)))))))))))
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (grind)
                                                                                                                                                                nil)))))))))
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil)))))
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil)))))))
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "sigma[below(Q_1`cols)].sigma_zero")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil)))
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil)))))))))))))))))
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil)))
                                                                                                                                       ("3"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("3"
                                                                                                                                          (grind)
                                                                                                                                          nil)))
                                                                                                                                       ("4"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("4"
                                                                                                                                          (grind)
                                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                               ("2"
                                                                                (lemma
                                                                                 eq_block)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           zero_times_left_1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "1"
                                                                                             " transpose(V2Ml(m, y))")
                                                                                            (("1"
                                                                                              (expand
                                                                                               transpose
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 V2Ml
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       zero_times_right_1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "1"
                                                                                                         "(matrices.+)
                                                 (matrices.*
                                                      (matrices.*
                                                           (reals@sqrt.sqrt(lambda_2), matrices.I(1)),
                                                       V2Ml(m, y)),
                                                  matrices.*(matrices.Zero_mat(1, m), Q_2))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               *)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 I)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   transpose)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       sigma)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))))))))))))))))
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             zero_times_left_1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "m+n"
                                                                                               "I(1)")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 I
                                                                                                 -1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       zero_times_left_1)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "m"
                                                                                                         "transpose(V2Ml(m,y))")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           transpose
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             V2Ml
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 zero_times_right_1)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   "(Zero_mat(m + n, 1) * V2Ml(m, y) +
                                                   concat_V(Zero_mat(n, m),1/ sqrt(lambda_2) * I(m)) * Q_2)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1
                                                                                                                       -2
                                                                                                                       -3
                                                                                                                       -4
                                                                                                                       -5)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         transpose)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           V2Ml)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             Block2V)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               V2Block)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 *)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   I)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       sigma
                                                                                                                                       1
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (apply-extensionality
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               concat_V)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   x!1<n)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       Zero_mat)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "sigma[below(concat_V(Zero_mat(n, m),
                                                               I(m)
                                                                 WITH [`matrix
                                                                         := LAMBDA (i: below(I(m)`rows),
                                                                                    j: below(I(m)`cols)):
                                                                              1/sqrt(lambda_2) *
                                                                               I(m)`matrix(i, j)])`cols)].sigma_zero")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil)))
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))))))))
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma[below(concat_V(Zero_mat(n, m),
                                                               I(m)
                                                                 WITH [`matrix
                                                                         := LAMBDA (i: below(I(m)`rows),
                                                                                    j: below(I(m)`cols)):
                                                                              1/sqrt(lambda_2) *
                                                                               I(m)`matrix(i, j)])`cols)].sigma_middle")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "x!1-n")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (bddsimp
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "sigma[below(concat_V(Zero_mat(n, m),
                                                                               I(m)
                                                                                 WITH [`matrix
                                                                                         := LAMBDA (i: below(I(m)`rows),
                                                                                                    j: below(I(m)`cols)):
                                                                                              1/sqrt(lambda_2) *
                                                                                               I(m)`matrix(i, j)])`cols)].sigma_restrict_eq_0")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst?
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "sigma[below(concat_V(Zero_mat(n, m),
                                                                                       I(m)
                                                                                         WITH [`matrix
                                                                                                 := LAMBDA (i: below(I(m)`rows),
                                                                                                            j: below(I(m)`cols)):
                                                                                                      1/sqrt(lambda_2) *
                                                                                                       I(m)`matrix(i, j)])`cols)].sigma_restrict_eq_0")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (postpone)
                                                                                                                                                                                              nil)))))))
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (postpone)
                                                                                                                                                                                        nil)))
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (postpone)
                                                                                                                                                                                      nil)))))))))))))
                                                                                                                                                                         ("2"
                                                                                                                                                                          (postpone)
                                                                                                                                                                          nil)))
                                                                                                                                                                       ("2"
                                                                                                                                                                        (postpone)
                                                                                                                                                                        nil)))))))))
                                                                                                                                                               ("2"
                                                                                                                                                                (postpone)
                                                                                                                                                                nil)))))
                                                                                                                                                           ("2"
                                                                                                                                                            (postpone)
                                                                                                                                                            nil)))
                                                                                                                                                         ("2"
                                                                                                                                                          (postpone)
                                                                                                                                                          nil)))
                                                                                                                                                       ("2"
                                                                                                                                                        (postpone)
                                                                                                                                                        nil)))))))))))))
                                                                                                                                           ("2"
                                                                                                                                            (postpone)
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (postpone)
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (postpone)
                                                                                                                                            nil)
                                                                                                                                           ("5"
                                                                                                                                            (postpone)
                                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                         ("3"
                                                                                          (postpone)
                                                                                          nil)
                                                                                         ("4"
                                                                                          (postpone)
                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                               ("3"
                                (hide 2)
                                (("3"
                                  (flatten)
                                  (("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (expand Block2M)
                                      (("3"
                                        (expand M2Block)
                                        (("3" (assert) nil)))))))))))
                               ("4"
                                (hide 2)
                                (("4"
                                  (flatten)
                                  (("4"
                                    (hide-all-but 1)
                                    (("4"
                                      (expand Block2M 1)
                                      (("4"
                                        (expand M2Block 1)
                                        (("4" (assert) nil)))))))))))
                               ("5"
                                (hide 2)
                                (("5"
                                  (flatten)
                                  (("5"
                                    (hide-all-but 1)
                                    (("5"
                                      (expand Block2M 1)
                                      (("5"
                                        (expand M2Block 1)
                                        (("5" (assert) nil)))))))))))
                               ("6"
                                (hide 2)
                                (("6"
                                  (flatten)
                                  (("6"
                                    (expand V2Ml 1)
                                    (("6" (propax) nil)))))))
                               ("7"
                                (hide 2)
                                (("7"
                                  (flatten)
                                  (("7"
                                    (expand V2Ml 1)
                                    (("7" (propax) nil)))))))
                               ("8"
                                (hide 2)
                                (("8"
                                  (flatten)
                                  (("8"
                                    (expand V2Block)
                                    (("8" (propax) nil)))))))
                               ("9"
                                (hide 2)
                                (("9"
                                  (expand Block2M 1)
                                  (("9"
                                    (expand M2Block 1)
                                    (("9" (assert) nil)))))))
                               ("10"
                                (hide 2)
                                (("10"
                                  (expand Block2M 1)
                                  (("10"
                                    (expand M2Block 1)
                                    (("10" (assert) nil)))))))
                               ("11"
                                (hide 2)
                                (("11"
                                  (expand V2Ml 1)
                                  (("11" (propax) nil)))))))))))
                         ("2" (hide-all-but 1)
                          (("2" (grind) nil)))))))))))
                 ("2" (hide 2)
                  (("2" (assert)
                    (("2" (lemma conv_sum)
                      (("2" (inst? -1)
                        (("2" (replace -1)
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (lemma eq_block)
                                (("2"
                                  (hide -2 -3)
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (split)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand I)
                                              (("1"
                                                (expand *)
                                                (("1"
                                                  (expand +)
                                                  (("1"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (assert)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (hide -1 -2)
                                                    (("2"
                                                      (decompose-equality)
                                                      (("1"
                                                        (case x!1<n)
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (grind)
                                                        nil)))))))))))))
                                           ("3"
                                            (replace -2)
                                            (("3"
                                              (hide -2 -3)
                                              (("3"
                                                (hide -1)
                                                (("3"
                                                  (grind)
                                                  (("3"
                                                    (decompose-equality)
                                                    (("1"
                                                      (case x!2<n)
                                                      (("1"
                                                        (assert)
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil)))
                                                     ("2"
                                                      (grind)
                                                      nil)))))))))))
                                           ("4"
                                            (lemma conv_sum)
                                            (("4"
                                              (inst? -1)
                                              (("4"
                                                (replace -1)
                                                (("4"
                                                  (hide -1)
                                                  (("4"
                                                    (lemma eq_block)
                                                    (("4"
                                                      (inst? -1)
                                                      (("4"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))))))))))))))
                 ("3" (hide 2)
                  (("3" (assert)
                    (("3" (split)
                      (("1" (expand Block2M 1)
                        (("1" (expand M2Block 1)
                          (("1" (assert)
                            (("1" (expand V2Ml)
                              (("1" (propax) nil)))))))))
                       ("2" (expand Block2M)
                        (("2" (expand M2Block)
                          (("2" (assert)
                            (("2" (expand V2Ml)
                              (("2" (propax) nil)))))))))))))))
                 ("4" (hide-all-but 1) (("4" (grind) nil)))
                 ("5" (hide-all-but 1) (("5" (grind) nil)))
                 ("6" (hide-all-but 1) (("6" (grind) nil)))
                 ("7" (hide-all-but 1) (("7" (grind) nil)))
                 ("8" (hide-all-but 1) (("8" (grind) nil)))
                 ("9" (hide-all-but 1) (("9" (grind) nil)))
                 ("10" (hide-all-but 1) (("10" (grind) nil)))
                 ("11" (hide-all-but 1)
                  (("11" (grind) nil))))))))))))))))
    nil)
   nil nil)
  (ellipsoid_combination-2 nil 3599412296
   ("" (skeep)
    (("" (expand in_ellipsoid_Q?)
      (("" (flatten)
        (("" (assert)
          (("" (split)
            (("1" (hide-all-but (1 -1 -4))
              (("1" (expand semidef_pos?)
                (("1" (skeep)
                  (("1" (lemma split_vect)
                    (("1" (inst -1 "n+m" "x!1" "n")
                      (("1" (assert)
                        (("1" (skeep -1)
                          (("1" (lemma semidef_scal)
                            (("1" (inst-cp -1 "1/lambda_1" "Q_1")
                              (("1"
                                (inst -1 "1/lambda_2" "Q_2")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma block_mult_comm)
                                      (("1"
                                        (inst
                                         -1
                                         "M2Block(n, m, n, m)
                                 (1 / lambda_1 * Q_1, Zero_mat(m, n), Zero_mat(n, m),
                                  1 / lambda_2 * Q_2)"
                                         "BV2toBV1((# comp1 := n,
                                       comp2 := m,
                                       vector1 := x!2,
                                       vector2 := y!1 #))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 block_v_mult_comm)
                                                (("1"
                                                  (inst
                                                   -1
                                                   n
                                                   m
                                                   "BV2toBV1((# comp1 := n,
                                      comp2 := m,
                                      vector1 := x!2,
                                      vector2 := y!1 #))"
                                                   "BV2toBV1(M2Block(n, m, n, m)
                                           (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                            Zero_mat(n, m), 1 / lambda_2 * Q_2)
                                     *
                                     BV2toBV1((# comp1 := n,
                                                 comp2 := m,
                                                 vector1 := x!2,
                                                 vector2 := y!1 #)))")
                                                  (("1"
                                                    (expand * -1 1)
                                                    (("1"
                                                      (expand * 1 1)
                                                      (("1"
                                                        (lemma
                                                         "sigma_below_sub[BV2toBV1((# comp1 := n,
                                                     comp2 := m,
                                                     vector1 := x!2,
                                                     vector2 := y!1 #))`comp1
                                          +
                                          BV2toBV1((# comp1 := n,
                                                      comp2 := m,
                                                      vector1 := x!2,
                                                      vector2 := y!1 #))`comp2,Block2M(M2Block(n, m, n, m)
                                                        (1 / lambda_1 * Q_1,
                                                         Zero_mat(m, n), Zero_mat(n, m),
                                                         1 / lambda_2 * Q_2))`rows].sigma_diff_eq")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             Block2M
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               M2Block
                                                               1
                                                               (1 2))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   BV2toBV1
                                                                   -1
                                                                   (1
                                                                    2))
                                                                  (("1"
                                                                    (expand
                                                                     BV2toBV1
                                                                     -2
                                                                     (1
                                                                      2))
                                                                    (("1"
                                                                      (typepred
                                                                       Q_1)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "LAMBDA (i:
                                    Index
                                        [BV2toBV1((# comp1 := n,
                                                     comp2 := m,
                                                     vector1 := x!2,
                                                     vector2 := y!1 #))`comp1
                                          +
                                          BV2toBV1((# comp1 := n,
                                                      comp2 := m,
                                                      vector1 := x!2,
                                                      vector2 := y!1 #))`comp2]):
                            Block2V(BV2toBV1((# comp1 := n,
                                                comp2 := m,
                                                vector1 := x!2,
                                                vector2 := y!1 #)))
                                   (i)
                             *
                             Block2V(BV2toBV1(M2Block(n, m, n, m)
                                                     (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                                      Zero_mat(n, m), 1 / lambda_2 * Q_2)
                                               *
                                               BV2toBV1((# comp1 := n,
                                                           comp2 := m,
                                                           vector1 := x!2,
                                                           vector2 := y!1 #))))
                                    (i)"
                                                                             "LAMBDA (i:
                                    Index
                                        [Block2M(M2Block(n, m, n, m)
                                                        (1 / lambda_1 * Q_1,
                                                         Zero_mat(m, n), Zero_mat(n, m),
                                                         1 / lambda_2 * Q_2))`rows]):
                            Block2V(BV2toBV1((# comp1 := n,
                                                comp2 := m,
                                                vector1 := x!2,
                                                vector2 := y!1 #)))
                                   (i)
                             *
                             Block2V(BV2toBV1(M2Block(n, m, n, m)
                                                     (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                                      Zero_mat(n, m), 1 / lambda_2 * Q_2)
                                               *
                                               BV2toBV1((# comp1 := n,
                                                           comp2 := m,
                                                           vector1 := x!2,
                                                           vector2 := y!1 #))))
                                    (i)"
                                                                             "m+n-1"
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 Block2M
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   M2Block
                                                                                   -1
                                                                                   (1
                                                                                    2))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             *
                                                                                             1
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 *
                                                                                                 1
                                                                                                 4)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     *
                                                                                                     1
                                                                                                     8)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           semidef_pos?)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             y!1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               x!2)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   *
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       +
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           BV2toBV1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             Zero_mat
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               *
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 *
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -3
                                                                                                                                   -4
                                                                                                                                   -5)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       Q_1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               Q_2)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -1
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma_below_sub[(1 / lambda_2 * Q_2)`rows, BV2toBV1((# comp1 := n,
                                                            comp2 := m,
                                                            vector1 := x!2,
                                                            vector2 := y!1 #))`comp2].sigma_diff_eq")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "LAMBDA (i_1: Index[(1 / lambda_2 * Q_2)`rows]):
                                  y!1(i_1) *
                                   sigma[below(Q_2`cols)]
                                       (0, m - 1,
                                        LAMBDA (k: below(Q_2`cols)):
                                          y!1(k) * Q_2`matrix(i_1, k) * (1 / lambda_2))"
                                                                                                                                                         " LAMBDA (i_1:
                                           Index
                                               [BV2toBV1((# comp1 := n,
                                                            comp2 := m,
                                                            vector1 := x!2,
                                                            vector2 := y!1 #))`comp2]):
                                   y!1(i_1) *
                                    sigma[below(Zero_mat(m, n)`cols)]
                                        (0, n - 1,
                                         LAMBDA (k: below(Zero_mat(m, n)`cols)): 0 * x!2(k))
                                    +
                                    y!1(i_1) *
                                     sigma[below(Q_2`cols)]
                                         (0, m - 1,
                                          LAMBDA (k: below(Q_2`cols)):
                                            y!1(k) * Q_2`matrix(i_1, k) * (1 / lambda_2))"
                                                                                                                                                         "m-1"
                                                                                                                                                         "0")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (bddsimp
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1
                                                                                                                                                               1
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma_below_sub[(1 / lambda_1 * Q_1)`rows,BV2toBV1((# comp1 := n,
                                                               comp2 := m,
                                                               vector1 := x!2,
                                                               vector2 := y!1 #))`comp1].sigma_diff_eq")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "LAMBDA (i_1: Index[(1 / lambda_1 * Q_1)`rows]):
                                      x!2(i_1) *
                                       sigma[below(Q_1`cols)]
                                           (0, n - 1,
                                            LAMBDA (k: below(Q_1`cols)):
                                              x!2(k) * Q_1`matrix(i_1, k) * (1 / lambda_1))"
                                                                                                                                                                     "LAMBDA (i_1:
                                              Index
                                                  [BV2toBV1((# comp1 := n,
                                                               comp2 := m,
                                                               vector1 := x!2,
                                                               vector2 := y!1 #))`comp1]):
                                      x!2(i_1) *
                                       sigma[below(Q_1`cols)]
                                           (0, n - 1,
                                            LAMBDA (k: below(Q_1`cols)):
                                              x!2(k) * Q_1`matrix(i_1, k) * (1 / lambda_1))
                                       +
                                       x!2(i_1) *
                                        sigma[below(Zero_mat(n, m)`cols)]
                                            (0, m - 1,
                                             LAMBDA (k: below(Zero_mat(n, m)`cols)): 0 * y!1(k))"
                                                                                                                                                                     "n-1"
                                                                                                                                                                     "0")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           BV2toBV1
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(Zero_mat(n,m)`cols)].sigma_zero")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -3
                                                                                                                                                                                 -4)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil)))))
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil)))))))))))))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("3"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("4"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("4"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("5"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("5"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("6"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("6"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("7"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("7"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("8"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("8"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("9"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("9"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))))))))))
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (grind)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma[below((Zero_mat(m, n)`cols))].sigma_zero")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil)))
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil)))))))))
                                                                                                                                                             ("3"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (grind)
                                                                                                                                                                nil)))))))
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("3"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("3"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("4"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("4"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("5"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("5"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("6"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("6"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("7"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("7"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("8"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("8"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))
                                                                                                                                                         ("9"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("9"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil)))))
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil)))))))))))))))))))))))))))))))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil)))
                                                                             ("3"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("3"
                                                                                (grind)
                                                                                nil)))
                                                                             ("4"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("4"
                                                                                (grind)
                                                                                nil)))))))))))))))))))))))))))))
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil)))
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (grind)
                                                      nil)))))))))))))
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil)))
                                         ("3"
                                          (hide-all-but 1)
                                          (("3" (grind) nil)))))))))))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred Q_2)
                                    (("2"
                                      (expand square?)
                                      (("2" (assert) nil)))))))))
                               ("2"
                                (expand square?)
                                (("2" (assert) nil)))))))))))
                       ("2" (assert)
                        (("2" (expand Block2M 1)
                          (("2" (expand M2Block 1)
                            (("2" (assert)
                              (("2"
                                (typepred Q_1)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    nil)))))))))))))))))))))))
             ("2"
              (case "Bsymmetric?(M2Block(n, m, n, m)
                                         (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                          Zero_mat(n, m), 1 / lambda_2 * Q_2))")
              (("1" (expand Bsymmetric?) (("1" (propax) nil)))
               ("2" (hide 2)
                (("2" (lemma block_symmetric)
                  (("2" (inst? -1)
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (lemma symmetric_scal)
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (lemma symmetric_scal)
                                (("2"
                                  (hide-all-but (-1 1))
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      nil)))))))))))))))))))))))))
             ("3" (hide -1 -2 -4 -5)
              (("3"
                (case "Block2M(M2Block(1, m + n, 1, m + n)
                                           (I(1), transpose(V2Ml(m + n, z)),
                                            V2Ml(m + n, z),
                                            Block2M(M2Block(n, m, n, m)
                                                           (1 / lambda_1 * Q_1,
                                                            Zero_mat(m, n),
                                                            Zero_mat(n, m),
                                                            1 / lambda_2 * Q_2)))) = Block2M(M2Block(1, m + n, 1, m + n)
                                           (lambda_1*I(1), transpose(V2Ml(m + n, Block2V(V2Block(n,m)(x,vectors[m].zero)))),
                                            V2Ml(m + n, Block2V(V2Block(n,m)(x,vectors[m].zero))),
                                            Block2M(M2Block(n, m, n, m)
                                                           (1 / lambda_1 * Q_1,
                                                            Zero_mat(m, n),
                                                            Zero_mat(n, m),
                                                            Zero_mat(m,m))))) + Block2M(M2Block(1, m + n, 1, m + n)
                                           (lambda_2*I(1), transpose(V2Ml(m + n, Block2V(V2Block(n,m)(vectors[n].zero,y)))),
                                            V2Ml(m + n, Block2V(V2Block(n,m)(vectors[n].zero,y))),
                                            Block2M(M2Block(n, m, n, m)
                                                           (Zero_mat(n,n),
                                                            Zero_mat(m, n),
                                                            Zero_mat(n, m),
                                                            1 / lambda_2 * Q_2))))")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (lemma semidef_sum)
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1"
                              (case "Block2M(M2Block(1, m + n, 1, m + n)
                                                (lambda_1 * I(1),
                                                 transpose(V2Ml(m + n,
                                                                Block2V(V2Block
                                                                        (n, m)
                                                                        (x,
                                                                         vectors
                                                                         [m].zero)))),
                                                 V2Ml(m + n,
                                                      Block2V(V2Block(n, m)
                                                                     (x,
                                                                      vectors[m].zero))),
                                                 Block2M(M2Block(n, m, n, m)
                                                                (1 / lambda_1 * Q_1,
                                                                 Zero_mat(m, n),
                                                                 Zero_mat(n, m),
                                                                 Zero_mat(m, m)))))=
              Block2M(M2Block(1,m+n,1,n)(sqrt(lambda_1)*I(1),Zero_mat(m+n,1),Zero_mat(1,n),
              concat_V(1/sqrt(lambda_1)*I(n),Zero_mat(m,n))))*Block2M(M2Block(1, n, 1, n)
                                                (I(1), transpose(V2Ml(n, x)), V2Ml(n, x),
                                                 Q_1))*transpose(Block2M(M2Block(1,m+n,1,n)(sqrt(lambda_1)*I(1),Zero_mat(m+n,1),Zero_mat(1,n),
              concat_V(1/sqrt(lambda_1)*I(n),Zero_mat(m,n))))) AND
              Block2M(M2Block(1, m + n, 1, m + n)
                                                 (lambda_2 * I(1),
                                                  transpose(V2Ml(m + n,
                                                                 Block2V(V2Block
                                                                         (n, m)
                                                                         (vectors
                                                                          [n].zero,
                                                                          y)))),
                                                  V2Ml(m + n,
                                                       Block2V(V2Block(n, m)
                                                                      (vectors[n].zero,
                                                                       y))),
                                                  Block2M(M2Block(n, m, n, m)
                                                                 (Zero_mat(n, n),
                                                                  Zero_mat(m, n),
                                                                  Zero_mat(n, m),
                                                                  1 / lambda_2 * Q_2)))) =
              Block2M(M2Block(1,m+n,1,m)(sqrt(lambda_2)*I(1),Zero_mat(m+n,1),Zero_mat(1,m),concat_V(Zero_mat(n,m),(1/sqrt(lambda_2))*I(m))))*Block2M(M2Block(1, m, 1, m)
                                                (I(1), transpose(V2Ml(m, y)), V2Ml(m, y),
                                                 Q_2)) * transpose(Block2M(M2Block(1,m+n,1,m)(sqrt(lambda_2)*I(1),Zero_mat(m+n,1),Zero_mat(1,m),concat_V(Zero_mat(n,m),sqrt(lambda_2)*I(m)))))")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (lemma semidef_qua_trans)
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (lemma semidef_qua_trans)
                                            (("1"
                                              (inst
                                               -1
                                               "Block2M(M2Block(1, m, 1, m)
                                              (I(1), transpose(V2Ml(m, y)), V2Ml(m, y),
                                               Q_2))"
                                               "Block2M(M2Block(1, m + n, 1, m)
                                               (sqrt(lambda_2) * I(1),
                                                Zero_mat(m + n, 1), Zero_mat(1, m),
                                                concat_V(Zero_mat(n, m),
                                                         sqrt(lambda_2) * I(m))))")
                                              (("1" (assert) nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand Block2M 1)
                                                  (("2"
                                                    (expand M2Block)
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand Block2M)
                                              (("2"
                                                (expand M2Block)
                                                (("2"
                                                  (assert)
                                                  nil)))))))))))))))))))
                               ("2"
                                (hide 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -1 -2)
                                    (("2"
                                      (lemma trans_conv)
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (lemma trans_conv)
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       conv_transp)
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (lemma
                                                                 conv_transp)
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           M2Block
                                                                           1
                                                                           (5
                                                                            6
                                                                            7
                                                                            8
                                                                            13
                                                                            14
                                                                            15
                                                                            16))
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   eq_block)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               right_mult_ident)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "sqrt(lambda_1)*I(1)"
                                                                                                 "I(1)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     zero_times_left_1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "1"
                                                                                                       "transpose(V2Ml(n,x))")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         V2Ml
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           transpose
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 zero_times_left_1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   "Q_1")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     Q_1)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -3)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               zero_times_right)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 zero_times_right_1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "1"
                                                                                                                                   "sqrt(lambda_1) * I(1) * V2Ml(n, x)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         transpose)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           *)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             I)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               sigma)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               zero_times_left_1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "m+n"
                                                                                                 "I(1)")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   I
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         zero_times_left_1)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "m"
                                                                                                           "transpose(V2Ml(n,x))")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             transpose
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               V2Ml
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   zero_times_right_1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     1
                                                                                                                     "(Zero_mat(m + n, 1) * V2Ml(n, x) +
                        concat_V(1 / sqrt(lambda_1) * I(n), Zero_mat(m, n)) * Q_1)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           transpose)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             V2Ml)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               Block2V)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 V2Block)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   *)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     I)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         sigma
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (apply-extensionality
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 x!1<n)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     concat_V)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "sigma[below(concat_V(I(n)
                                               WITH [`matrix
                                                       := LAMBDA (i: below(I(n)`rows),
                                                                  j: below(I(n)`cols)):
                                                            1 / sqrt(lambda_1) *
                                                             I(n)`matrix(i, j)],
                                             Zero_mat(m, n))`cols)].sigma_middle")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "LAMBDA (k:
                                          below(concat_V(I(n)
                                                           WITH [`matrix
                                                                   := LAMBDA (i:
                                                                              below(I(n)`rows),
                                                                              j:
                                                                              below(I
                                                                                    (n)`cols)):
                                                                        1 / sqrt(lambda_1) *
                                                                         I(n)`matrix(i, j)],
                                                         Zero_mat(m, n))`cols)):
                                  x(k) * (1 / sqrt(lambda_1)) * IF x!1 = k THEN 1 ELSE 0 ENDIF"
                                                                                                                                                           "n-1"
                                                                                                                                                           "x!1"
                                                                                                                                                           "0")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma[below(concat_V(I(n)
                                                   WITH [`matrix
                                                           := LAMBDA (i: below(I(n)`rows),
                                                                      j: below(I(n)`cols)):
                                                                1 / sqrt(lambda_1) *
                                                                 I(n)`matrix(i, j)],
                                                 Zero_mat(m, n))`cols)].sigma_restrict_eq_0")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(concat_V(I(n)
                                                       WITH [`matrix
                                                               := LAMBDA (i: below(I(n)`rows),
                                                                          j: below(I(n)`cols)):
                                                                    1 / sqrt(lambda_1) *
                                                                     I(n)`matrix(i, j)],
                                                     Zero_mat(m, n))`cols)].sigma_restrict_eq_0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil)))))
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil)))))))))))))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil)))))
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil)))))))))))
                                                                                                                                                           ("2"
                                                                                                                                                            (hide-all-but
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (grind)
                                                                                                                                                              nil)))))
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))))))))))
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       x!1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         V2Ml)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (reveal
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "sigma[below(concat_V(I(n)
                                               WITH [`matrix
                                                       := LAMBDA (i: below(I(n)`rows),
                                                                  j: below(I(n)`cols)):
                                                            1 / sqrt(lambda_1) *
                                                             I(n)`matrix(i, j)],
                                             Zero_mat(m, n))`cols)].sigma_zero")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil)))
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil)))))))))))))))))))))))
                                                                                                                                             ("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (grind)
                                                                                                                                                nil)))
                                                                                                                                             ("3"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("3"
                                                                                                                                                (grind)
                                                                                                                                                nil)))
                                                                                                                                             ("4"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("4"
                                                                                                                                                (grind)
                                                                                                                                                nil)))
                                                                                                                                             ("5"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("5"
                                                                                                                                                (grind)
                                                                                                                                                nil)))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                           ("3"
                                                                                            (lemma
                                                                                             zero_times_right_1)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "m+n"
                                                                                               "(sqrt(lambda_1) * I(1) * I(1) +
                       Zero_mat(1, n) * transpose(V2Ml(n, x)))")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 *
                                                                                                 -1
                                                                                                 (5
                                                                                                  6
                                                                                                  7))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   I
                                                                                                   -1
                                                                                                   (3
                                                                                                    4))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     +
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           zero_times_left_1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "1"
                                                                                                             "transpose(V2Ml(n,x))")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               transpose
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 V2Ml
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       zero_times_right_1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "m+n"
                                                                                                                         "sqrt(lambda_1) * I(1) * I(1)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           *
                                                                                                                           -1
                                                                                                                           (4
                                                                                                                            5))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             I
                                                                                                                             -1
                                                                                                                             (3
                                                                                                                              4))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 zero_times_left_1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "1"
                                                                                                                                   "Q_1")
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     Q_1)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -3)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 zero_times_right_1)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "m+n"
                                                                                                                                                   "sqrt(lambda_1) * matrices.I(1) * matrices.I(1)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         transpose)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           I)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             V2Ml)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               Block2V)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 V2Block)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   concat_V)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     Zero_mat)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       *)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (decompose-equality)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             x!2<n)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 sigma
                                                                                                                                                                                 1
                                                                                                                                                                                 2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "sigma[below(n)].sigma_middle")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -1
                                                                                                                                                                                         "x!2")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst?
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                               "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst?
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil)))))))))))))))))))))))))))))
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (grind)
                                                                                                                                                                                        nil)))))))))))
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "sigma[below(n)].sigma_zero")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil)))
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil)))))))))
                                                                                                                                                                           ("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil)))))))
                                                                                           ("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               zero_times_left_1)
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 zero_times_right_1)
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "m+n"
                                                                                                   "(matrices.+)
                                   (matrices.*
                                        (matrices.Zero_mat(m + n, 1), matrices.I(1)),
                                    matrices.*
                                        (matrices.concat_V
                                             (matrices.*
                                                  (1 / reals@sqrt.sqrt(lambda_1),
                                                   matrices.I(n)),
                                              matrices.Zero_mat(m, n)),
                                         matrices.transpose(V2Ml(n, x))))")
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        (("4"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "m+n"
                                                                                                             "V2Ml(n,x)")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              (("4"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("4"
                                                                                                                  (assert)
                                                                                                                  (("4"
                                                                                                                    (expand
                                                                                                                     Block2M)
                                                                                                                    (("4"
                                                                                                                      (expand
                                                                                                                       M2Block)
                                                                                                                      (("4"
                                                                                                                        (expand
                                                                                                                         Zero_mat)
                                                                                                                        (("4"
                                                                                                                          (expand
                                                                                                                           I)
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             concat_V)
                                                                                                                            (("4"
                                                                                                                              (expand
                                                                                                                               transpose)
                                                                                                                              (("4"
                                                                                                                                (expand
                                                                                                                                 *)
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  (("4"
                                                                                                                                    (hide
                                                                                                                                     -1
                                                                                                                                     -2
                                                                                                                                     -3)
                                                                                                                                    (("4"
                                                                                                                                      (apply-extensionality)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "x!1<Q_1`rows")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "x!2<Q_1`cols")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   " sigma[below(Q_1`cols)].sigma_middle")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "x!2")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 " sigma[below(n)].sigma_middle")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       -2)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst?
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                   "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (inst?
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil)))))))))))))))))))))))))
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (grind)
                                                                                                                                                                                                nil)))))))))))))))
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil)))))))))))))))))))
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil)))))))))))))))
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil)))))
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil)))))))
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "sigma[below(Q_1`cols)].sigma_zero")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil)))
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil)))))))))))
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (case
                                                                                                                                                 x!2<n)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "sigma[below(n)].sigma_zero")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       x!2=i)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil)))))))))))
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (grind)
                                                                                                                                                                nil)))))))))
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil)))))
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil)))))))
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "sigma[below(Q_1`cols)].sigma_zero")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil)))
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil)))))))))))))))))
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil)))
                                                                                                                                       ("3"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("3"
                                                                                                                                          (grind)
                                                                                                                                          nil)))
                                                                                                                                       ("4"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("4"
                                                                                                                                          (grind)
                                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                               ("2"
                                                                                (lemma
                                                                                 eq_block)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           zero_times_left_1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "1"
                                                                                             " transpose(V2Ml(m, y))")
                                                                                            (("1"
                                                                                              (expand
                                                                                               transpose
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 V2Ml
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       zero_times_right_1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "1"
                                                                                                         "(matrices.+)
                                   (matrices.*
                                        (matrices.*
                                             (reals@sqrt.sqrt(lambda_2), matrices.I(1)),
                                         V2Ml(m, y)),
                                    matrices.*(matrices.Zero_mat(1, m), Q_2))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               *)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 I)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   transpose)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       sigma)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))))))))))))))))))))))))
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             zero_times_left_1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "m+n"
                                                                                               "I(1)")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 I
                                                                                                 -1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       zero_times_left_1)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "m"
                                                                                                         "transpose(V2Ml(m,y))")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           transpose
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             V2Ml
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 zero_times_right_1)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   "(Zero_mat(m + n, 1) * V2Ml(m, y) +
                                     concat_V(Zero_mat(n, m), sqrt(lambda_2) * I(m)) * Q_2)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1
                                                                                                                       -2
                                                                                                                       -3
                                                                                                                       -4
                                                                                                                       -5)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         transpose)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           V2Ml)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             Block2V)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               V2Block)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 *)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   I)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       sigma
                                                                                                                                       1
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (apply-extensionality
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               concat_V)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   x!1<n)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       Zero_mat)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "sigma[below(concat_V(Zero_mat(n, m),
                                             I(m)
                                               WITH [`matrix
                                                       := LAMBDA (i: below(I(m)`rows),
                                                                  j: below(I(m)`cols)):
                                                            sqrt(lambda_2) *
                                                             I(m)`matrix(i, j)])`cols)].sigma_zero")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil)))
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))))))))
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma[below(concat_V(Zero_mat(n, m),
                                             I(m)
                                               WITH [`matrix
                                                       := LAMBDA (i: below(I(m)`rows),
                                                                  j: below(I(m)`cols)):
                                                            sqrt(lambda_2) *
                                                             I(m)`matrix(i, j)])`cols)].sigma_middle")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "x!1-n")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (bddsimp
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "sigma[below(concat_V(Zero_mat(n, m),
                                                     I(m)
                                                       WITH [`matrix
                                                               := LAMBDA (i: below(I(m)`rows),
                                                                          j: below(I(m)`cols)):
                                                                    sqrt(lambda_2) *
                                                                     I(m)`matrix(i, j)])`cols)].sigma_restrict_eq_0")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst?
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "sigma[below(concat_V(Zero_mat(n, m),
                                                         I(m)
                                                           WITH [`matrix
                                                                   := LAMBDA (i: below(I(m)`rows),
                                                                              j: below(I(m)`cols)):
                                                                        sqrt(lambda_2) *
                                                                         I(m)`matrix(i, j)])`cols)].sigma_restrict_eq_0")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (postpone)
                                                                                                                                                                                              nil)))))))
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (postpone)
                                                                                                                                                                                        nil)))
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (postpone)
                                                                                                                                                                                      nil)))))))))))))
                                                                                                                                                                         ("2"
                                                                                                                                                                          (postpone)
                                                                                                                                                                          nil)))
                                                                                                                                                                       ("2"
                                                                                                                                                                        (postpone)
                                                                                                                                                                        nil)))))))))
                                                                                                                                                               ("2"
                                                                                                                                                                (postpone)
                                                                                                                                                                nil)))))
                                                                                                                                                           ("2"
                                                                                                                                                            (postpone)
                                                                                                                                                            nil)))
                                                                                                                                                         ("2"
                                                                                                                                                          (postpone)
                                                                                                                                                          nil)))
                                                                                                                                                       ("2"
                                                                                                                                                        (postpone)
                                                                                                                                                        nil)))))))))))))
                                                                                                                                           ("2"
                                                                                                                                            (postpone)
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (postpone)
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (postpone)
                                                                                                                                            nil)
                                                                                                                                           ("5"
                                                                                                                                            (postpone)
                                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                         ("3"
                                                                                          (postpone)
                                                                                          nil)
                                                                                         ("4"
                                                                                          (postpone)
                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                               ("3"
                                (hide 2)
                                (("3"
                                  (flatten)
                                  (("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (expand Block2M)
                                      (("3"
                                        (expand M2Block)
                                        (("3" (assert) nil)))))))))))
                               ("4"
                                (hide 2)
                                (("4"
                                  (flatten)
                                  (("4"
                                    (hide-all-but 1)
                                    (("4"
                                      (expand Block2M 1)
                                      (("4"
                                        (expand M2Block 1)
                                        (("4" (assert) nil)))))))))))
                               ("5"
                                (hide 2)
                                (("5"
                                  (flatten)
                                  (("5"
                                    (hide-all-but 1)
                                    (("5"
                                      (expand Block2M 1)
                                      (("5"
                                        (expand M2Block 1)
                                        (("5" (assert) nil)))))))))))
                               ("6"
                                (hide 2)
                                (("6"
                                  (flatten)
                                  (("6"
                                    (expand V2Ml 1)
                                    (("6" (propax) nil)))))))
                               ("7"
                                (hide 2)
                                (("7"
                                  (flatten)
                                  (("7"
                                    (expand V2Ml 1)
                                    (("7" (propax) nil)))))))
                               ("8"
                                (hide 2)
                                (("8"
                                  (flatten)
                                  (("8"
                                    (expand V2Block)
                                    (("8" (propax) nil)))))))
                               ("9"
                                (hide 2)
                                (("9"
                                  (expand Block2M 1)
                                  (("9"
                                    (expand M2Block 1)
                                    (("9" (assert) nil)))))))
                               ("10"
                                (hide 2)
                                (("10"
                                  (expand Block2M 1)
                                  (("10"
                                    (expand M2Block 1)
                                    (("10" (assert) nil)))))))
                               ("11"
                                (hide 2)
                                (("11"
                                  (expand V2Ml 1)
                                  (("11" (propax) nil)))))))))))
                         ("2" (hide-all-but 1)
                          (("2" (grind) nil)))))))))))
                 ("2" (hide 2)
                  (("2" (assert)
                    (("2" (lemma conv_sum)
                      (("2" (inst? -1)
                        (("2" (replace -1)
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (lemma eq_block)
                                (("2"
                                  (hide -2 -3)
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (split)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand I)
                                              (("1"
                                                (expand *)
                                                (("1"
                                                  (expand +)
                                                  (("1"
                                                    (propax)
                                                    nil)))))))))
                                           ("2"
                                            (assert)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (hide -1 -2)
                                                    (("2"
                                                      (decompose-equality)
                                                      (("1"
                                                        (case x!1<n)
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (grind)
                                                        nil)))))))))))))
                                           ("3"
                                            (replace -2)
                                            (("3"
                                              (hide -2 -3)
                                              (("3"
                                                (hide -1)
                                                (("3"
                                                  (grind)
                                                  (("3"
                                                    (decompose-equality)
                                                    (("1"
                                                      (case x!2<n)
                                                      (("1"
                                                        (assert)
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil)))
                                                     ("2"
                                                      (grind)
                                                      nil)))))))))))
                                           ("4"
                                            (lemma conv_sum)
                                            (("4"
                                              (inst? -1)
                                              (("4"
                                                (replace -1)
                                                (("4"
                                                  (hide -1)
                                                  (("4"
                                                    (lemma eq_block)
                                                    (("4"
                                                      (inst? -1)
                                                      (("4"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))))))))))))))
                 ("3" (hide 2)
                  (("3" (assert)
                    (("3" (split)
                      (("1" (expand Block2M 1)
                        (("1" (expand M2Block 1)
                          (("1" (assert)
                            (("1" (expand V2Ml)
                              (("1" (propax) nil)))))))))
                       ("2" (expand Block2M)
                        (("2" (expand M2Block)
                          (("2" (assert)
                            (("2" (expand V2Ml)
                              (("2" (propax) nil)))))))))))))))
                 ("4" (hide-all-but 1) (("4" (grind) nil)))
                 ("5" (hide-all-but 1) (("5" (grind) nil)))
                 ("6" (hide-all-but 1) (("6" (grind) nil)))
                 ("7" (hide-all-but 1) (("7" (grind) nil)))
                 ("8" (hide-all-but 1) (("8" (grind) nil)))
                 ("9" (hide-all-but 1) (("9" (grind) nil)))
                 ("10" (hide-all-but 1) (("10" (grind) nil)))
                 ("11" (hide-all-but 1)
                  (("11" (grind) nil))))))))))))))))
    nil)
   nil nil)
  (ellipsoid_combination-1 nil 3560100119
   ("" (skeep)
    (("" (expand in_ellipsoid_Q?)
      (("" (flatten)
        (("" (assert)
          (("" (split)
            (("1" (hide-all-but (1 -1 -4))
              (("1" (expand semidef_pos?)
                (("1" (skeep)
                  (("1" (lemma split_vect)
                    (("1" (inst -1 "n+m" "x!1" "n")
                      (("1" (assert)
                        (("1" (skeep -1)
                          (("1" (lemma semidef_scal)
                            (("1" (inst-cp -1 "1/lambda_1" "Q_1")
                              (("1"
                                (inst -1 "1/lambda_2" "Q_2")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma block_mult_comm)
                                      (("1"
                                        (inst
                                         -1
                                         "M2Block(n, m, n, m)
                       (1 / lambda_1 * Q_1, Zero_mat(m, n), Zero_mat(n, m),
                        1 / lambda_2 * Q_2)"
                                         "BV2toBV1((# comp1 := n,
                             comp2 := m,
                             vector1 := x!2,
                             vector2 := y!1 #))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 block_v_mult_comm)
                                                (("1"
                                                  (inst
                                                   -1
                                                   n
                                                   m
                                                   "BV2toBV1((# comp1 := n,
                          comp2 := m,
                          vector1 := x!2,
                          vector2 := y!1 #))"
                                                   "BV2toBV1(M2Block(n, m, n, m)
                               (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                Zero_mat(n, m), 1 / lambda_2 * Q_2)
                         *
                         BV2toBV1((# comp1 := n,
                                     comp2 := m,
                                     vector1 := x!2,
                                     vector2 := y!1 #)))")
                                                  (("1"
                                                    (expand * -1 1)
                                                    (("1"
                                                      (expand * 1 1)
                                                      (("1"
                                                        (lemma
                                                         "sigma_below_sub[BV2toBV1((# comp1 := n,
                                       comp2 := m,
                                       vector1 := x!2,
                                       vector2 := y!1 #))`comp1
                            +
                            BV2toBV1((# comp1 := n,
                                        comp2 := m,
                                        vector1 := x!2,
                                        vector2 := y!1 #))`comp2,Block2M(M2Block(n, m, n, m)
                                          (1 / lambda_1 * Q_1,
                                           Zero_mat(m, n), Zero_mat(n, m),
                                           1 / lambda_2 * Q_2))`rows].sigma_diff_eq")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             Block2M
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               M2Block
                                                               1
                                                               (1 2))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   BV2toBV1
                                                                   -1
                                                                   (1
                                                                    2))
                                                                  (("1"
                                                                    (expand
                                                                     BV2toBV1
                                                                     -2
                                                                     (1
                                                                      2))
                                                                    (("1"
                                                                      (typepred
                                                                       Q_1)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "LAMBDA (i:
                      Index
                          [BV2toBV1((# comp1 := n,
                                       comp2 := m,
                                       vector1 := x!2,
                                       vector2 := y!1 #))`comp1
                            +
                            BV2toBV1((# comp1 := n,
                                        comp2 := m,
                                        vector1 := x!2,
                                        vector2 := y!1 #))`comp2]):
              Block2V(BV2toBV1((# comp1 := n,
                                  comp2 := m,
                                  vector1 := x!2,
                                  vector2 := y!1 #)))
                     (i)
               *
               Block2V(BV2toBV1(M2Block(n, m, n, m)
                                       (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                        Zero_mat(n, m), 1 / lambda_2 * Q_2)
                                 *
                                 BV2toBV1((# comp1 := n,
                                             comp2 := m,
                                             vector1 := x!2,
                                             vector2 := y!1 #))))
                      (i)"
                                                                             "LAMBDA (i:
                      Index
                          [Block2M(M2Block(n, m, n, m)
                                          (1 / lambda_1 * Q_1,
                                           Zero_mat(m, n), Zero_mat(n, m),
                                           1 / lambda_2 * Q_2))`rows]):
              Block2V(BV2toBV1((# comp1 := n,
                                  comp2 := m,
                                  vector1 := x!2,
                                  vector2 := y!1 #)))
                     (i)
               *
               Block2V(BV2toBV1(M2Block(n, m, n, m)
                                       (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                        Zero_mat(n, m), 1 / lambda_2 * Q_2)
                                 *
                                 BV2toBV1((# comp1 := n,
                                             comp2 := m,
                                             vector1 := x!2,
                                             vector2 := y!1 #))))
                      (i)"
                                                                             "m+n-1"
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 Block2M
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   M2Block
                                                                                   -1
                                                                                   (1
                                                                                    2))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             *
                                                                                             1
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 *
                                                                                                 1
                                                                                                 4)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     *
                                                                                                     1
                                                                                                     8)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           semidef_pos?)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             y!1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               x!2)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   *
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       +
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           BV2toBV1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             Zero_mat
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               *
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 *
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -3
                                                                                                                                   -4
                                                                                                                                   -5)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       Q_1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               Q_2)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -1
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma_below_sub[(1 / lambda_2 * Q_2)`rows, BV2toBV1((# comp1 := n,
                                        comp2 := m,
                                        vector1 := x!2,
                                        vector2 := y!1 #))`comp2].sigma_diff_eq")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "LAMBDA (i_1: Index[(1 / lambda_2 * Q_2)`rows]):
              y!1(i_1) *
               sigma[below(Q_2`cols)]
                   (0, m - 1,
                    LAMBDA (k: below(Q_2`cols)):
                      y!1(k) * Q_2`matrix(i_1, k) * (1 / lambda_2))"
                                                                                                                                                         " LAMBDA (i_1:
                       Index
                           [BV2toBV1((# comp1 := n,
                                        comp2 := m,
                                        vector1 := x!2,
                                        vector2 := y!1 #))`comp2]):
               y!1(i_1) *
                sigma[below(Zero_mat(m, n)`cols)]
                    (0, n - 1,
                     LAMBDA (k: below(Zero_mat(m, n)`cols)): 0 * x!2(k))
                +
                y!1(i_1) *
                 sigma[below(Q_2`cols)]
                     (0, m - 1,
                      LAMBDA (k: below(Q_2`cols)):
                        y!1(k) * Q_2`matrix(i_1, k) * (1 / lambda_2))"
                                                                                                                                                         "m-1"
                                                                                                                                                         "0")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (bddsimp
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1
                                                                                                                                                               1
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma_below_sub[(1 / lambda_1 * Q_1)`rows,BV2toBV1((# comp1 := n,
                                       comp2 := m,
                                       vector1 := x!2,
                                       vector2 := y!1 #))`comp1].sigma_diff_eq")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "LAMBDA (i_1: Index[(1 / lambda_1 * Q_1)`rows]):
              x!2(i_1) *
               sigma[below(Q_1`cols)]
                   (0, n - 1,
                    LAMBDA (k: below(Q_1`cols)):
                      x!2(k) * Q_1`matrix(i_1, k) * (1 / lambda_1))"
                                                                                                                                                                     "LAMBDA (i_1:
                      Index
                          [BV2toBV1((# comp1 := n,
                                       comp2 := m,
                                       vector1 := x!2,
                                       vector2 := y!1 #))`comp1]):
              x!2(i_1) *
               sigma[below(Q_1`cols)]
                   (0, n - 1,
                    LAMBDA (k: below(Q_1`cols)):
                      x!2(k) * Q_1`matrix(i_1, k) * (1 / lambda_1))
               +
               x!2(i_1) *
                sigma[below(Zero_mat(n, m)`cols)]
                    (0, m - 1,
                     LAMBDA (k: below(Zero_mat(n, m)`cols)): 0 * y!1(k))"
                                                                                                                                                                     "n-1"
                                                                                                                                                                     "0")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           BV2toBV1
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(Zero_mat(n,m)`cols)].sigma_zero")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -3
                                                                                                                                                                                 -4)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("4"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("4"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("5"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("5"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("6"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("6"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("7"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("7"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("8"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("8"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("9"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("9"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (grind)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma[below((Zero_mat(m, n)`cols))].sigma_zero")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("3"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("4"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("4"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("5"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("5"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("6"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("6"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("7"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("7"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("8"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("8"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("9"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("9"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (hide-all-but 1)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred Q_2)
                                    (("2"
                                      (expand square?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand square?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand Block2M 1)
                          (("2" (expand M2Block 1)
                            (("2" (assert)
                              (("2"
                                (typepred Q_1)
                                (("2"
                                  (replace -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (case "Bsymmetric?(M2Block(n, m, n, m)
                                (1 / lambda_1 * Q_1, Zero_mat(m, n),
                                 Zero_mat(n, m), 1 / lambda_2 * Q_2))")
              (("1" (expand Bsymmetric?) (("1" (propax) nil nil)) nil)
               ("2" (hide 2)
                (("2" (lemma block_symmetric)
                  (("2" (inst? -1)
                    (("2" (assert)
                      (("2" (hide 2)
                        (("2" (lemma symmetric_scal)
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (lemma symmetric_scal)
                                (("2"
                                  (hide-all-but (-1 1))
                                  (("2"
                                    (inst? -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -1 -2 -4 -5)
              (("3"
                (case "Block2M(M2Block(1, m + n, 1, m + n)
                                  (I(1), transpose(V2Ml(m + n, z)),
                                   V2Ml(m + n, z),
                                   Block2M(M2Block(n, m, n, m)
                                                  (1 / lambda_1 * Q_1,
                                                   Zero_mat(m, n),
                                                   Zero_mat(n, m),
                                                   1 / lambda_2 * Q_2)))) = Block2M(M2Block(1, m + n, 1, m + n)
                                  (lambda_1*I(1), transpose(V2Ml(m + n, Block2V(V2Block(n,m)(x,vectors[m].zero)))),
                                   V2Ml(m + n, Block2V(V2Block(n,m)(x,vectors[m].zero))),
                                   Block2M(M2Block(n, m, n, m)
                                                  (1 / lambda_1 * Q_1,
                                                   Zero_mat(m, n),
                                                   Zero_mat(n, m),
                                                   Zero_mat(m,m))))) + Block2M(M2Block(1, m + n, 1, m + n)
                                  (lambda_2*I(1), transpose(V2Ml(m + n, Block2V(V2Block(n,m)(vectors[n].zero,y)))),
                                   V2Ml(m + n, Block2V(V2Block(n,m)(vectors[n].zero,y))),
                                   Block2M(M2Block(n, m, n, m)
                                                  (Zero_mat(n,n),
                                                   Zero_mat(m, n),
                                                   Zero_mat(n, m),
                                                   1 / lambda_2 * Q_2))))")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (lemma semidef_sum)
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1"
                              (case "Block2M(M2Block(1, m + n, 1, m + n)
                                  (lambda_1 * I(1),
                                   transpose(V2Ml(m + n,
                                                  Block2V(V2Block
                                                          (n, m)
                                                          (x,
                                                           vectors
                                                           [m].zero)))),
                                   V2Ml(m + n,
                                        Block2V(V2Block(n, m)
                                                       (x,
                                                        vectors[m].zero))),
                                   Block2M(M2Block(n, m, n, m)
                                                  (1 / lambda_1 * Q_1,
                                                   Zero_mat(m, n),
                                                   Zero_mat(n, m),
                                                   Zero_mat(m, m)))))=
Block2M(M2Block(1,m+n,1,n)(sqrt(lambda_1)*I(1),Zero_mat(m+n,1),Zero_mat(1,n),
concat_V(1/sqrt(lambda_1)*I(n),Zero_mat(m,n))))*Block2M(M2Block(1, n, 1, n)
                                  (I(1), transpose(V2Ml(n, x)), V2Ml(n, x),
                                   Q_1))*transpose(Block2M(M2Block(1,m+n,1,n)(sqrt(lambda_1)*I(1),Zero_mat(m+n,1),Zero_mat(1,n),
concat_V(1/sqrt(lambda_1)*I(n),Zero_mat(m,n))))) AND

Block2M(M2Block(1, m + n, 1, m + n)
                                   (lambda_2 * I(1),
                                    transpose(V2Ml(m + n,
                                                   Block2V(V2Block
                                                           (n, m)
                                                           (vectors
                                                            [n].zero,
                                                            y)))),
                                    V2Ml(m + n,
                                         Block2V(V2Block(n, m)
                                                        (vectors[n].zero,
                                                         y))),
                                    Block2M(M2Block(n, m, n, m)
                                                   (Zero_mat(n, n),
                                                    Zero_mat(m, n),
                                                    Zero_mat(n, m),
                                                    1 / lambda_2 * Q_2)))) = 
Block2M(M2Block(1,m+n,1,m)(sqrt(lambda_2)*I(1),Zero_mat(m+n,1),Zero_mat(1,m),concat_V(Zero_mat(n,m),sqrt(lambda_2)*I(m))))*Block2M(M2Block(1, m, 1, m)
                                  (I(1), transpose(V2Ml(m, y)), V2Ml(m, y),
                                   Q_2)) * transpose(Block2M(M2Block(1,m+n,1,m)(sqrt(lambda_2)*I(1),Zero_mat(m+n,1),Zero_mat(1,m),concat_V(Zero_mat(n,m),sqrt(lambda_2)*I(m)))))")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (lemma semidef_qua_trans)
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (lemma semidef_qua_trans)
                                            (("1"
                                              (inst
                                               -1
                                               "Block2M(M2Block(1, m, 1, m)
                                  (I(1), transpose(V2Ml(m, y)), V2Ml(m, y),
                                   Q_2))"
                                               "Block2M(M2Block(1, m + n, 1, m)
                                   (sqrt(lambda_2) * I(1),
                                    Zero_mat(m + n, 1), Zero_mat(1, m),
                                    concat_V(Zero_mat(n, m),
                                             sqrt(lambda_2) * I(m))))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand Block2M 1)
                                                  (("2"
                                                    (expand M2Block)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand Block2M)
                                              (("2"
                                                (expand M2Block)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -1 -2)
                                    (("2"
                                      (lemma trans_conv)
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (lemma trans_conv)
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       conv_transp)
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (lemma
                                                                 conv_transp)
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           M2Block
                                                                           1
                                                                           (5
                                                                            6
                                                                            7
                                                                            8
                                                                            13
                                                                            14
                                                                            15
                                                                            16))
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   eq_block)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               right_mult_ident)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "sqrt(lambda_1)*I(1)"
                                                                                                 "I(1)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     zero_times_left_1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "1"
                                                                                                       "transpose(V2Ml(n,x))")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         V2Ml
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           transpose
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 zero_times_left_1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   "Q_1")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     Q_1)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -3)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               zero_times_right)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 zero_times_right_1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "1"
                                                                                                                                   "sqrt(lambda_1) * I(1) * V2Ml(n, x)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         transpose)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           *)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             I)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               sigma)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               zero_times_left_1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "m+n"
                                                                                                 "I(1)")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   I
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         zero_times_left_1)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "m"
                                                                                                           "transpose(V2Ml(n,x))")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             transpose
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               V2Ml
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   zero_times_right_1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     1
                                                                                                                     "(Zero_mat(m + n, 1) * V2Ml(n, x) +
          concat_V(1 / sqrt(lambda_1) * I(n), Zero_mat(m, n)) * Q_1)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           transpose)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             V2Ml)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               Block2V)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 V2Block)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   *)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     I)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         sigma
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (apply-extensionality
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 x!1<n)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     concat_V)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "sigma[below(concat_V(I(n)
                             WITH [`matrix
                                     := LAMBDA (i: below(I(n)`rows),
                                                j: below(I(n)`cols)):
                                          1 / sqrt(lambda_1) *
                                           I(n)`matrix(i, j)],
                           Zero_mat(m, n))`cols)].sigma_middle")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "LAMBDA (k:
                      below(concat_V(I(n)
                                       WITH [`matrix
                                               := LAMBDA (i:
                                                          below(I(n)`rows),
                                                          j:
                                                          below(I
                                                                (n)`cols)):
                                                    1 / sqrt(lambda_1) *
                                                     I(n)`matrix(i, j)],
                                     Zero_mat(m, n))`cols)):
              x(k) * (1 / sqrt(lambda_1)) * IF x!1 = k THEN 1 ELSE 0 ENDIF"
                                                                                                                                                           "n-1"
                                                                                                                                                           "x!1"
                                                                                                                                                           "0")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sigma[below(concat_V(I(n)
                             WITH [`matrix
                                     := LAMBDA (i: below(I(n)`rows),
                                                j: below(I(n)`cols)):
                                          1 / sqrt(lambda_1) *
                                           I(n)`matrix(i, j)],
                           Zero_mat(m, n))`cols)].sigma_restrict_eq_0")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(concat_V(I(n)
                             WITH [`matrix
                                     := LAMBDA (i: below(I(n)`rows),
                                                j: below(I(n)`cols)):
                                          1 / sqrt(lambda_1) *
                                           I(n)`matrix(i, j)],
                           Zero_mat(m, n))`cols)].sigma_restrict_eq_0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide-all-but
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       x!1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         V2Ml)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (reveal
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "sigma[below(concat_V(I(n)
                             WITH [`matrix
                                     := LAMBDA (i: below(I(n)`rows),
                                                j: below(I(n)`cols)):
                                          1 / sqrt(lambda_1) *
                                           I(n)`matrix(i, j)],
                           Zero_mat(m, n))`cols)].sigma_zero")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("3"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("4"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("4"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("5"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("5"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (lemma
                                                                                             zero_times_right_1)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "m+n"
                                                                                               "(sqrt(lambda_1) * I(1) * I(1) +
         Zero_mat(1, n) * transpose(V2Ml(n, x)))")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 *
                                                                                                 -1
                                                                                                 (5
                                                                                                  6
                                                                                                  7))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   I
                                                                                                   -1
                                                                                                   (3
                                                                                                    4))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     +
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           zero_times_left_1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "1"
                                                                                                             "transpose(V2Ml(n,x))")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               transpose
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 V2Ml
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       zero_times_right_1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "m+n"
                                                                                                                         "sqrt(lambda_1) * I(1) * I(1)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           *
                                                                                                                           -1
                                                                                                                           (4
                                                                                                                            5))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             I
                                                                                                                             -1
                                                                                                                             (3
                                                                                                                              4))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 zero_times_left_1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "1"
                                                                                                                                   "Q_1")
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     Q_1)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -3)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 zero_times_right_1)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "m+n"
                                                                                                                                                   "sqrt(lambda_1) * matrices.I(1) * matrices.I(1)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         transpose)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           I)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             V2Ml)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               Block2V)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 V2Block)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   concat_V)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     Zero_mat)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       *)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (decompose-equality)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             x!2<n)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 sigma
                                                                                                                                                                                 1
                                                                                                                                                                                 2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "sigma[below(n)].sigma_middle")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -1
                                                                                                                                                                                         "x!2")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst?
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (replace
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                               "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst?
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (grind)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "sigma[below(n)].sigma_zero")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst?
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (lemma
                                                                                               zero_times_left_1)
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 zero_times_right_1)
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "m+n"
                                                                                                   "(matrices.+)
                     (matrices.*
                          (matrices.Zero_mat(m + n, 1), matrices.I(1)),
                      matrices.*
                          (matrices.concat_V
                               (matrices.*
                                    (1 / reals@sqrt.sqrt(lambda_1),
                                     matrices.I(n)),
                                matrices.Zero_mat(m, n)),
                           matrices.transpose(V2Ml(n, x))))")
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        (("4"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("4"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "m+n"
                                                                                                             "V2Ml(n,x)")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              (("4"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("4"
                                                                                                                  (assert)
                                                                                                                  (("4"
                                                                                                                    (expand
                                                                                                                     Block2M)
                                                                                                                    (("4"
                                                                                                                      (expand
                                                                                                                       M2Block)
                                                                                                                      (("4"
                                                                                                                        (expand
                                                                                                                         Zero_mat)
                                                                                                                        (("4"
                                                                                                                          (expand
                                                                                                                           I)
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             concat_V)
                                                                                                                            (("4"
                                                                                                                              (expand
                                                                                                                               transpose)
                                                                                                                              (("4"
                                                                                                                                (expand
                                                                                                                                 *)
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  (("4"
                                                                                                                                    (hide
                                                                                                                                     -1
                                                                                                                                     -2
                                                                                                                                     -3)
                                                                                                                                    (("4"
                                                                                                                                      (apply-extensionality)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "x!1<Q_1`rows")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "x!2<Q_1`cols")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   " sigma[below(Q_1`cols)].sigma_middle")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "x!2")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 " sigma[below(n)].sigma_middle")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "x!1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       -2)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst?
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                   "sigma[below(n)].sigma_restrict_eq_0")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (inst?
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (grind)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "sigma[below(Q_1`cols)].sigma_zero")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (case
                                                                                                                                                 x!2<n)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "sigma[below(Q_1`cols)].sigma_restrict_eq_0")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "sigma[below(n)].sigma_zero")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       x!2=i)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "sigma[below(Q_1`cols)].sigma_zero")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("3"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("4"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("4"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 eq_block)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           zero_times_left_1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "1"
                                                                                             " transpose(V2Ml(m, y))")
                                                                                            (("1"
                                                                                              (expand
                                                                                               transpose
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 V2Ml
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       zero_times_right_1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "1"
                                                                                                         "(matrices.+)
                     (matrices.*
                          (matrices.*
                               (reals@sqrt.sqrt(lambda_2), matrices.I(1)),
                           V2Ml(m, y)),
                      matrices.*(matrices.Zero_mat(1, m), Q_2))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               *)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 I)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   transpose)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       sigma)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             zero_times_left_1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "m+n"
                                                                                               "I(1)")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 I
                                                                                                 -1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       zero_times_left_1)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "m"
                                                                                                         "transpose(V2Ml(m,y))")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           transpose
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             V2Ml
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 zero_times_right_1)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   "(Zero_mat(m + n, 1) * V2Ml(m, y) +
                       concat_V(Zero_mat(n, m), sqrt(lambda_2) * I(m)) * Q_2)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1
                                                                                                                       -2
                                                                                                                       -3
                                                                                                                       -4
                                                                                                                       -5)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         transpose)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           V2Ml)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             Block2V)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               V2Block)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 *)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   I)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       sigma
                                                                                                                                       1
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (apply-extensionality
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               concat_V)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   x!1<n)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       Zero_mat)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "sigma[below(concat_V(Zero_mat(n, m),
                           I(m)
                             WITH [`matrix
                                     := LAMBDA (i: below(I(m)`rows),
                                                j: below(I(m)`cols)):
                                          sqrt(lambda_2) *
                                           I(m)`matrix(i, j)])`cols)].sigma_zero")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma[below(concat_V(Zero_mat(n, m),
                           I(m)
                             WITH [`matrix
                                     := LAMBDA (i: below(I(m)`rows),
                                                j: below(I(m)`cols)):
                                          sqrt(lambda_2) *
                                           I(m)`matrix(i, j)])`cols)].sigma_middle")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "x!1-n")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (bddsimp
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "sigma[below(concat_V(Zero_mat(n, m),
                           I(m)
                             WITH [`matrix
                                     := LAMBDA (i: below(I(m)`rows),
                                                j: below(I(m)`cols)):
                                          sqrt(lambda_2) *
                                           I(m)`matrix(i, j)])`cols)].sigma_restrict_eq_0")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst?
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "sigma[below(concat_V(Zero_mat(n, m),
                           I(m)
                             WITH [`matrix
                                     := LAMBDA (i: below(I(m)`rows),
                                                j: below(I(m)`cols)):
                                          sqrt(lambda_2) *
                                           I(m)`matrix(i, j)])`cols)].sigma_restrict_eq_0")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst?
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (postpone)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (postpone)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (postpone)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (postpone)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (postpone)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (postpone)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (postpone)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (postpone)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (postpone)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (postpone)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (postpone)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (postpone)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("5"
                                                                                                                                            (postpone)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil)
                                                                                         ("4"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (flatten)
                                  (("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (expand Block2M)
                                      (("3"
                                        (expand M2Block)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (flatten)
                                  (("4"
                                    (hide-all-but 1)
                                    (("4"
                                      (expand Block2M 1)
                                      (("4"
                                        (expand M2Block 1)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide 2)
                                (("5"
                                  (flatten)
                                  (("5"
                                    (hide-all-but 1)
                                    (("5"
                                      (expand Block2M 1)
                                      (("5"
                                        (expand M2Block 1)
                                        (("5" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (hide 2)
                                (("6"
                                  (flatten)
                                  (("6"
                                    (expand V2Ml 1)
                                    (("6" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (hide 2)
                                (("7"
                                  (flatten)
                                  (("7"
                                    (expand V2Ml 1)
                                    (("7" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("8"
                                (hide 2)
                                (("8"
                                  (flatten)
                                  (("8"
                                    (expand V2Block)
                                    (("8" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("9"
                                (hide 2)
                                (("9"
                                  (expand Block2M 1)
                                  (("9"
                                    (expand M2Block 1)
                                    (("9" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("10"
                                (hide 2)
                                (("10"
                                  (expand Block2M 1)
                                  (("10"
                                    (expand M2Block 1)
                                    (("10" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("11"
                                (hide 2)
                                (("11"
                                  (expand V2Ml 1)
                                  (("11" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (assert)
                    (("2" (lemma conv_sum)
                      (("2" (inst? -1)
                        (("2" (replace -1)
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (lemma eq_block)
                                (("2"
                                  (hide -2 -3)
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (split)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand I)
                                              (("1"
                                                (expand *)
                                                (("1"
                                                  (expand +)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (hide -1 -2)
                                                    (("2"
                                                      (decompose-equality)
                                                      (("1"
                                                        (case x!1<n)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (replace -2)
                                            (("3"
                                              (hide -2 -3)
                                              (("3"
                                                (hide -1)
                                                (("3"
                                                  (grind)
                                                  (("3"
                                                    (decompose-equality)
                                                    (("1"
                                                      (case x!2<n)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (lemma conv_sum)
                                            (("4"
                                              (inst? -1)
                                              (("4"
                                                (replace -1)
                                                (("4"
                                                  (hide -1)
                                                  (("4"
                                                    (lemma eq_block)
                                                    (("4"
                                                      (inst? -1)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (assert)
                    (("3" (split)
                      (("1" (expand Block2M 1)
                        (("1" (expand M2Block 1)
                          (("1" (assert)
                            (("1" (expand V2Ml)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand Block2M)
                        (("2" (expand M2Block)
                          (("2" (assert)
                            (("2" (expand V2Ml)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
                 ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil)
                 ("6" (hide-all-but 1) (("6" (grind) nil nil)) nil)
                 ("7" (hide-all-but 1) (("7" (grind) nil nil)) nil)
                 ("8" (hide-all-but 1) (("8" (grind) nil nil)) nil)
                 ("9" (hide-all-but 1) (("9" (grind) nil nil)) nil)
                 ("10" (hide-all-but 1) (("10" (grind) nil nil)) nil)
                 ("11" (hide-all-but 1) (("11" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (step_ellipsoid_combination_plus_TCC1 0
  (step_ellipsoid_combination_plus_TCC1-1 nil 3602957318 ("" (tcc))
   ((squareMat? const-decl "bool" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (square? const-decl "bool" matrices nil))
   nil))
 (step_ellipsoid_combination_plus_TCC2 0
  (step_ellipsoid_combination_plus_TCC2-1 nil 3602957318 ("" (tcc))
   ((squareMat? const-decl "bool" matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (square? const-decl "bool" matrices nil))
   nil))
 (step_ellipsoid_combination_plus 0
  (step_ellipsoid_combination_plus-1 nil 3602957321
   ("" (skeep)
    (("" (expand in_ellipsoid_Q?)
      (("" (flatten -2)
        (("" (split)
          (("1" (lemma semidef_scal) (("1" (inst? -1) nil nil)) nil)
           ("2" (lemma symmetric_scal)
            (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil)
           ("3" (expand semidef_pos?)
            (("3" (skeep)
              (("3" (lemma split_vect)
                (("3" (inst -1 "n+1" "x_1" "1")
                  (("1" (skeep -1)
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (lemma block_mult_comm)
                          (("1" (inst? -1)
                            (("1" (replace -1)
                              (("1"
                                (lemma block_v_mult_comm)
                                (("1"
                                  (inst
                                   -1
                                   "1"
                                   "n"
                                   "BV2toBV1((# comp1 := 1,
                          comp2 := n,
                          vector1 := x!1,
                          vector2 := y #))"
                                   "BV2toBV1(M2Block(1, n, 1, n)
                               (I(1), transpose(V2Ml(n, x)), V2Ml(n, x),
                                mu * Q)
                         *
                         BV2toBV1((# comp1 := 1,
                                     comp2 := n,
                                     vector1 := x!1,
                                     vector2 := y #)))")
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (expand * -1 1)
                                        (("1"
                                          (expand * 1 1)
                                          (("1"
                                            (hide -2 -3 -4 -5)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand Block2M 1 1)
                                                (("1"
                                                  (expand M2Block 1 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       M2Block
                                                       1
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           BV2toBV1
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             BV2toBV1
                                                             -1
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "sigma_below_sub[Block2M(M2Block(1, n, 1, n)
                                          (I(1), transpose(V2Ml(n, x)),
                                           V2Ml(n, x), mu * Q))`rows,BV2toBV1((# comp1 := 1,
                                       comp2 := n,
                                       vector1 := x!1,
                                       vector2 := y #))`comp1
                            +
                            BV2toBV1((# comp1 := 1,
                                        comp2 := n,
                                        vector1 := x!1,
                                        vector2 := y #))`comp2].sigma_diff_eq")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (inst?
                                                                     -1)
                                                                    (("1"
                                                                      (bddsimp
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (hide
                                                                               -2
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 *
                                                                                 1
                                                                                 3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     M2Block)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         *
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -8)
                                                                                              (("1"
                                                                                                (reveal
                                                                                                 -9)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   x_1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         block_mult_comm)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 block_v_mult_comm)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "1"
                                                                                                                   "n"
                                                                                                                   "BV2toBV1((# comp1 := 1,
                          comp2 := n,
                          vector1 := x!1,
                          vector2 := y #))"
                                                                                                                   "BV2toBV1(M2Block(1, n, 1, n)
                               (I(1), transpose(V2Ml(n, x)), V2Ml(n, x), Q)
                         *
                         BV2toBV1((# comp1 := 1,
                                     comp2 := n,
                                     vector1 := x!1,
                                     vector2 := y #)))")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     *
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       BV2toBV1
                                                                                                                       -1
                                                                                                                       (1
                                                                                                                        2))
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         *
                                                                                                                         -2
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           Block2M
                                                                                                                           -2
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             M2Block
                                                                                                                             -2
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 M2Block
                                                                                                                                 -2
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "sigma_below_sub[Block2M(M2Block(1, n, 1, n)
                                          (I(1), transpose(V2Ml(n, x)),
                                           V2Ml(n, x),  Q))`rows,BV2toBV1((# comp1 := 1,
                                       comp2 := n,
                                       vector1 := x!1,
                                       vector2 := y #))`comp1
                            +
                            BV2toBV1((# comp1 := 1,
                                        comp2 := n,
                                        vector1 := x!1,
                                        vector2 := y #))`comp2].sigma_diff_eq")
                                                                                                                                    (("1"
                                                                                                                                      (inst?
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (inst?
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (bddsimp
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1
                                                                                                                                             -2
                                                                                                                                             rl)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -2
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   *
                                                                                                                                                   -1
                                                                                                                                                   2)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       *
                                                                                                                                                       -1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           " y * (transpose(V2Ml(n, x)) * x!1 + mu * Q * y)>=y * (transpose(V2Ml(n, x)) * x!1 + Q * y)")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (name-replace
                                                                                                                                                               "xt_y"
                                                                                                                                                               "V2Ml(n, x) * y")
                                                                                                                                                              (("1"
                                                                                                                                                                (name-replace
                                                                                                                                                                 "xt_x1"
                                                                                                                                                                 "transpose(V2Ml(n, x)) * x!1")
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   *)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     +)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       BV2toBV1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         sigma
                                                                                                                                                                         -2
                                                                                                                                                                         (1
                                                                                                                                                                          2))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             sigma
                                                                                                                                                                             1
                                                                                                                                                                             (1
                                                                                                                                                                              2))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "sigma_below_sub[BV2toBV1((# comp1 := 1,
                                       comp2 := n,
                                       vector1 := x!1,
                                       vector2 := y #))`comp2, n].sigma_diff_eq")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -1
                                                                                                                                                                                     "LAMBDA (i_1:
                      Index
                          [BV2toBV1((# comp1 := 1,
                                       comp2 := n,
                                       vector1 := x!1,
                                       vector2 := y #))`comp2]):
              xt_x1(i_1) * y(i_1) +
               y(i_1) *
                sigma[below(Q`cols)]
                    (0, Q`cols - 1,
                     LAMBDA (k: below(Q`cols)):
                       y(k) * Q`matrix(i_1, k) * mu)"
                                                                                                                                                                                     "LAMBDA (i_1: Index[n]):
              xt_x1(i_1) * y(i_1) +
               y(i_1) *
                sigma[below(Q`cols)]
                    (0, Q`cols - 1,
                     LAMBDA (k: below(Q`cols)):
                       y(k) * Q`matrix(i_1, k) * mu)"
                                                                                                                                                                                     "n-1"
                                                                                                                                                                                     0)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         BV2toBV1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "sigma_below_sub[BV2toBV1((# comp1 := 1,
                                       comp2 := n,
                                       vector1 := x!1,
                                       vector2 := y #))`comp2, n].sigma_diff_eq")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 "LAMBDA (i_1:
                      Index
                          [BV2toBV1((# comp1 := 1,
                                       comp2 := n,
                                       vector1 := x!1,
                                       vector2 := y #))`comp2]):
              xt_x1(i_1) * y(i_1) +
               y(i_1) *
                sigma[below(Q`cols)]
                    (0, Q`cols - 1,
                     LAMBDA (k: below(Q`cols)): Q`matrix(i_1, k) * y(k))"
                                                                                                                                                                                                 "LAMBDA (i_1: Index[n]):
               xt_x1(i_1) * y(i_1) +
                y(i_1) *
                 sigma[below(Q`cols)]
                     (0, Q`cols - 1,
                      LAMBDA (k: below(Q`cols)): Q`matrix(i_1, k) * y(k))"
                                                                                                                                                                                                 "n-1"
                                                                                                                                                                                                 "0")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     2)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       BV2toBV1
                                                                                                                                                                                                       1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   2)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     -2)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("3"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   2
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("3"
                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("4"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   2
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   -2)
                                                                                                                                                                                                  (("4"
                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("5"
                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("6"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   -2
                                                                                                                                                                                                   2)
                                                                                                                                                                                                  (("6"
                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       -1
                                                                                                                                                                                       -2
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (grind)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("3"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       -1
                                                                                                                                                                                       -2
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (grind)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("4"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       -1
                                                                                                                                                                                       -2
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("4"
                                                                                                                                                                                        (grind)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("5"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       -1
                                                                                                                                                                                       -2
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("5"
                                                                                                                                                                                        (grind)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("6"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       -1
                                                                                                                                                                                       -2
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("6"
                                                                                                                                                                                        (grind)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (case
                                                                                                                                                               " y * (transpose(V2Ml(n, x)) * x!1 + mu * Q * y) = y * (transpose(V2Ml(n, x)) * x!1)  + mu* y* (Q*y)")
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "y * (transpose(V2Ml(n, x)) * x!1 + Q * y) = y * (transpose(V2Ml(n, x)) * x!1) + y* ( Q * y)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (reveal
                                                                                                                                                                         -11
                                                                                                                                                                         -12)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -2
                                                                                                                                                                           "y")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (case
                                                                                                                                                                               "mu * (y * (Q * y))>=  (y * (Q * y))")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "mu * (vectors@vectors[Q`rows].*(y, (matrices.*(Q, y)))) = mu * (vectors@vectors[n].*(y, (matrices.*(Q, y))))")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       *)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "sigma_below_sub[Q`rows,n].sigma_diff_eq")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 "LAMBDA (i_1: Index[n]):
                y(i_1) *
                 sigma[below(Q`cols)]
                     (0, Q`cols - 1,
                      LAMBDA (k: below(Q`cols)): Q`matrix(i_1, k) * y(k))")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   2)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (hide
                                                                                                                                                                                               2)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (grind)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -3
                                                                                                                                                                                 -4
                                                                                                                                                                                 2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   *)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "sigma_below_sub[Q`rows,n].sigma_diff_eq")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst?
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -1
                                                                                                                                                                                           "LAMBDA (i_1: Index[n]):
               y(i_1) *
                sigma[below(Q`cols)]
                    (0, Q`cols - 1,
                     LAMBDA (k: below(Q`cols)): Q`matrix(i_1, k) * y(k))")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (typepred
                                                                                                                                                                                                   Q)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (name-replace
                                                                                                                                                                                                         "blah"
                                                                                                                                                                                                         "sigma(0, n - 1,
             LAMBDA (i_1: Index[n]):
               y(i_1) *
                sigma[below(Q`cols)]
                    (0, Q`cols - 1,
                     LAMBDA (k: below(Q`cols)): Q`matrix(i_1, k) * y(k)))")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -1
                                                                                                                                                                                                             -2
                                                                                                                                                                                                             -3)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (case
                                                                                                                                                                                                               "mu=1")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil)
                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                (case
                                                                                                                                                                                                                 "mu>1")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                     le_times_le_pos)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                       1
                                                                                                                                                                                                                       blah
                                                                                                                                                                                                                       blah
                                                                                                                                                                                                                       mu)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (hide-all-but
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (grind)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("3"
                                                                                                                                                                                                          (hide-all-but
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("3"
                                                                                                                                                                                                            (grind)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (hide-all-but
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (grind)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (hide-all-but
                                                                                                                                                                             1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (hide
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         *)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           +)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "sigma[below(n)].sigma_eq")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "sigma[below(n)].sigma_sum")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("3"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("4"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("4"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide-all-but
                                                                                                                                                                               1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (grind)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (hide
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   *)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     +)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "sigma[below(n)].sigma_sum")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst?
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "sigma[below(n)].sigma_eq")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "LAMBDA (i_1: Index[n]):
              y(i_1) *
               sigma[below(Q`cols)]
                   (0, Q`cols - 1,
                    LAMBDA (k: below(Q`cols)):
                      y(k) * Q`matrix(i_1, k) * mu)
               +
               y(i_1) *
                sigma[below(transpose(V2Ml(n, x))`cols)]
                    (0, 0,
                     LAMBDA (k: below(transpose(V2Ml(n, x))`cols)):
                       transpose(V2Ml(n, x))`matrix(i_1, k) * x!1(k))"
                                                                                                                                                                                   "LAMBDA (i: below(n)):
               y(i) *
                sigma[below(transpose(V2Ml(n, x))`cols)]
                    (0, 0,
                     LAMBDA (k: below(transpose(V2Ml(n, x))`cols)):
                       transpose(V2Ml(n, x))`matrix(i, k) * x!1(k))
                +
                y(i) *
                 sigma[below(Q`cols)]
                     (0, Q`cols - 1,
                      LAMBDA (k: below(Q`cols)): Q`matrix(i, k) * y(k))
                 * mu"
                                                                                                                                                                                   "n-1"
                                                                                                                                                                                   "0")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (skeep)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "sigma[below(Q`cols)].sigma_scal_right")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (grind)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("3"
                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (grind)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("4"
                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("4"
                                                                                                                                                                                      (grind)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("3"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("4"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("4"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide-all-but
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("3"
                                                                                                                                                            (hide-all-but
                                                                                                                                                             1)
                                                                                                                                                            (("3"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("4"
                                                                                                                                                            (hide-all-but
                                                                                                                                                             1)
                                                                                                                                                            (("4"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("3"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (expand
                                                                                                                                             BV2toBV1
                                                                                                                                             1)
                                                                                                                                            (("4"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("4"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("5"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("5"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide-all-but
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("3"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("3"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("4"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("5"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil)
                             ("3" (hide-all-but 1)
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (Q skolem-const-decl "Mat(n, n)" ellipsoid nil)
    (Mat type-eq-decl nil matrices nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (semidef_scal formula-decl nil posdef nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (symmetric_scal formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mu skolem-const-decl "posreal" ellipsoid nil)
    (* const-decl "Matrix" matrices nil)
    (x skolem-const-decl "Vector[n]" ellipsoid nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (block_mult_comm formula-decl nil block_matrices nil)
    (* const-decl "Block_Vector2" block_matrices nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (access_v_1 formula-decl nil block_matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (access_v_2 formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Block2V2 const-decl "Vector[V`comp2]" block_matrices nil)
    (Block2V1 const-decl "Vector[V`comp1]" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (+ const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eye_col formula-decl nil matrices nil)
    (sigma_0_neg formula-decl nil sigma_below "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector" vectors "vectors/")
    (le_times_le_pos formula-decl nil real_props nil)
    (dot_scal_left formula-decl nil vectors "vectors/")
    (sigma_sum formula-decl nil sigma "reals/")
    (transp_col formula-decl nil matrices nil)
    (v2ml_row formula-decl nil matrices nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (sigma_scal_right formula-decl nil sigma "reals/")
    (subrange type-eq-decl nil integers nil)
    (* const-decl "real" block_matrices nil)
    (sigma_diff_eq formula-decl nil sigma_below_sub "reals/")
    (transp_row formula-decl nil matrices nil)
    (v2ml_col formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (* const-decl "real" vectors "vectors/")
    (block_v_mult_comm formula-decl nil block_matrices nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (y skolem-const-decl "Vector[n]" ellipsoid nil)
    (x!1 skolem-const-decl "Vector[1]" ellipsoid nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (Block_Vector2 type-eq-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (split_vect formula-decl nil block_matrices nil))
   shostak))
 (ellipsoid_combination_plus_TCC1 0
  (ellipsoid_combination_plus_TCC1-1 nil 3603016951
   ("" (grind) nil nil)
   ((sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (ellipsoid_combination_plus_TCC2 0
  (ellipsoid_combination_plus_TCC2-1 nil 3603016951 ("" (tcc))
   ((* const-decl "Matrix" matrices nil)) nil))
 (ellipsoid_combination_plus_TCC3 0
  (ellipsoid_combination_plus_TCC3-1 nil 3603016951 ("" (tcc))
   ((Zero_mat const-decl "Zero" matrices nil)) nil))
 (ellipsoid_combination_plus_TCC4 0
  (ellipsoid_combination_plus_TCC4-1 nil 3603016951 ("" (tcc))
   ((Zero_mat const-decl "Zero" matrices nil)) nil))
 (ellipsoid_combination_plus_TCC5 0
  (ellipsoid_combination_plus_TCC5-1 nil 3603016951 ("" (tcc))
   ((* const-decl "Matrix" matrices nil)) nil))
 (ellipsoid_combination_plus_TCC6 0
  (ellipsoid_combination_plus_TCC6-1 nil 3603016951
   ("" (grind) nil nil)
   ((sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (* const-decl "Matrix" matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (ellipsoid_combination_plus 0
  (ellipsoid_combination_plus-1 nil 3603016953
   ("" (skeep)
    (("" (name "epsilon" "1-lambda_1-lambda_2")
      (("" (name "lambda_2_p" "lambda_2+epsilon")
        (("" (name "mu" "lambda_2_p/lambda_2")
          (("" (lemma step_ellipsoid_combination_plus)
            (("" (inst -1 "m" "Q_2" "y" "mu")
              (("1" (assert)
                (("1" (bddsimp -1)
                  (("1" (lemma ellipsoid_combination)
                    (("1"
                      (inst -1 n m lambda_1 lambda_2_p Q_1 "(mu*Q_2)" x
                       y "Block2V(V2Block(n, m)(x, y))")
                      (("1" (assert)
                        (("1" (expand mu -1)
                          (("1" (assert)
                            (("1" (replace -9 * rl)
                              (("1"
                                (case
                                 "1 / lambda_2_p *
                                       (lambda_2_p / lambda_2 * Q_2) = 1 / lambda_2 * Q_2")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand *)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (replace -2 -1 rl)
                      (("2" (assert)
                        (("2" (replace -3 -1 rl)
                          (("2" (assert)
                            (("2" (replace -1 1 rl)
                              (("2"
                                (assert)
                                (("2"
                                  (case "1-lambda_1>=lambda_2")
                                  (("1"
                                    (lemma both_sides_div_pos_le1)
                                    (("1"
                                      (inst
                                       -1
                                       lambda_2
                                       lambda_2
                                       "1-lambda_1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (assert)
                  (("2" (replace -1 1 rl)
                    (("2" (assert)
                      (("2" (replace -2 1 rl)
                        (("2" (assert)
                          (("2" (replace -3 1 rl)
                            (("2" (assert)
                              (("2"
                                (case "(1 - lambda_1) / lambda_2 > 0")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma pos_div_lt)
                                    (("2"
                                      (inst -1 "lambda_2" "1-lambda_1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mu skolem-const-decl "real" ellipsoid nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (* const-decl "Matrix" matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (ellipsoid_combination formula-decl nil ellipsoid nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos_div_lt formula-decl nil real_props nil)
    (step_ellipsoid_combination_plus formula-decl nil ellipsoid nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_2_TCC1 0
  (ellipsoid_general_2_TCC1-1 nil 3631457885 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_2_TCC2 0
  (ellipsoid_general_2_TCC2-1 nil 3631457885 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_2_TCC3 0
  (ellipsoid_general_2_TCC3-1 nil 3631457885 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_2_TCC4 0
  (ellipsoid_general_2_TCC4-1 nil 3637359798
   ("" (skeep)
    (("" (typepred M)
      (("" (typepred Q) (("" (hide -5) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Mat type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (transpose const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil))
   nil))
 (ellipsoid_general_2_TCC5 0
  (ellipsoid_general_2_TCC5-1 nil 3637359798
   ("" (skeep)
    (("" (hide -1)
      (("" (typepred M) (("" (typepred Q) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Mat type-eq-decl nil matrices nil))
   nil))
 (ellipsoid_general_2 0
  (ellipsoid_general_2-1 nil 3631457886
   ("" (skeep)
    (("" (lemma ellipsoid_general)
      (("" (inst -1 n m Q M "x-c" "y-M*c")
        (("" (assert)
          (("" (hide -1 2)
            (("" (lemma left_distributive_vect)
              (("" (inst -1 M x c)
                ((""
                  (case " matrices.*(M, ((vectors@vectors[M`cols].-)(x, c))) =  matrices.*(M, (vectors@vectors[n].-)(x, c))")
                  (("1" (replace -1)
                    (("1" (replace -2 1 rl)
                      (("1" (replace -3)
                        (("1" (assert)
                          (("1" (expand - 1)
                            (("1" (assert)
                              (("1"
                                (typepred M)
                                (("1"
                                  (decompose-equality 1)
                                  (("1"
                                    (replace -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (typepred M)
                      (("2" (expand - 1)
                        (("2" (expand * 1) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ellipsoid_general formula-decl nil ellipsoid nil)
    (left_distributive_vect formula-decl nil matrices nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (m skolem-const-decl "posnat" ellipsoid nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (M skolem-const-decl "Mat(m, n)" ellipsoid nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (in_ellipsoid_Q2?_TCC1 0
  (in_ellipsoid_Q2?_TCC1-1 nil 3631458585 ("" (tcc))
   ((* const-decl "Matrix" matrices nil)
    (eye_col formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil))
   nil))
 (in_ellipsoid_Q2?_TCC2 0
  (in_ellipsoid_Q2?_TCC2-1 nil 3631458585 ("" (grind) nil nil)
   ((transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (I const-decl "(identity?)" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (square? const-decl "bool" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (eq_ellq_ellq2_TCC1 0
  (eq_ellq_ellq2_TCC1-1 nil 3631458585 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (squareMat? const-decl "bool" matrices nil))
   nil))
 (eq_ellq_ellq2 0
  (eq_ellq_ellq2-1 nil 3631458586
   ("" (skeep)
    (("" (bddsimp)
      (("1" (expand in_ellipsoid_Q2?)
        (("1" (flatten)
          (("1" (expand in_ellipsoid_Q?)
            (("1" (split)
              (("1" (lemma semidef_scal)
                (("1" (inst -1 lam Q) nil nil)) nil)
               ("2" (lemma symmetric_scal)
                (("2" (inst -1 Q lam) (("2" (assert) nil nil)) nil))
                nil)
               ("3" (lemma semidef_qua_trans)
                (("3"
                  (inst -1 "Block2M(M2Block(1, n, 1, n)
                                            (lam * I(1), transpose(V2Ml(n, x)),
                                             V2Ml(n, x), Q))"
                   "Block2M(M2Block(1, n, 1, n)
                                            ((1/sqrt(lam) * I(1), Zero_mat(n,1),
                                             Zero_mat(1,n), sqrt(lam)*I(n))))")
                  (("1" (assert)
                    (("1" (assert)
                      (("1" (rewrite trans_conv -1)
                        (("1" (rewrite conv_transp -1)
                          (("1" (assert)
                            (("1" (expand M2Block -1 (3 4 5 6))
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "(matrices.+)
                                    (matrices.*
                                         ((matrices.+)
                                              (matrices.*
                                                   (matrices.*
                                                        (1 / reals@sqrt.sqrt(lam),
                                                         matrices.I(1)),
                                                    matrices.*(lam, matrices.I(1))),
                                               matrices.*
                                                   (matrices.Zero_mat(1, n),
                                                    matrices.transpose(V2Ml(n, x)))),
                                          matrices.transpose
                                              (matrices.*
                                                   (1 / reals@sqrt.sqrt(lam),
                                                    matrices.I(1)))),
                                     matrices.*
                                         ((matrices.+)
                                              (matrices.*
                                                   (matrices.*
                                                        (1 / reals@sqrt.sqrt(lam),
                                                         matrices.I(1)),
                                                    V2Ml(n, x)),
                                               matrices.*
                                                   (matrices.Zero_mat(1, n), Q)),
                                          matrices.Zero_mat(n, 1))) = I(1)")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (case
                                         " (Zero_mat(n, 1) * (lam * I(1)) +
                                                  sqrt(lam) * I(n) *
                                                   transpose(V2Ml(n, x)))
                                                 * transpose(1 / sqrt(lam) * I(1))
                                                 +
                                                 (Zero_mat(n, 1) * V2Ml(n, x) +
                                                   sqrt(lam) * I(n) * Q)
                                                  * Zero_mat(n, 1) = transpose(V2Ml(n, x))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case
                                               "(matrices.+)
                                        (matrices.*
                                             ((matrices.+)
                                                  (matrices.*
                                                       (matrices.*
                                                            (1 / reals@sqrt.sqrt(lam),
                                                             matrices.I(1)),
                                                        matrices.*(lam, matrices.I(1))),
                                                   matrices.*
                                                       (matrices.Zero_mat(1, n),
                                                        matrices.transpose(V2Ml(n, x)))),
                                              matrices.Zero_mat(1, n)),
                                         matrices.*
                                             ((matrices.+)
                                                  (matrices.*
                                                       (matrices.*
                                                            (1 / reals@sqrt.sqrt(lam),
                                                             matrices.I(1)),
                                                        V2Ml(n, x)),
                                                   matrices.*
                                                       (matrices.Zero_mat(1, n), Q)),
                                              matrices.transpose
                                                  (matrices.*
                                                       (reals@sqrt.sqrt(lam),
                                                        matrices.I(n))))) = V2Ml(n,x)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (case
                                                     "(Zero_mat(n, 1) * (lam * I(1)) +
                                                      sqrt(lam) * I(n) *
                                                       transpose(V2Ml(n, x)))
                                                     * Zero_mat(1, n)
                                                     +
                                                     (Zero_mat(n, 1) * V2Ml(n, x) +
                                                       sqrt(lam) * I(n) * Q)
                                                      * transpose(sqrt(lam) * I(n)) = lam*Q")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (lemma
                                                           zero_times_right_1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             n
                                                             "(Zero_mat(n, 1) * (lam * I(1)) +
                      sqrt(lam) * I(n) * transpose(V2Ml(n, x)))")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       zero_times_left_1)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         n
                                                                         "V2Ml(n, x)")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "transpose(sqrt(lam) * I(n)) = sqrt(lam)*I(n)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "sqrt(lam) * I(n) * Q = sqrt(lam)*Q")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "sqrt(lam) * Q * (sqrt(lam) * I(n)) = sqrt(lam) * (Q * (sqrt(lam) * I(n)))")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "Q * (sqrt(lam) * I(n)) = sqrt(lam) * Q")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "sqrt(lam) * (sqrt(lam) * Q) = (sqrt(lam)*sqrt(lam))*Q")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         *)
                                                                                                        (("2"
                                                                                                          (decompose-equality)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 left_scal_id)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   Q
                                                                                                   "sqrt(lam)")
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     Q)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       squareMat?)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         square?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             left_scal_id)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               Q
                                                                                               "sqrt(lam)")
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 Q)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   square?)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     squareMat?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               left_scal_id)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "sqrt(lam)*Q"
                                                                                                                 "sqrt(lam)")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   *
                                                                                                                   -1
                                                                                                                   4)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           Q)
                                                                                          (("3"
                                                                                            (expand
                                                                                             square?)
                                                                                            (("3"
                                                                                              (expand
                                                                                               squareMat?)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       right_scal_id)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         Q
                                                                                         "sqrt(lam)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             Q)
                                                                                            (("2"
                                                                                              (expand
                                                                                               square?)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 squareMat?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               trans_scal)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     zero_times_left_1)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       1
                                                       "transpose(V2Ml(n,x))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               zero_times_right_1)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 1
                                                                 "matrices.*
                                  (matrices.*(1 / reals@sqrt.sqrt(lam), matrices.I(1)),
                                   matrices.*(lam, matrices.I(1)))")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (lemma
                                                                         zero_times_right_1)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           n
                                                                           "matrices.*
                                  (matrices.*(1 / reals@sqrt.sqrt(lam), matrices.I(1)),
                                   matrices.*(lam, matrices.I(1)))")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               zero_times_left_1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 1
                                                                                 Q)
                                                                                (("2"
                                                                                  (typepred
                                                                                   Q)
                                                                                  (("2"
                                                                                    (expand
                                                                                     square?)
                                                                                    (("2"
                                                                                      (expand
                                                                                       squareMat?)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 right_scal_id)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "V2Ml(n, x)"
                                                                                                   "1 / reals@sqrt.sqrt(lam)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         trans_scal)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           left_scal_id)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "1 / reals@sqrt.sqrt(lam) * V2Ml(n, x)"
                                                                                                             "reals@sqrt.sqrt(lam)")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     *)
                                                                                                                    (("2"
                                                                                                                      (decompose-equality)
                                                                                                                      (("2"
                                                                                                                        (decompose-equality)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (typepred Q)
                                            (("2"
                                              (expand square?)
                                              (("2"
                                                (expand squareMat?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     zero_times_left_1)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       n
                                                       "(lam * I(1))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           zero_times_left_1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             n
                                                             "V2Ml(n,x)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     zero_times_right_1)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       1
                                                                       "sqrt(lam) * I(n) * Q ")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           right_scal_id)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "transpose(V2Ml(n, x))"
                                                                             "sqrt(lam)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   trans_scal)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     left_scal_id)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "sqrt(lam) * transpose(V2Ml(n, x))"
                                                                                       "1/sqrt(lam)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              -6
                                                                                              -7))
                                                                                            (("2"
                                                                                              (expand
                                                                                               *)
                                                                                              (("2"
                                                                                                (decompose-equality)
                                                                                                (("2"
                                                                                                  (decompose-equality)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (lemma zero_times_left_1)
                                      (("2"
                                        (inst
                                         -1
                                         1
                                         "transpose(V2Ml(n, x))")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 zero_times_left_1)
                                                (("2"
                                                  (inst -1 1 Q)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred Q)
                                                      (("2"
                                                        (expand
                                                         square?)
                                                        (("2"
                                                          (expand
                                                           squareMat?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (lemma
                                                                   zero_times_left_1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     1
                                                                     Q)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (replace
                                                                         -2)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               zero_times_right_1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 1
                                                                                 "matrices.*
                              (matrices.*(1 / reals@sqrt.sqrt(lam), matrices.I(1)),
                               V2Ml(n, x))")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     trans_scal)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       left_scal_id)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "matrices.*(1 / reals@sqrt.sqrt(lam), matrices.I(1))"
                                                                                         lam)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               left_scal_id)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "lam * matrices.*(1 / reals@sqrt.sqrt(lam), matrices.I(1))"
                                                                                                 "1 / sqrt(lam)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         *)
                                                                                                        (("2"
                                                                                                          (decompose-equality)
                                                                                                          (("2"
                                                                                                            (decompose-equality)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand Block2M)
                      (("2" (expand M2Block) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand in_ellipsoid_Q?)
        (("2" (expand in_ellipsoid_Q2?)
          (("2" (flatten)
            (("2" (typepred Q)
              (("2" (expand square?)
                (("2" (expand squareMat?)
                  (("2" (replace -1)
                    (("2" (replace -2)
                      (("2" (split)
                        (("1" (lemma semidef_scal)
                          (("1" (inst -1 "1/lam" "lam*Q")
                            (("1" (assert)
                              (("1"
                                (case "1 / lam * (lam * Q) = Q")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand *)
                                    (("2"
                                      (decompose-equality)
                                      (("2"
                                        (decompose-equality)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma symmetric_scal)
                          (("2" (inst -1 "lam*Q" "1/lam")
                            (("2" (assert)
                              (("2"
                                (case "1 / lam * (lam * Q) = Q")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand *)
                                    (("2"
                                      (decompose-equality)
                                      (("2"
                                        (decompose-equality)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma semidef_qua_trans)
                          (("3"
                            (inst -1 "Block2M(M2Block(1, n, 1, n)
                                  (I(1), transpose(V2Ml(n, x)), V2Ml(n, x),
                                   lam * Q))"
                             "Block2M(M2Block(1, n, 1, n)
                                  (sqrt(lam)*I(1), Zero_mat(n,1), Zero_mat(1,n),
                                   (1/sqrt(lam)) * I(n)))")
                            (("1" (assert)
                              (("1"
                                (rewrite trans_conv)
                                (("1"
                                  (rewrite conv_transp)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand M2Block -1 (3 4 5 6))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma zero_times_left_1)
                                          (("1"
                                            (inst
                                             -1
                                             1
                                             "transpose(V2Ml(n, x))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     right_scal_id)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "I(1)"
                                                       "sqrt(lam)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (rewrite
                                                             trans_scal)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 right_scal_id)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "sqrt(lam)*I(1)"
                                                                   "sqrt(lam)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         zero_times_right_1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           1
                                                                           "(sqrt(lam) * I(1) * V2Ml(n, x) +
                                      Zero_mat(1, n) * (lam * Q))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               right_scal_id)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "transpose(V2Ml(n, x))"
                                                                                 "1/sqrt(lam)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       zero_times_left_1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         n
                                                                                         "I(1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             left_scal_id)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "1 / sqrt(lam) * transpose(V2Ml(n, x))"
                                                                                               "sqrt(lam)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     zero_times_right_1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       1
                                                                                                       "(Zero_mat(n, 1) * V2Ml(n, x) +
                                      (1 / sqrt(lam)) * I(n) * (lam * Q))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           (-1
                                                                                                            -2
                                                                                                            -3
                                                                                                            -4
                                                                                                            -5
                                                                                                            -6
                                                                                                            -7))
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               zero_times_right_1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 n
                                                                                                                 "sqrt(lam) * I(1)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     zero_times_left_1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       1
                                                                                                                       "lam*Q")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           trans_scal)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             right_scal_id)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "V2Ml(n,x)"
                                                                                                                               "sqrt(lam)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     left_scal_id)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "  sqrt(lam) * V2Ml(n, x)"
                                                                                                                                       "(1/sqrt(lam))")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             zero_times_right_1)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               n
                                                                                                                                               "1 / sqrt(lam) * transpose(V2Ml(n, x))")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       zero_times_left_1)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         n
                                                                                                                                                         "V2Ml(n,x)")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             left_scal_id)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               "(1 / sqrt(lam)) * I(n) * (lam * Q)"
                                                                                                                                                               "1/sqrt(lam)")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (typepred
                                                                                                                                                                   Q)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     square?)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       squareMat?)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -2)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -3)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               right_scal_id)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -1
                                                                                                                                                                                 "lam*Q"
                                                                                                                                                                                 "1/sqrt(lam)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide-all-but
                                                                                                                                                                                         (-11
                                                                                                                                                                                          1))
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "sqrt(lam) * (sqrt(lam) * I(1)) = lam * I(1)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "sqrt(lam) *
                                    (1 / sqrt(lam) *
                                      transpose(V2Ml(n, x))) = transpose(V2Ml(n,x))")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (case
                                                                                                                                                                                               "(1 / sqrt(lam)) *
                                    (sqrt(lam) * V2Ml(n, x)) = V2Ml(n,x)")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (case
                                                                                                                                                                                                 "1 / sqrt(lam) *
                                    (1 / sqrt(lam) * (lam * Q)) = Q")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     *)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (decompose-equality)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (decompose-equality)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   *)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (decompose-equality)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (decompose-equality)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 *)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (decompose-equality)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (decompose-equality)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               *)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (decompose-equality)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand M2Block)
                                (("2"
                                  (expand Block2M)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (Square type-eq-decl nil matrices nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (semidef_scal formula-decl nil posdef nil)
    (symmetric_scal formula-decl nil matrices nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (V2Ml const-decl "Matrix" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (transpose const-decl "Matrix" matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (Zero type-eq-decl nil matrices nil)
    (zero? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero_col formula-decl nil matrices nil)
    (zero_row formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (conv_transp formula-decl nil block_matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (zero_trans formula-decl nil matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (zero_times_right_1 formula-decl nil matrices nil)
    (zero_times_left_1 formula-decl nil matrices nil)
    (ident_trans formula-decl nil matrices nil)
    (trans_scal formula-decl nil matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (left_scal_id formula-decl nil matrices nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (right_scal_id formula-decl nil matrices nil)
    (zero_left_ident formula-decl nil matrices nil)
    (zero_right_ident formula-decl nil matrices nil)
    (add_dim_row formula-decl nil matrices nil)
    (add_dim_col formula-decl nil matrices nil)
    (trans_conv formula-decl nil block_matrices nil)
    (conv_mult formula-decl nil block_matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (v2ml_row formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (v2ml_col formula-decl nil matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semidef_qua_trans formula-decl nil posdef nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (in_ellipsoid_Q2? const-decl "bool" ellipsoid nil))
   shostak))
 (eq_ellp_ellp2_TCC1 0
  (eq_ellp_ellp2_TCC1-1 nil 3638548510 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (eq_ellp_ellp2 0
  (eq_ellp_ellp2-1 nil 3638548510
   ("" (skeep)
    (("" (bddsimp)
      (("1" (expand "in_ellipsoid_P2?")
        (("1" (expand "in_ellipsoid_P?")
          (("1" (flatten)
            (("1" (split)
              (("1" (rewrite defpos_scal) nil nil)
               ("2" (rewrite symmetric_scal) nil nil)
               ("3" (lemma left_scal_shift_vect)
                (("3" (inst -1 P x "1/lam")
                  (("3" (replace -1)
                    (("3" (lemma "dot_scal_right[n]")
                      (("3" (inst -1 "1/lam" x "P*x")
                        (("3" (case "P`rows = n")
                          (("1" (replace -1 :actuals? t)
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "1 / lam * (x * (P * x))= (x * (P * x)) /lam")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite div_mult_pos_le1)
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (typepred P)
                              (("2"
                                (expand square?)
                                (("2"
                                  (expand squareMat?)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "in_ellipsoid_P?")
        (("2" (expand "in_ellipsoid_P2?")
          (("2" (flatten)
            (("2" (split)
              (("1" (lemma defpos_scal)
                (("1" (inst -1 "lam" "(1/lam)* P")
                  (("1" (assert)
                    (("1" (rewrite scal_assoc)
                      (("1" (assert)
                        (("1" (case "(lam * (1 / lam)) * P = P")
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind)
                              (("2"
                                (grind)
                                (("2"
                                  (apply-extensionality)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (apply-extensionality 1)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma symmetric_scal)
                (("2" (inst -1 "(1/lam)* P" "lam")
                  (("2" (assert)
                    (("2" (rewrite scal_assoc)
                      (("2" (assert)
                        (("2" (case "(lam * (1 / lam)) * P = P")
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind)
                              (("2"
                                (grind)
                                (("2"
                                  (apply-extensionality)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (apply-extensionality 1)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma left_scal_shift_vect)
                (("3" (inst -1 P x "1/lam")
                  (("3" (replace -1)
                    (("3" (lemma "dot_scal_right[n]")
                      (("3" (inst -1 "1/lam" x "P*x")
                        (("3" (case "P`rows = n")
                          (("1" (replace -1 :actuals? t)
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "1 / lam * (x * (P * x))= (x * (P * x)) /lam")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite div_mult_pos_le1)
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (typepred P)
                              (("2"
                                (expand square?)
                                (("2"
                                  (expand squareMat?)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_ellipsoid_P? const-decl "bool" ellipsoid nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Square type-eq-decl nil matrices nil)
    (def_pos? const-decl "bool" posdef nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (defpos_scal formula-decl nil posdef nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (symmetric_scal formula-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (dot_scal_right formula-decl nil vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors "vectors/")
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (left_scal_shift_vect formula-decl nil matrices nil)
    (in_ellipsoid_P2? const-decl "bool" ellipsoid nil)
    (P skolem-const-decl "SquareMat(n)" ellipsoid nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (lam skolem-const-decl "posreal" ellipsoid nil)
    (* const-decl "Matrix" matrices nil)
    (scal_assoc formula-decl nil matrices nil))
   shostak))
 (ellipsoid_equivalence_2 0
  (ellipsoid_equivalence_2-1 nil 3638551186
   ("" (skeep)
    (("" (rewrite eq_ellq_ellq2)
      (("" (rewrite eq_ellp_ellp2)
        (("" (lemma inverse_scal)
          (("" (inst -1 P "1/lam")
            (("" (assert)
              (("" (case "(1 / (1 / lam)) = lam")
                (("1" (replace -1)
                  (("1" (replace -2 1 rl)
                    (("1" (lemma ellipsoid_equivalence)
                      (("1" (inst -1 n "(1/lam)*P" x)
                        (("1" (rewrite invertible_scal) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eq_ellq_ellq2 formula-decl nil ellipsoid nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (invertible? const-decl "bool" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inverse const-decl "{N: Square | N`rows = M`rows}" matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (inverse_scal formula-decl nil matrix_lemmas nil)
    (ellipsoid_equivalence formula-decl nil ellipsoid nil)
    (invertible_scal formula-decl nil matrix_lemmas nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (eq_ellp_ellp2 formula-decl nil ellipsoid nil))
   shostak))
 (ellipsoid_general_3_TCC1 0
  (ellipsoid_general_3_TCC1-1 nil 3631527755 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q2? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_3_TCC2 0
  (ellipsoid_general_3_TCC2-1 nil 3631527755 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q2? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_3_TCC3 0
  (ellipsoid_general_3_TCC3-1 nil 3631527755 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q2? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_3_TCC4 0
  (ellipsoid_general_3_TCC4-1 nil 3637359798
   ("" (skeep)
    (("" (typepred M) (("" (typepred Q) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((Mat type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (in_ellipsoid_Q2? const-decl "bool" ellipsoid nil)
    (* const-decl "Matrix" matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil))
   nil))
 (ellipsoid_general_3_TCC5 0
  (ellipsoid_general_3_TCC5-1 nil 3637359798
   ("" (skeep)
    (("" (typepred M) (("" (typepred Q) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((Mat type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "Matrix" matrices nil)
    (in_ellipsoid_Q2? const-decl "bool" ellipsoid nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (* const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil))
   nil))
 (ellipsoid_general_3 0
  (ellipsoid_general_3-1 nil 3631527756
   ("" (skeep)
    (("" (rewrite eq_ellq_ellq2)
      (("" (rewrite eq_ellq_ellq2 1)
        (("" (lemma ellipsoid_general_2)
          (("" (inst -1 n m "lam*Q" M x y c)
            (("" (assert)
              ((""
                (case "M * (lam * Q) * transpose(M) = lam * (M * Q * transpose(M))")
                (("1" (assert) nil nil)
                 ("2" (hide 2)
                  (("2" (rewrite right_scal_shift)
                    (("2" (rewrite left_scal_shift) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eq_ellq_ellq2 formula-decl nil ellipsoid nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (- const-decl "real" vectors "vectors/")
    (nnreal type-eq-decl nil real_types nil)
    (ellipsoid_general_2 formula-decl nil ellipsoid nil)
    (left_scal_shift formula-decl nil matrices nil)
    (right_scal_shift formula-decl nil matrices nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Matrix" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (ellipsoid_general_4_TCC1 0
  (ellipsoid_general_4_TCC1-1 nil 3631528927 ("" (tcc))
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (ellipsoid_general_4_TCC2 0
  (ellipsoid_general_4_TCC2-1 nil 3631528927 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q2? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_4_TCC3 0
  (ellipsoid_general_4_TCC3-1 nil 3631528927 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q2? const-decl "bool" ellipsoid nil)
    (* const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_general_4_TCC4 0
  (ellipsoid_general_4_TCC4-1 nil 3631528927 ("" (grind) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q2? const-decl "bool" ellipsoid nil)
    (* const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (ellipsoid_general_4 0
  (ellipsoid_general_4-1 nil 3631528927
   ("" (skeep)
    (("" (lemma ellipsoid_general_3)
      (("" (inst -1 n m Q M x "y-b" c lam)
        (("" (assert)
          (("" (case "y-b=M*x")
            (("1" (assert)
              (("1" (case "y-b-M*c = y-(M*c+b)")
                (("1" (assert) nil nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand -)
                    (("2" (expand +) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-3 1))
              (("2" (expand -)
                (("2" (expand +)
                  (("2" (decompose-equality)
                    (("2" (decompose-equality -1)
                      (("2" (inst -1 x!1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (typepred M)
              (("3" (assert)
                (("3" (replace -1) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ellipsoid_general_3 formula-decl nil ellipsoid nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "real" vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (nnreal type-eq-decl nil real_types nil)
    (- const-decl "real" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (ellipsoid_bound_TCC1 0
  (ellipsoid_bound_TCC1-1 nil 3636132275 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (n!1 skolem-const-decl "posnat" ellipsoid nil)
    (Q!1 skolem-const-decl "SquareMat(n!1)" ellipsoid nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_bound_TCC2 0
  (ellipsoid_bound_TCC2-1 nil 3636132275 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (n!1 skolem-const-decl "posnat" ellipsoid nil)
    (Q!1 skolem-const-decl "SquareMat(n!1)" ellipsoid nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ellipsoid_bound_TCC3 0
  (ellipsoid_bound_TCC3-1 nil 3636132275
   ("" (skeep)
    (("" (expand in_ellipsoid_Q?)
      (("" (flatten)
        (("" (expand semidef_pos? -1)
          (("" (inst -1 c)
            (("1" (assert)
              (("1" (case "Q`rows=n")
                (("1" (replace -1 :actuals? t) (("1" (propax) nil nil))
                  nil)
                 ("2" (typepred Q)
                  (("2" (expand square?)
                    (("2" (expand squareMat?) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred Q)
              (("2" (expand square?)
                (("2" (expand squareMat?)
                  (("2" (replace -1)
                    (("2" (replace -2) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (Q skolem-const-decl "SquareMat(n)" ellipsoid nil))
   shostak))
 (ellipsoid_bound 0
  (ellipsoid_bound-1 nil 3636132279
   ("" (skeep)
    (("" (expand in_ellipsoid_Q?)
      (("" (flatten)
        (("" (expand semidef_pos? -3)
          ((""
            (inst -3
             "Block2V(BV2toBV1((# comp1:=1 ,comp2:=n,vector1:=LAMBDA (i:below(1)): c*x, vector2:=-c #)))")
            (("1" (rewrite block_mult_comm)
              (("1" (lemma block_v_mult_comm)
                (("1"
                  (inst -1 1 n "BV2toBV1((# comp1 := 1,
                          comp2 := n,
                          vector1 := LAMBDA (i: below(1)): c * x,
                          vector2 := -c #))"
                   "BV2toBV1(M2Block(1, n, 1, n)
                               (I(1), transpose(V2Ml(n, x)), V2Ml(n, x), Q)
                         *
                         BV2toBV1((# comp1 := 1,
                                     comp2 := n,
                                     vector1
                                       := LAMBDA (i: below(1)): c * x,
                                     vector2 := -c #)))")
                  (("1"
                    (case "
          block_matrices.BV2toBV1
               ((# comp1 := 1,
                   comp2 := n,
                   vector1
                     := LAMBDA (i: below(1)): vectors@vectors[n].*(c, x),
                   vector2 := (vectors@vectors[n].-)(c) #))`comp1
            +
            block_matrices.BV2toBV1
                ((# comp1 := 1,
                    comp2 := n,
                    vector1
                      := LAMBDA (i: below(1)): vectors@vectors[n].*(c, x),
                    vector2 := (vectors@vectors[n].-)(c) #))`comp2 = block_matrices.Block2M
               (block_matrices.M2Block
                    (1, n, 1, n)
                    (matrices.I(1), matrices.transpose(V2Ml(n, x)),
                     V2Ml(n, x), Q))`rows")
                    (("1" (replace -1 :actuals? t)
                      (("1" (replace -2)
                        (("1" (hide -2 -1)
                          (("1" (expand * -3 3)
                            (("1" (assert)
                              (("1"
                                (expand * -3 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "block_matrices.BV2toBV1
               ((# comp1 := 1,
                   comp2 := n,
                   vector1
                     := LAMBDA (i: below(1)): vectors@vectors[n].*(c, x),
                   vector2 := (vectors@vectors[n].-)(c) #))`comp2 = n")
                                    (("1"
                                      (replace -1 :actuals? t)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (case
                                           "block_matrices.Block2M2
                     (block_matrices.M2Block
                          (1, n, 1, n)
                          (matrices.I(1), matrices.transpose(V2Ml(n, x)),
                           V2Ml(n, x), Q))`rows = n")
                                          (("1"
                                            (replace -1 :actuals? t)
                                            (("1"
                                              (case
                                               "block_matrices.BV2toBV1
                ((# comp1 := 1,
                    comp2 := n,
                    vector1
                      := LAMBDA (i: below(1)): vectors@vectors[n].*(c, x),
                    vector2 := (vectors@vectors[n].-)(c) #))`comp1 = 1")
                                              (("1"
                                                (replace
                                                 -1
                                                 :actuals?
                                                 t)
                                                (("1"
                                                  (hide -1 -2)
                                                  (("1"
                                                    (case
                                                     "block_matrices.Block2M1
                      (block_matrices.M2Block
                           (1, n, 1, n)
                           (matrices.I(1), matrices.transpose(V2Ml(n, x)),
                            V2Ml(n, x), Q))`rows = 1")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :actuals?
                                                       t)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (rewrite
                                                           "dot_add_right[n]")
                                                          (("1"
                                                            (typepred
                                                             Q)
                                                            (("1"
                                                              (expand
                                                               square?)
                                                              (("1"
                                                                (expand
                                                                 squareMat?)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       *
                                                                       -5
                                                                       8)
                                                                      (("1"
                                                                        (expand
                                                                         I
                                                                         -5
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           sigma)
                                                                          (("1"
                                                                            (expand
                                                                             sigma)
                                                                            (("1"
                                                                              (expand
                                                                               *
                                                                               -5
                                                                               2)
                                                                              (("1"
                                                                                (expand
                                                                                 sigma)
                                                                                (("1"
                                                                                  (expand
                                                                                   sigma)
                                                                                  (("1"
                                                                                    (expand
                                                                                     I
                                                                                     -5
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         +
                                                                                         -5
                                                                                         3)
                                                                                        (("1"
                                                                                          (case
                                                                                           "(V2Ml(n, x) * -c)(0) = -(c*x)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "-c* (transpose(V2Ml(n, x)) * (LAMBDA (i: below(1)): c * x)) = -(c*x)*(c*x)")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "c * x * (c * x) + 2 * (-(c * x) * (c * x)) = -sq(c*x)")
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "sq(c*x) <= c * (Q * c)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               sqrt_le)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "sq(c*x)"
                                                                                                                 "c*(Q*c)")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   sqrt_sq_abs)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "-c * (Q * -c) = c * (Q*c)")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 neg_vect_mult)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   Q
                                                                                                                   c)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -6
                                                                                                                     :actuals?
                                                                                                                     t)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "dot_neg_left")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "dot_neg_left[n]")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               c
                                                                                                                               "-(Q*c)")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -6
                                                                                                                                   :actuals?
                                                                                                                                   t)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "dot_neg_right[n]")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       c
                                                                                                                                       "Q*c")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replace
                                                                                                                           -5)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (replace
                                                                                                                 -4)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           sq)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       *
                                                                                                       1
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           sigma)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             sigma)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               V2Ml)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 transpose)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "(LAMBDA (i_1: below(transpose(V2Ml(n, x))`rows)):
           x(i_1) * (c * x)) = (c*x)*x ")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           dot_neg_left)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       *
                                                                                                                       1
                                                                                                                       4)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (decompose-equality)
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               i_1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (skeep)
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         i_1)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             V2Ml
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               *
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   -
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "sigma_scal[below(n)]")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "LAMBDA (k_1: below(n)): x(k_1) * -c(k_1)"
                                                                                                       "-1"
                                                                                                       "n-1"
                                                                                                       0)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (skeep)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             Q)
                                                            (("2"
                                                              (expand
                                                               square?)
                                                              (("2"
                                                                (expand
                                                                 squareMat?)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand BV2toBV1 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3"
                                            (typepred Q)
                                            (("3"
                                              (expand square?)
                                              (("3"
                                                (expand squareMat?)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (expand BV2toBV1 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand Block2M 1)
                        (("2" (expand M2Block)
                          (("2" (expand BV2toBV1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand BV2toBV1 1)
                    (("2" (expand M2Block 1)
                      (("2" (assert)
                        (("2" (expand * 1) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand BV2toBV1 1) (("3" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (expand BV2toBV1 1)
                (("2" (expand M2Block 1) (("2" (assert) nil nil)) nil))
                nil)
               ("3" (expand Bdiag_square?)
                (("3" (assert)
                  (("3" (expand square?)
                    (("3" (expand I) (("3" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand BV2toBV1)
                (("2" (assert)
                  (("2" (expand Block2M)
                    (("2" (expand M2Block) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (block_mult_comm formula-decl nil block_matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Block_Vector2" block_matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (access_v_1 formula-decl nil block_matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (access_v_2 formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (v2ml_row formula-decl nil matrices nil)
    (v2ml_col formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (dot_add_right formula-decl nil vectors "vectors/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (sqrt_le formula-decl nil sqrt "reals/")
    (sqrt_sq_abs formula-decl nil sqrt "reals/")
    (dot_neg_right formula-decl nil vectors "vectors/")
    (dot_neg_left formula-decl nil vectors "vectors/")
    (neg_vect_mult formula-decl nil matrix_lemmas nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dot_scal_right formula-decl nil vectors "vectors/")
    (* const-decl "Vector" vectors "vectors/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (T_low type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_high type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_scal formula-decl nil sigma "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "real" vectors "vectors/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (* const-decl "real" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (block_v_mult_comm formula-decl nil block_matrices nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Block_Vector2 type-eq-decl nil block_matrices nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "real" vectors "vectors/")
    (c skolem-const-decl "Vector[n]" ellipsoid nil)
    (x skolem-const-decl "Vector[n]" ellipsoid nil)
    (- const-decl "Vector" vectors "vectors/")
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (Q skolem-const-decl "SquareMat(n)" ellipsoid nil))
   shostak))
 (sat_TCC1 0
  (sat_TCC1-1 nil 3636198539 ("" (tcc))
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (sat_id_comp 0
  (sat_id_comp-1 nil 3636200140
   ("" (skeep)
    (("" (split)
      (("1" (bddsimp)
        (("1" (expand sat)
          (("1" (case x<-1)
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (bddsimp)
        (("2" (expand sat)
          (("2" (case x>1)
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sat const-decl "real" ellipsoid nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil))
   shostak))
 (sat_lin_com 0
  (sat_lin_com-1 nil 3636200379
   ("" (skeep)
    (("" (split)
      (("1" (bddsimp)
        (("1" (expand sat)
          (("1" (assert)
            (("1" (case "x<-1")
              (("1" (assert)
                (("1" (expand abs)
                  (("1" (assert)
                    (("1" (lemma both_sides_times_pos_le2)
                      (("1" (inst -1 "1/d" "-x" "d")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand abs)
                  (("2" (lemma both_sides_times_pos_ge1)
                    (("2" (inst -1 (1/d) d 1)
                      (("2" (assert)
                        (("2" (case "d*(1/d)=1")
                          (("1" (replace -1)
                            (("1" (lemma both_sides_times_neg_le1)
                              (("1"
                                (inst -1 x 1 "1/d")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (bddsimp)
        (("2" (expand abs)
          (("2" (assert)
            (("2" (case "x>1")
              (("1" (expand sat)
                (("1" (assert)
                  (("1" (case "1>=1/d")
                    (("1" (lemma both_sides_times_pos_le1)
                      (("1" (inst -1 (1/d) x d)
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma both_sides_div_pos_le1)
                        (("2" (inst -1 d 1 d) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand sat)
                (("2" (assert)
                  (("2" (case "1>=1/d")
                    (("1" (assert)
                      (("1" (lemma both_sides_times_pos_le1)
                        (("1" (inst -1 x "1/d" 1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma both_sides_div_pos_le1)
                      (("2" (inst -1 d 1 d) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sat const-decl "real" ellipsoid nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_neg_le1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil))
   shostak))
 (sat_sect_bound_step 0
  (sat_sect_bound_step-1 nil 3636198612
   ("" (skeep)
    (("" (lemma ellipsoid_bound)
      (("" (inst? -1)
        (("" (inst -1 Q)
          (("" (name-replace "y" "c*x")
            (("" (case "abs(y)<=d")
              (("1" (case "d<1")
                (("1" (expand abs)
                  (("1" (case "y<0")
                    (("1" (assert (-1 -3))
                      (("1" (expand sat 1 1) (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (assert (-2 1))
                      (("2" (expand sat 2 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma sat_lin_com)
                  (("2" (lemma sat_id_comp)
                    (("2" (inst -1 y)
                      (("2" (inst -2 y d)
                        (("2" (assert (-1 -2 -3))
                          (("2" (assert (-2 1))
                            (("2" (case "y<=0")
                              (("1"
                                (assert (-1 -2 -3))
                                (("1"
                                  (flatten)
                                  (("1"
                                    (rewrite neg_times_le)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrites neg_times_le)
                                (("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ellipsoid_bound formula-decl nil ellipsoid nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sat_lin_com formula-decl nil ellipsoid nil)
    (neg_times_le formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sat_id_comp formula-decl nil ellipsoid nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sat const-decl "real" ellipsoid nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "real" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (block_rank_1_TCC1 0
  (block_rank_1_TCC1-1 nil 3636281977 ("" (tcc))
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (block_rank_1_TCC2 0
  (block_rank_1_TCC2-1 nil 3636281977 ("" (tcc))
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (block_rank_1_TCC3 0
  (block_rank_1_TCC3-1 nil 3636281977 ("" (tcc))
   ((V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (block_rank_1_TCC4 0
  (block_rank_1_TCC4-1 nil 3636281977 ("" (tcc))
   ((V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (block_rank_1_TCC5 0
  (block_rank_1_TCC5-1 nil 3636281977 ("" (tcc))
   ((* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_rank_1_TCC6 0
  (block_rank_1_TCC6-1 nil 3636281977 ("" (tcc))
   ((V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (block_rank_1_TCC7 0
  (block_rank_1_TCC7-1 nil 3636281977 ("" (tcc))
   ((* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_rank_1_TCC8 0
  (block_rank_1_TCC8-1 nil 3636281977 ("" (tcc))
   ((V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (block_rank_1_TCC9 0
  (block_rank_1_TCC9-1 nil 3636281977 ("" (tcc))
   ((* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_rank_1_TCC10 0
  (block_rank_1_TCC10-1 nil 3636281977 ("" (tcc))
   ((V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil))
   nil))
 (block_rank_1_TCC11 0
  (block_rank_1_TCC11-1 nil 3636281977 ("" (tcc))
   ((* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_rank_1 0
  (block_rank_1-1 nil 3636282065
   ("" (skeep)
    (("" (grind)
      (("" (apply-extensionality)
        (("1" (hide 2)
          (("1" (case "x!1<m")
            (("1" (case "x!2<m")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
             ("2" (case "x!2<m")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep) (("2" (assert) nil nil)) nil)
         ("3" (skeep) (("3" (assert) nil nil)) nil)
         ("4" (skeep) (("4" (assert) nil nil)) nil)
         ("5" (skeep) (("5" (assert) nil nil)) nil)
         ("6" (skeep) (("6" (assert) nil nil)) nil)
         ("7" (skeep) (("7" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((V2Block const-decl "Block_Vector" block_matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (m skolem-const-decl "posnat" ellipsoid nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (block_sym_rank_1_TCC1 0
  (block_sym_rank_1_TCC1-1 nil 3636281977 ("" (tcc))
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (block_sym_rank_1_TCC2 0
  (block_sym_rank_1_TCC2-1 nil 3636281977 ("" (tcc))
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (block_sym_rank_1_TCC3 0
  (block_sym_rank_1_TCC3-1 nil 3636281977 ("" (tcc))
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Vector" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_sym_rank_1_TCC4 0
  (block_sym_rank_1_TCC4-1 nil 3636281977 ("" (tcc))
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Vector" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_sym_rank_1_TCC5 0
  (block_sym_rank_1_TCC5-1 nil 3636281977 ("" (tcc))
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_sym_rank_1_TCC6 0
  (block_sym_rank_1_TCC6-1 nil 3636281977 ("" (tcc))
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_sym_rank_1_TCC7 0
  (block_sym_rank_1_TCC7-1 nil 3636281977 ("" (tcc))
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_sym_rank_1_TCC8 0
  (block_sym_rank_1_TCC8-1 nil 3636281977 ("" (tcc))
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_sym_rank_1_TCC9 0
  (block_sym_rank_1_TCC9-1 nil 3636281977 ("" (tcc))
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_sym_rank_1_TCC10 0
  (block_sym_rank_1_TCC10-1 nil 3636281977 ("" (tcc))
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (eye_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (block_sym_rank_1 0
  (block_sym_rank_1-1 nil 3636282275
   ("" (skeep)
    (("" (beta)
      (("" (lemma block_rank_1)
        (("" (assert)
          ((""
            (inst -1 n 1 "-c" "(-1/d)*c" "LAMBDA(i:below(1)):1"
             "LAMBDA(i:below(1)):1")
            (("" (assert)
              (("" (replace -1)
                (("" (lemma block_rank_1)
                  ((""
                    (inst -1 n 1 "(-1/d)*c" "-c" "LAMBDA(i:below(1)):1"
                     "LAMBDA(i:below(1)):1")
                    (("" (assert)
                      (("" (replace -1)
                        (("" (hide -1 -2)
                          (("" (rewrite conv_sum)
                            (("" (rewrite conv_scal)
                              ((""
                                (rewrite eq_block)
                                (("1"
                                  (hide 2)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3"
                                  (hide 2 -1)
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4"
                                  (hide 2)
                                  (("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (npreal_div_posreal_is_npreal application-judgement "npreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (transp_col formula-decl nil matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (conv_scal formula-decl nil block_matrices nil)
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (eq_block formula-decl nil block_matrices nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (v2ml_col formula-decl nil matrices nil)
    (v2ml_row formula-decl nil matrices nil)
    (conv_sum formula-decl nil block_matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "Vector" vectors "vectors/")
    (- const-decl "Vector" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (block_rank_1 formula-decl nil ellipsoid nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (sat_sect_bound_TCC1 0
  (sat_sect_bound_TCC1-1 nil 3636198539 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "real" vectors "vectors/")
    (sat const-decl "real" ellipsoid nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (- const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (* const-decl "Matrix" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (sat_sect_bound_TCC2 0
  (sat_sect_bound_TCC2-1 nil 3636198539 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "real" vectors "vectors/")
    (sat const-decl "real" ellipsoid nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (- const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (* const-decl "Matrix" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sat_sect_bound 0
  (sat_sect_bound-1 nil 3636277597
   ("" (skeep)
    (("" (beta)
      (("" (bddsimp)
        ((""
          (name-replace "z"
           "Block2V(V2Block(n,1)(x,LAMBDA (i:below(1)): sat(c*x)))")
          ((""
            (name-replace "a"
             "Block2V(V2Block(n,1)(-c,LAMBDA (i:below(1)): 1))")
            ((""
              (name-replace "b"
               "Block2V(V2Block(n,1)((-1/d)*c,LAMBDA (i:below(1)): 1))")
              ((""
                (name-replace "G"
                 "1/2*(transpose(V2Ml(n+1,a))*V2Ml(n+1,b) + transpose(V2Ml(n+1,b))*V2Ml(n+1,a))")
                ((""
                  (case "z*(G*z)= (sat(c*x)-(c*x))*(sat(c*x)-(1/d)*(c*x))")
                  (("1" (lemma sat_sect_bound_step)
                    (("1" (inst -1 n Q c x d)
                      (("1" (assert)
                        (("1" (replace -2) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma block_sym_rank_1)
                      (("2" (inst -1 n c d)
                        (("2" (beta)
                          (("2" (reveal (-2 -3 -4 -5))
                            (("2" (replace -2)
                              (("2"
                                (replace -3)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma sym_block_quad_expr)
                                        (("2"
                                          (inst
                                           -1
                                           n
                                           1
                                           "(1 / d) * transpose(V2Ml(n, c)) * V2Ml(n, c)"
                                           "(-1/2 - 1/2 * (1 / d)) * V2Ml(n, c)"
                                           "I(1)"
                                           x
                                           "LAMBDA (i: below(1)): sat(c * x)"
                                           G
                                           z)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -6 -1)
                                                (("1"
                                                  (bddsimp -1)
                                                  (("1"
                                                    (replace -6 -1 rl)
                                                    (("1"
                                                      (case
                                                       "block_matrices.V2Block
               (n, 1)
               (x,
                LAMBDA (i: below(1)):
                  sat(vectors@vectors[n].*(c, x)))`comp1
            +
            block_matrices.V2Block
                (n, 1)
                (x,
                 LAMBDA (i: below(1)):
                   sat(vectors@vectors[n].*(c, x)))`comp2 = 1+n")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :actuals?
                                                         t)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               *
                                                               1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 sigma)
                                                                (("1"
                                                                  (expand
                                                                   sigma)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       *
                                                                       1
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         sigma)
                                                                        (("1"
                                                                          (expand
                                                                           sigma)
                                                                          (("1"
                                                                            (expand
                                                                             *
                                                                             1
                                                                             13)
                                                                            (("1"
                                                                              (expand
                                                                               I)
                                                                              (("1"
                                                                                (expand
                                                                                 sigma)
                                                                                (("1"
                                                                                  (expand
                                                                                   sigma)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     mult_assoc_vect)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "(1/d)*transpose(V2Ml(n,c))"
                                                                                         "V2Ml(n,c)"
                                                                                         x)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             trans_mat_scal)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "(1 / d) * transpose(V2Ml(n, c))"
                                                                                               x
                                                                                               "(V2Ml(n, c) * x)")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "(matrices.*((1 / d), matrices.transpose(V2Ml(n, c))))`rows =n")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   :actuals?
                                                                                                   t)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       trans_scal)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         transpose2)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "matrices.transpose
                              (matrices.*((1 / d), matrices.transpose(V2Ml(n, c))))`rows = 1")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             :actuals?
                                                                                                             t)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               *
                                                                                                               1
                                                                                                               3)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 sigma)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   sigma)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             left_scal_shift_vect)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "V2Ml(n,c)"
                                                                                                                               x
                                                                                                                               "(-1 / 2 - 1/2 * (1 / d))")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "V2Ml(n,c)`rows=1")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     :actuals?
                                                                                                                                     t)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         v2ml_dot)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "(matrices.*(matrices.*((1 / d), V2Ml(n, c)), x))(0) = (1 / d)*(matrices.*(V2Ml(n, c), x)(0))")
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               v2ml_dot)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "((-1 / 2 - 1/2 * (1 / d)) * (V2Ml(n, c) * x))(0) = (-1 / 2 - 1/2 * (1 / d)) * ((V2Ml(n, c) * x)(0))")
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "V2Ml(n,c)`rows = 1")
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     :actuals?
                                                                                                                                                     t)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (rewrite
                                                                                                                                                         v2ml_dot
                                                                                                                                                         1)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   -1
                                                                                                                                                   -2
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       *)
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               -1
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 *)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "sigma_scal[below(V2Ml(n,c)`cols)]")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "LAMBDA (k: below(V2Ml(n, c)`cols)):
                                 V2Ml(n, c)`matrix(0, k) * x(k)"
                                                                                                                                                       (1/d)
                                                                                                                                                       "n-1"
                                                                                                                                                       0)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (rewrite
                                                       trans_scal)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil)
                                           ("3"
                                            (replace -5)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (below type-eq-decl nil naturalnumbers nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (sat const-decl "real" ellipsoid nil)
    (* const-decl "real" vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Vector" vectors "vectors/")
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sat_sect_bound_step formula-decl nil ellipsoid nil)
    (block_sym_rank_1 formula-decl nil ellipsoid nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (transp_row formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (G skolem-const-decl "Matrix" ellipsoid nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (x skolem-const-decl "Vector[n]" ellipsoid nil)
    (c skolem-const-decl "Vector[n]" ellipsoid nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (v2ml_row formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (v2ml_col formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (trans_scal formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (sigma_scal formula-decl nil sigma "reals/")
    (v2ml_dot formula-decl nil matrices nil)
    (left_scal_shift_vect formula-decl nil matrices nil)
    (transpose2 formula-decl nil matrices nil)
    (trans_mat_scal formula-decl nil matrices nil)
    (mult_assoc_vect formula-decl nil matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (sym_block_quad_expr formula-decl nil posdef nil)
    (transp_col formula-decl nil matrices nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Matrix" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (- const-decl "Vector" vectors "vectors/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (sect_bound_quad_TCC1 0
  (sect_bound_quad_TCC1-1 nil 3637429308
   ("" (cond-disjoint-tcc) nil nil) nil nil))
 (sect_bound_quad_TCC2 0
  (sect_bound_quad_TCC2-1 nil 3637429308
   ("" (cond-coverage-tcc) nil nil) nil nil))
 (sect_bound_quad_TCC3 0
  (sect_bound_quad_TCC3-1 nil 3637429308 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (sect_bound_quad_TCC4 0
  (sect_bound_quad_TCC4-1 nil 3637429308 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (sect_bound_quad_TCC5 0
  (sect_bound_quad_TCC5-1 nil 3637429308 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (sect_bound_quad 0
  (sect_bound_quad-1 nil 3637429315 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sect_bound_ell_TCC1 0
  (sect_bound_ell_TCC1-1 nil 3636905314
   ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (sect_bound_ell_TCC2 0
  (sect_bound_ell_TCC2-1 nil 3636905314
   ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (sect_bound_ell_TCC3 0
  (sect_bound_ell_TCC3-1 nil 3636905314 ("" (subtype-tcc) nil nil) nil
   nil))
 (sect_bound_ell_TCC4 0
  (sect_bound_ell_TCC4-1 nil 3636905314 ("" (subtype-tcc) nil nil) nil
   nil))
 (sect_bound_ell_TCC5 0
  (sect_bound_ell_TCC5-1 nil 3637429308 ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/"))
   nil))
 (sect_bound_ell_TCC6 0
  (sect_bound_ell_TCC6-1 nil 3637429308 ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/"))
   nil))
 (sect_bound_ell_TCC7 0
  (sect_bound_ell_TCC7-1 nil 3637429308 ("" (subtype-tcc) nil nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (sect_bound_ell_TCC8 0
  (sect_bound_ell_TCC8-1 nil 3637429308 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil))
   nil))
 (sect_bound_ell_TCC9 0
  (sect_bound_ell_TCC9-1 nil 3637429498
   ("" (grind :exclude sigma) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (sect_bound_ell_TCC10 0
  (sect_bound_ell_TCC10-1 nil 3637429498
   ("" (grind :exclude sigma) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (sect_bound_ell_TCC11 0
  (sect_bound_ell_TCC11-1 nil 3638660301 ("" (subtype-tcc) nil nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (sect_bound_ell_TCC12 0
  (sect_bound_ell_TCC12-1 nil 3638660301
   ("" (grind :exclude sigma) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (SquareMat type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (sect_bound_ell_TCC13 0
  (sect_bound_ell_TCC13-1 nil 3638660301 ("" (subtype-tcc) nil nil)
   ((nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (sect_bound_ell_TCC14 0
  (sect_bound_ell_TCC14-1 nil 3638660301 ("" (subtype-tcc) nil nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/"))
   nil))
 (sect_bound_ell_TCC15 0
  (sect_bound_ell_TCC15-1 nil 3638660301 ("" (subtype-tcc) nil nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (sect_bound_ell_TCC16 0
  (sect_bound_ell_TCC16-1 nil 3638660301
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (replace -1)
              (("" (replace -1 * rl)
                (("" (lemma div_mult_pos_ge1)
                  (("" (inst -1 d 0 "(*[n](c, x)) ^ 2")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (assert)
                          (("1" (lemma sq_expt2)
                            (("1" (inst -1 "c*x")
                              (("1"
                                (replace -1 1 rl)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq_expt2 formula-decl nil sq "reals/")
    (* const-decl "real" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (d skolem-const-decl "real" ellipsoid nil)
    (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (sect_bound_ell 0
  (sect_bound_ell-1 nil 3637429499
   ("" (skeep)
    (("" (beta)
      (("" (bddsimp)
        (("" (expand "in_ellipsoid_P2?")
          (("" (split)
            (("1" (expand + 1)
              (("1" (lemma posdef22)
                (("1" (name-replace d "c*(Q*c)")
                  (("1"
                    (inst -1 "1/d + mu*1/(d1*d2)" "mu"
                     "mu*-(d1+d2)/(2*d1*d2)" _)
                    (("1" (inst? -1)
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split)
                            (("1" (hide-all-but 1)
                              (("1"
                                (grind :exclude d)
                                (("1"
                                  (apply-extensionality)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (case "x!1=0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "x!2=0")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "x!2=0")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (lemma sq_expt2)
                                (("2"
                                  (inst
                                   -1
                                   "(mu * -(d1 + d2) / (2 * (d1 * d2)))")
                                  (("2"
                                    (replace -1 1 rl)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (rewrite sq_div)
                                        (("2"
                                          (case
                                           "1/d*mu = mu*sq((2 * (d1 * d2)))/(d*sq((2 * (d1 * d2))))")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (case
                                               "sq(mu * -(d1 + d2)) / sq((2 * (d1 * d2))) = (d*sq(mu * -(d1 + d2))) / (d*sq((2 * (d1 * d2))))")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (case
                                                   "mu / (d1 * d2) * mu = 4*mu*mu*d1*d2*d/(d * sq((2 * (d1 * d2))))")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (case
                                                       "mu * sq((2 * (d1 * d2))) / (d * sq((2 * (d1 * d2)))) -
                                                                                       (d * sq(mu * -(d1 + d2))) / (d * sq((2 * (d1 * d2))))
                                                                                       + 4 * mu * mu * d1 * d2 * d / (d * sq((2 * (d1 * d2)))) = (mu * sq((2 * (d1 * d2))) -
                                                                                       (d * sq(mu * -(d1 + d2)))
                                                                                       + 4 * mu * mu * d1 * d2 * d) / (d * sq((2 * (d1 * d2))))")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (rewrite
                                                           pos_div_gt)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide 1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (grind)
                                                                            (("1"
                                                                              (factor
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 pos_times_gt)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               sq
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (reveal
                                                                                   -9)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     pos_times_gt)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       4
                                                                                       _)
                                                                                      (("2"
                                                                                        (inst?
                                                                                         -1)
                                                                                        (("2"
                                                                                          (bddsimp
                                                                                           -1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (hide
                                                                                               1
                                                                                               2
                                                                                               4)
                                                                                              (("3"
                                                                                                (rewrite
                                                                                                 pos_times_gt)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("5"
                                                                                            (rewrite
                                                                                             pos_times_gt
                                                                                             3)
                                                                                            nil
                                                                                            nil)
                                                                                           ("6"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand sq 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3"
                                            (hide-all-but 1)
                                            (("3"
                                              (grind)
                                              (("3"
                                                (lemma zero_times3)
                                                (("3"
                                                  (inst -1 4 _)
                                                  (("3"
                                                    (inst? -1)
                                                    (("3"
                                                      (bddsimp -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide -1 -3)
                                                        (("2"
                                                          (rewrite
                                                           zero_times3)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil)
                       ("3" (skeep) (("3" (assert) nil nil)) nil))
                      nil)
                     ("2" (hide-all-but (1 -4))
                      (("2" (case "1 / d + mu / (d1 * d2) > 0")
                        (("1" (assert) nil nil)
                         ("2" (rewrite posreal_add_closed)
                          (("2" (rewrite quotient_pos_gt) nil nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (name-replace d "1/(c*(Q*c))")
                (("1" (grind)
                  (("1" (apply-extensionality)
                    (("1" (hide 2) (("1" (grind) nil nil)) nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil)
                     ("3" (hide 2) (("3" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (reveal -4) (("2" (assert) nil nil)) nil)) nil)
                 ("3" (typepred Q)
                  (("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)
                 ("4" (typepred Q)
                  (("4" (hide 2) (("4" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (lemma ellipsoid_bound)
              (("3" (inst -1 n Q c x)
                (("3" (assert)
                  (("3" (lemma sq_le)
                    (("3" (inst -1 "abs(c*x)" "sqrt(c*(Q*c))")
                      (("3" (assert)
                        (("3" (hide -2)
                          (("3" (name-replace d "(c * (Q * c))")
                            (("3" (hide -5)
                              (("3"
                                (case
                                 "(# cols := 2,
                                               rows := 2,
                                               matrix
                                                 := LAMBDA (i, j: below(2)):
                                                      COND (i = 0 AND j = 0) -> 1 / d, ELSE -> 0
                                                      ENDCOND #)
                                             = Block2M(M2Block(1,1,1,1)(1/d*I(1),0*I(1),0*I(1),0*I(1)))")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (name-replace
                                     g
                                     " (# cols := 2,
                                        rows := 2,
                                        matrix
                                          := LAMBDA (i, j: below(2)):
                                               COND (i = 0 AND j = 0) -> 1 / (d1 * d2),
                                                    (i = 0 AND j = 1) ->
                                                      -(d1 + d2) / (2 * (d1 * d2)),
                                                    (i = 1 AND j = 0) ->
                                                      -(d1 + d2) / (2 * (d1 * d2)),
                                                    ELSE -> 1
                                               ENDCOND #)")
                                    (("1"
                                      (lemma sect_bound_quad)
                                      (("1"
                                        (inst -1 n d1 d2 f "c*x")
                                        (("1"
                                          (name-replace
                                           v
                                           "Block2V(V2Block(1, 1)
                                                     (LAMBDA (i: below(1)): c * x,
                                                      LAMBDA (i: below(1)): f(c * x)))")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (reveal -4)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (beta -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         quad_sum)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (inst -1 v)
                                                            (("1"
                                                              (case
                                                               "block_matrices.Block2M
                                                                          (block_matrices.M2Block
                                                                               (1, 1, 1, 1)
                                                                               (matrices.*
                                                                                    (1 /
                                                                                      d,
                                                                                     matrices.I(1)),
                                                                                matrices.*(0, matrices.I(1)),
                                                                                matrices.*(0, matrices.I(1)),
                                                                                matrices.*(0, matrices.I(1))))`cols = 2")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :actuals?
                                                                 t)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         quad_scal)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           g
                                                                           mu
                                                                           v)
                                                                          (("1"
                                                                            (case
                                                                             "g`cols=2")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :actuals?
                                                                               t)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     le_plus_le)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         0
                                                                                         "(c * x) ^ 2 / d")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 I
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   v
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     block_mult_comm)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       block_v_mult_comm)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         1
                                                                                                         1
                                                                                                         _
                                                                                                         _)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "V2Block(1, 1)
                                                                                               (LAMBDA (i: below(1)): c * x,
                                                                                                LAMBDA (i: below(1)): f(c * x))"
                                                                                                           "BV2toBV1(M2Block(1, 1, 1, 1)
                                                                                                         (1 / d *
                                                                                                           (# rows := 1,
                                                                                                              cols := 1,
                                                                                                              matrix
                                                                                                                := LAMBDA (i, j: below(1)): 1 #),
                                                                                                          0 *
                                                                                                           (# rows := 1,
                                                                                                              cols := 1,
                                                                                                              matrix
                                                                                                                := LAMBDA (i, j: below(1)): 1 #),
                                                                                                          0 *
                                                                                                           (# rows := 1,
                                                                                                              cols := 1,
                                                                                                              matrix
                                                                                                                := LAMBDA (i, j: below(1)): 1 #),
                                                                                                          0 *
                                                                                                           (# rows := 1,
                                                                                                              cols := 1,
                                                                                                              matrix
                                                                                                                := LAMBDA (i, j: below(1)): 1 #))
                                                                                                   *
                                                                                                   V2Block(1, 1)
                                                                                                          (LAMBDA (i: below(1)): c * x,
                                                                                                           LAMBDA (i: below(1)): f(c * x)))")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "block_matrices.V2Block
                                                                                                              (1, 1)
                                                                                                              (LAMBDA (i: below(1)): vectors@vectors[n].*(c, x),
                                                                                                               LAMBDA (i: below(1)): f(vectors@vectors[n].*(c, x)))`comp1
                                                                                                           +
                                                                                                           block_matrices.V2Block
                                                                                                               (1, 1)
                                                                                                               (LAMBDA (i: below(1)): vectors@vectors[n].*(c, x),
                                                                                                                LAMBDA (i: below(1)):
                                                                                                                  f(vectors@vectors[n].*(c, x)))`comp2 = 2")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               :actuals?
                                                                                                               t)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     *
                                                                                                                     1
                                                                                                                     8)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         M2Block
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               *
                                                                                                                               1
                                                                                                                               (4
                                                                                                                                5))
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 sigma
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     Block2V1
                                                                                                                                     1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       V2Block
                                                                                                                                       1
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           *
                                                                                                                                           1
                                                                                                                                           6)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               Block2V2
                                                                                                                                               1
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 V2Block
                                                                                                                                                 1
                                                                                                                                                 2)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   *
                                                                                                                                                   1
                                                                                                                                                   6)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     sigma)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         *
                                                                                                                                                         1
                                                                                                                                                         6)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           *
                                                                                                                                                           1
                                                                                                                                                           6)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             sigma)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 *
                                                                                                                                                                 1
                                                                                                                                                                 6)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   Block2V2
                                                                                                                                                                   1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     V2Block
                                                                                                                                                                     1
                                                                                                                                                                     2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       *
                                                                                                                                                                       1
                                                                                                                                                                       6)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         sigma)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             *
                                                                                                                                                                             1
                                                                                                                                                                             3)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 Block2V2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   V2Block)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     Block2V1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         *
                                                                                                                                                                                         1
                                                                                                                                                                                         4)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             V2Block)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               sigma)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   *
                                                                                                                                                                                                   1
                                                                                                                                                                                                   2)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     V2Block)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       sigma)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             +
                                                                                                                                                                                                             1
                                                                                                                                                                                                             1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               +
                                                                                                                                                                                                               1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (case
                                                                                                                                                                                                                   "c * x * (1 / d * (c * x)) = (c * x) ^ 2 / d")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                       ^)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         expt)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                           expt)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               expt)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 mu)
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-2
                                                                                                    -5
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     neg_times_le)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "block_matrices.V2Block
                                                                                                  (1, 1)
                                                                                                  (LAMBDA (i: below(1)): vectors@vectors[n].*(c, x),
                                                                                                   LAMBDA (i: below(1)): f(vectors@vectors[n].*(c, x)))`comp1
                                                                                               +
                                                                                               block_matrices.V2Block
                                                                                                   (1, 1)
                                                                                                   (LAMBDA (i: below(1)): vectors@vectors[n].*(c, x),
                                                                                                    LAMBDA (i: below(1)):
                                                                                                      f(vectors@vectors[n].*(c, x)))`comp2 = 2")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           :actuals?
                                                                                                           t)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                (("2"
                                                                                  (expand
                                                                                   g)
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               g)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand M2Block 1)
                                    (("2"
                                      (expand Block2M)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (apply-extensionality)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (case "x!1=0")
                                              (("1"
                                                (case "x!2=0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "x!2=0")
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil)
                                           ("3"
                                            (hide-all-but 1)
                                            (("3" (grind) nil nil))
                                            nil)
                                           ("4"
                                            (hide-all-but 1)
                                            (("4" (grind) nil nil))
                                            nil)
                                           ("5"
                                            (hide-all-but 1)
                                            (("5" (grind) nil nil))
                                            nil)
                                           ("6"
                                            (hide-all-but 1)
                                            (("6" (grind) nil nil))
                                            nil)
                                           ("7"
                                            (hide-all-but 1)
                                            (("7" (grind) nil nil))
                                            nil)
                                           ("8"
                                            (hide-all-but 1)
                                            (("8"
                                              (skeep)
                                              (("8"
                                                (reveal -6)
                                                (("8"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("9"
                                            (hide-all-but 1)
                                            (("9" (grind) nil nil))
                                            nil)
                                           ("10"
                                            (hide-all-but 1)
                                            (("10" (grind) nil nil))
                                            nil)
                                           ("11"
                                            (skeep)
                                            (("11"
                                              (reveal -2)
                                              (("11" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (in_ellipsoid_P2? const-decl "bool" ellipsoid nil)
    (ellipsoid_bound formula-decl nil ellipsoid nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (nnreal type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (eye_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (sect_bound_quad formula-decl nil ellipsoid nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (d skolem-const-decl "real" ellipsoid nil)
    (g skolem-const-decl
     "[# cols: posint, matrix: [[below(2), below(2)] -> real], rows: posint #]"
     ellipsoid nil)
    (neg_times_le formula-decl nil real_props nil)
    (v skolem-const-decl "Vector
    [V2Block(1, 1)
            (LAMBDA (i: below(1)): c * x,
             LAMBDA (i: below(1)): f(c * x))`comp1
      +
      V2Block(1, 1)
             (LAMBDA (i: below(1)): c * x,
              LAMBDA (i: below(1)): f(c * x))`comp2]" ellipsoid nil)
    (block_v_mult_comm formula-decl nil block_matrices nil)
    (Block_Vector2 type-eq-decl nil block_matrices nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (* const-decl "Block_Vector2" block_matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (sigma_0_neg formula-decl nil sigma_below "reals/")
    (Block2V2 const-decl "Vector[V`comp2]" block_matrices nil)
    (access_v_2 formula-decl nil block_matrices nil)
    (access_v_1 formula-decl nil block_matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "real" vectors "vectors/")
    (* const-decl "real" block_matrices nil)
    (Block2V1 const-decl "Vector[V`comp1]" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Block2M1 const-decl "Matrix" block_matrices nil)
    (Block2M3 const-decl "Matrix" block_matrices nil)
    (Block2M2 const-decl "Matrix" block_matrices nil)
    (Block2M4 const-decl "Matrix" block_matrices nil)
    (block_mult_comm formula-decl nil block_matrices nil)
    (Bdiag_square? const-decl "bool" block_matrices nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (le_plus_le formula-decl nil real_props nil)
    (quad_scal formula-decl nil posdef nil)
    (f skolem-const-decl "[real -> real]" ellipsoid nil)
    (x skolem-const-decl "Vector[n]" ellipsoid nil)
    (c skolem-const-decl "Vector[n]" ellipsoid nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (quad_sum formula-decl nil posdef nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (sq_abs formula-decl nil sq "reals/")
    (sq_le formula-decl nil sq "reals/")
    (symmetric? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "Matrix" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "real" vectors "vectors/")
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_add_closed formula-decl nil real_axioms nil)
    (quotient_pos_gt formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "Matrix" matrices nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Mat type-eq-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (pos_div_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (zero_times3 formula-decl nil real_props nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sq_div formula-decl nil sq "reals/")
    (sq_expt2 formula-decl nil sq "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (d2 skolem-const-decl "posreal" ellipsoid nil)
    (d1 skolem-const-decl "posreal" ellipsoid nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mu skolem-const-decl "posreal" ellipsoid nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (d skolem-const-decl "real" ellipsoid nil)
    (/= const-decl "boolean" notequal nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posdef22 formula-decl nil posdef nil))
   shostak))
 (sect_bound_invertible_TCC1 0
  (sect_bound_invertible_TCC1-1 nil 3637575797
   ("" (cond-disjoint-tcc) nil nil) nil nil))
 (sect_bound_invertible_TCC2 0
  (sect_bound_invertible_TCC2-1 nil 3637575797
   ("" (cond-coverage-tcc) nil nil) nil nil))
 (sect_bound_invertible_TCC3 0
  (sect_bound_invertible_TCC3-1 nil 3637575797
   ("" (cond-disjoint-tcc) nil nil) nil nil))
 (sect_bound_invertible_TCC4 0
  (sect_bound_invertible_TCC4-1 nil 3637575797
   ("" (subtype-tcc) nil nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (sect_bound_invertible_TCC5 0
  (sect_bound_invertible_TCC5-1 nil 3637575797
   ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sect_bound_invertible_TCC6 0
  (sect_bound_invertible_TCC6-1 nil 3637575797
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (sect_bound_invertible_TCC7 0
  (sect_bound_invertible_TCC7-1 nil 3637575797
   ("" (subtype-tcc) nil nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (sect_bound_invertible_TCC8 0
  (sect_bound_invertible_TCC8-1 nil 3637575797
   ("" (subtype-tcc) nil nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (* const-decl "Matrix" matrices nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (sect_bound_invertible_TCC9 0
  (sect_bound_invertible_TCC9-1 nil 3637575797
   ("" (subtype-tcc) nil nil)
   ((square? const-decl "bool" matrices nil)
    (add_dim_col formula-decl nil matrices nil)
    (add_dim_row formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (sect_bound_invertible 0
  (sect_bound_invertible-1 nil 3637575798
   ("" (skeep)
    (("" (lemma invertible22)
      (("" (beta)
        (("" (bddsimp)
          ((""
            (case "1 / d * mu -
                       (-mu * d1 + -mu * d2) / (2 * (d1 * d2)) *
                        ((-mu * d1 + -mu * d2) / (2 * (d1 * d2)))
                       + mu / (d1 * d2) * mu = mu*(4 * (d1 * d2) ^ 2 - mu * d * (d1 - d2) ^ 2) / (d*(2*d1*d2)^2)")
            (("1"
              (name-replace D
               "(4 * (d1 * d2) ^ 2 - mu * d * (d1 - d2) ^ 2)")
              (("1"
                (case "(# cols := 2,
                                          rows := 2,
                                          matrix
                                            := LAMBDA (i, j: below(2)):
                                                 COND (i = 0 AND j = 0) -> 1 / d, ELSE -> 0
                                                 ENDCOND #)
                                        +
                                        mu *
                                         (# cols := 2,
                                            rows := 2,
                                            matrix
                                              := LAMBDA (i, j: below(2)):
                                                   COND (i = 0 AND j = 0) -> 1 / (d1 * d2),
                                                        (i = 0 AND j = 1) ->
                                                          -(d1 + d2) / (2 * d1 * d2),
                                                        (i = 1 AND j = 0) ->
                                                          -(d1 + d2) / (2 * d1 * d2),
                                                        ELSE -> 1
                                                   ENDCOND #) = (# cols := 2,
                                            rows := 2,
                                            matrix
                                              := LAMBDA (i, j: below(2)):
                                                   COND (i = 0 AND j = 0) ->1/d+mu* 1 / (d1 * d2),
                                                        (i = 0 AND j = 1) ->
                                                          -mu*(d1 + d2) / (2 * d1 * d2),
                                                        (i = 1 AND j = 0) ->
                                                          -mu*(d1 + d2) / (2 * d1 * d2),
                                                        ELSE -> mu
                                                   ENDCOND #)")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1"
                      (inst -2 "1 / d + mu * 1 / (d1 * d2)" "mu"
                       "-mu * (d1 + d2) / (2 * d1 * d2)"
                       "-mu * (d1 + d2) / (2 * d1 * d2)" "(# cols := 2,
                                 rows := 2,
                                 matrix
                                   := LAMBDA (i, j: below(2)):
                                        COND (i = 0 AND j = 0) ->
                                               1 / d + mu * 1 / (d1 * d2),
                                             (i = 0 AND j = 1) ->
                                               -mu * (d1 + d2) / (2 * d1 * d2),
                                             (i = 1 AND j = 0) ->
                                               -mu * (d1 + d2) / (2 * d1 * d2),
                                             ELSE -> mu
                                        ENDCOND #)")
                      (("1" (assert)
                        (("1" (replace -1)
                          (("1" (rewrite div_eq_zero)
                            (("1" (rewrite zero_times3) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand *)
                    (("2" (expand +)
                      (("2" (apply-extensionality)
                        (("1" (hide 2) (("1" (grind) nil nil)) nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2"
                (case "1 / d * mu -
                                      (-mu * d1 + -mu * d2) / (2 * (d1 * d2)) *
                                       ((-mu * d1 + -mu * d2) / (2 * (d1 * d2)))
                                      + mu / (d1 * d2) * mu = mu*(1 / d  -
                                      (-1 * d1 + -1 * d2) / (2 * (d1 * d2)) *
                                       ((-mu * d1 + -mu * d2) / (2 * (d1 * d2)))
                                      + mu / (d1 * d2)) ")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1"
                      (case "1 / d = 4 * (d1 * d2) ^ 2 / (d*4 * (d1 * d2) ^ 2)")
                      (("1" (replace -1)
                        (("1"
                          (case "mu / (d1 * d2) = mu*d*4*(d1*d2) /(d* 4 * (d1 * d2) ^ 2)")
                          (("1" (replace -1)
                            (("1"
                              (case " (-1 * d1 - d2) / (2 * (d1 * d2)) *
                                                         ((-mu * d1 + -mu * d2) / (2 * (d1 * d2)))= mu*d*(d1+d2)^2/(d*4 * (d1 * d2) ^ 2)")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1 -2 -3)
                                  (("1"
                                    (case
                                     "4 * (d1 * d2) ^ 2 / (d * 4 * (d1 * d2) ^ 2) +
                                                              mu * d * 4 * (d1 * d2) / (d * 4 * (d1 * d2) ^ 2)
                                                              - mu * d * (d1 + d2) ^ 2 / (d * 4 * (d1 * d2) ^ 2) =( 4 * (d1 * d2) ^ 2 +
                                                              mu * d * 4 * (d1 * d2)
                                                              - mu * d * (d1 + d2) ^ 2 )/ (d * 4 * (d1 * d2) ^ 2)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((invertible22 formula-decl nil matrix_lemmas nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (invertible? const-decl "bool" matrices nil)
    (expt def-decl "real" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (Mat type-eq-decl nil matrices nil)
    (zero_times3 formula-decl nil real_props nil)
    (div_eq_zero formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Matrix" matrices nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "Matrix" matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sect_bound_inv_TCC1 0
  (sect_bound_inv_TCC1-1 nil 3637516430
   ("" (cond-disjoint-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (sect_bound_inv_TCC2 0
  (sect_bound_inv_TCC2-1 nil 3637516430
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (split)
            (("1" (grind) nil nil)
             ("2" (lemma sect_bound_invertible)
              (("2" (inst -1 d d1 d2 mu)
                (("2" (beta) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sect_bound_invertible formula-decl nil ellipsoid nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (square? const-decl "bool" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil))
   nil))
 (sect_bound_inv 0
  (sect_bound_inv-1 nil 3637516431
   ("" (skeep)
    (("" (beta)
      (("" (bddsimp)
        ((""
          (case "1 / d * mu -
                (-mu * d1 + -mu * d2) / (2 * (d1 * d2)) *
                 ((-mu * d1 + -mu * d2) / (2 * (d1 * d2)))
                + mu / (d1 * d2) * mu = mu*(4 * (d1 * d2) ^ 2 - mu * d * (d1 - d2) ^ 2) / (d*(2*d1*d2)^2)")
          (("1"
            (name-replace D
             "(4 * (d1 * d2) ^ 2 - mu * d * (d1 - d2) ^ 2)")
            (("1" (lemma inv22)
              (("1"
                (case "(# cols := 2,
                                 rows := 2,
                                 matrix
                                   := LAMBDA (i, j: below(2)):
                                        COND (i = 0 AND j = 0) -> 1 / d, ELSE -> 0
                                        ENDCOND #)
                               +
                               mu *
                                (# cols := 2,
                                   rows := 2,
                                   matrix
                                     := LAMBDA (i, j: below(2)):
                                          COND (i = 0 AND j = 0) -> 1 / (d1 * d2),
                                               (i = 0 AND j = 1) ->
                                                 -(d1 + d2) / (2 * d1 * d2),
                                               (i = 1 AND j = 0) ->
                                                 -(d1 + d2) / (2 * d1 * d2),
                                               ELSE -> 1
                                          ENDCOND #) = (# cols := 2,
                                   rows := 2,
                                   matrix
                                     := LAMBDA (i, j: below(2)):
                                          COND (i = 0 AND j = 0) ->1/d+mu* 1 / (d1 * d2),
                                               (i = 0 AND j = 1) ->
                                                 -mu*(d1 + d2) / (2 * d1 * d2),
                                               (i = 1 AND j = 0) ->
                                                 -mu*(d1 + d2) / (2 * d1 * d2),
                                               ELSE -> mu
                                          ENDCOND #)")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1"
                      (inst -1 "1 / d + mu * 1 / (d1 * d2)" "mu"
                       "-mu * (d1 + d2) / (2 * d1 * d2)"
                       "-mu * (d1 + d2) / (2 * d1 * d2)" "(# cols := 2,
                           rows := 2,
                           matrix
                             := LAMBDA (i, j: below(2)):
                                  COND (i = 0 AND j = 0) ->
                                         1 / d + mu * 1 / (d1 * d2),
                                       (i = 0 AND j = 1) ->
                                         -mu * (d1 + d2) / (2 * d1 * d2),
                                       (i = 1 AND j = 0) ->
                                         -mu * (d1 + d2) / (2 * d1 * d2),
                                       ELSE -> mu
                                  ENDCOND #)")
                      (("1" (assert)
                        (("1" (bddsimp -1)
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1"
                                (hide 1 -2)
                                (("1"
                                  (rewrite div_eq_zero)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite zero_times3)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (hide -1)
                              (("2"
                                (replace -1)
                                (("2"
                                  (expand *)
                                  (("2"
                                    (apply-extensionality)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (case "x!1=0")
                                        (("1"
                                          (case "x!2=0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (grind :exclude D)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (grind :exclude D)
                                              (("2"
                                                (case
                                                 "(1 / (mu * D / (4 * (d1 * d1 * d2 * d2 * d)))) = (4 * (d1 * d1 * d2 * d2 * d))/(mu * D)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (grind :exclude D)
                                                    (("1"
                                                      (cross-mult)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (grind :exclude D)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (rewrite zero_times3)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "x!2=0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (cross-mult)
                                              (("1"
                                                (grind :exclude D)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (grind :exclude D)
                                              (("2"
                                                (cross-mult)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2 -1 -2)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (rewrite div_eq_zero)
                                        (("3"
                                          (rewrite zero_times3)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (hide -1)
                    (("2" (expand *)
                      (("2" (expand +)
                        (("2" (apply-extensionality)
                          (("1" (hide 2) (("1" (grind) nil nil)) nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (case "1 / d * mu -
                             (-mu * d1 + -mu * d2) / (2 * (d1 * d2)) *
                              ((-mu * d1 + -mu * d2) / (2 * (d1 * d2)))
                             + mu / (d1 * d2) * mu = mu*(1 / d  -
                             (-1 * d1 + -1 * d2) / (2 * (d1 * d2)) *
                              ((-mu * d1 + -mu * d2) / (2 * (d1 * d2)))
                             + mu / (d1 * d2)) ")
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1"
                    (case "1 / d = 4 * (d1 * d2) ^ 2 / (d*4 * (d1 * d2) ^ 2)")
                    (("1" (replace -1)
                      (("1"
                        (case "mu / (d1 * d2) = mu*d*4*(d1*d2) /(d* 4 * (d1 * d2) ^ 2)")
                        (("1" (replace -1)
                          (("1"
                            (case " (-1 * d1 - d2) / (2 * (d1 * d2)) *
                                          ((-mu * d1 + -mu * d2) / (2 * (d1 * d2)))= mu*d*(d1+d2)^2/(d*4 * (d1 * d2) ^ 2)")
                            (("1" (replace -1)
                              (("1"
                                (hide -1 -2 -3)
                                (("1"
                                  (case
                                   "4 * (d1 * d2) ^ 2 / (d * 4 * (d1 * d2) ^ 2) +
                                             mu * d * 4 * (d1 * d2) / (d * 4 * (d1 * d2) ^ 2)
                                             - mu * d * (d1 + d2) ^ 2 / (d * 4 * (d1 * d2) ^ 2) =( 4 * (d1 * d2) ^ 2 +
                                             mu * d * 4 * (d1 * d2)
                                             - mu * d * (d1 + d2) ^ 2 )/ (d * 4 * (d1 * d2) ^ 2)")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (inv22 formula-decl nil matrix_lemmas nil)
    (Mat type-eq-decl nil matrices nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_eq_zero formula-decl nil real_props nil)
    (zero_times3 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (times_div2 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (mu skolem-const-decl "posreal" ellipsoid nil)
    (D skolem-const-decl "real" ellipsoid nil)
    (d skolem-const-decl "posreal" ellipsoid nil)
    (d1 skolem-const-decl "posreal" ellipsoid nil)
    (d2 skolem-const-decl "posreal" ellipsoid nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Matrix" matrices nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "Matrix" matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/"))
   shostak))
 (sect_bound_P2Q_TCC1 0
  (sect_bound_P2Q_TCC1-1 nil 3637576097 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "Matrix" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (sect_bound_P2Q_TCC2 0
  (sect_bound_P2Q_TCC2-1 nil 3637576097 ("" (subtype-tcc) nil nil)
   ((nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (* const-decl "Matrix" matrices nil)
    (+ const-decl "Matrix" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (def_pos? const-decl "bool" posdef nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (in_ellipsoid_P2? const-decl "bool" ellipsoid nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (squareMat? const-decl "bool" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (sect_bound_P2Q 0
  (sect_bound_P2Q-1 nil 3637576098
   ("" (skeep)
    (("" (beta)
      (("" (lemma ellipsoid_equivalence_2)
        (("" (lemma sect_bound_inv)
          (("" (inst -1 d d1 d2 mu)
            (("" (assert)
              (("" (bddsimp)
                (("" (replace -2 1 rl)
                  (("" (inst? -3)
                    (("1" (lemma sect_bound_invertible)
                      (("1" (inst -1 d d1 d2 mu)
                        (("1" (assert) (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sect_bound_inv formula-decl nil ellipsoid nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sect_bound_invertible formula-decl nil ellipsoid nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Matrix" matrices nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "Matrix" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ellipsoid_equivalence_2 formula-decl nil ellipsoid nil))
   shostak))
 (sect_bound_ell_Q_TCC1 0
  (sect_bound_ell_Q_TCC1-1 nil 3637577754 ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/"))
   nil))
 (sect_bound_ell_Q_TCC2 0
  (sect_bound_ell_Q_TCC2-1 nil 3637577754 ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/"))
   nil))
 (sect_bound_ell_Q_TCC3 0
  (sect_bound_ell_Q_TCC3-1 nil 3637577754 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (sect_bound_ell_Q_TCC4 0
  (sect_bound_ell_Q_TCC4-1 nil 3637577754
   ("" (grind :exclude sigma) nil nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (SquareMat type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (sect_bound_ell_Q_TCC5 0
  (sect_bound_ell_Q_TCC5-1 nil 3637577754 ("" (subtype-tcc) nil nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (sect_bound_ell_Q_TCC6 0
  (sect_bound_ell_Q_TCC6-1 nil 3638666479 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/"))
   nil))
 (sect_bound_ell_Q_TCC7 0
  (sect_bound_ell_Q_TCC7-1 nil 3638666479 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (sect_bound_ell_Q_TCC8 0
  (sect_bound_ell_Q_TCC8-1 nil 3638666479
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (lemma sq_expt2)
            (("" (inst -1 "c*x")
              (("" (replace -1 * rl)
                (("" (assert)
                  (("" (lemma div_mult_pos_ge1)
                    (("" (inst -1 d 0 "sq(c*x)")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "real" vectors "vectors/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (sq_expt2 formula-decl nil sq "reals/"))
   nil))
 (sect_bound_ell_Q 0
  (sect_bound_ell_Q-1 nil 3637577755
   ("" (skeep)
    (("" (beta)
      (("" (bddsimp)
        (("" (name-replace d "c*(Q*c)")
          (("" (lemma sect_bound_P2Q)
            (("" (assert)
              ((""
                (inst -1 d d1 d2 mu "(c * x) ^ 2 / d"
                 "Block2V(V2Block(1, 1)
                                           (LAMBDA (i: below(1)): c * x,
                                            LAMBDA (i: below(1)): f(c * x)))")
                (("1" (assert)
                  (("1" (bddsimp -1)
                    (("1" (propax) nil nil)
                     ("2" (hide 2)
                      (("2" (lemma sect_bound_ell)
                        (("2" (inst -1 n Q c x d1 d2 mu f)
                          (("2" (assert)
                            (("2" (expand d) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (rewrite pos_div_ge 1)
                    (("2" (assert)
                      (("2" (lemma sq_expt2)
                        (("2" (hide-all-but (-1 1))
                          (("2" (inst? -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "real" vectors "vectors/")
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (sq_expt2 formula-decl nil sq "reals/")
    (pos_div_ge formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sect_bound_ell formula-decl nil ellipsoid nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (d skolem-const-decl "real" ellipsoid nil)
    (x skolem-const-decl "Vector[n]" ellipsoid nil)
    (c skolem-const-decl "Vector[n]" ellipsoid nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sect_bound_P2Q formula-decl nil ellipsoid nil))
   shostak))
 (sat_sect_bound_ell_Q_TCC1 0
  (sat_sect_bound_ell_Q_TCC1-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/"))
   nil))
 (sat_sect_bound_ell_Q_TCC2 0
  (sat_sect_bound_ell_Q_TCC2-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (sat_sect_bound_ell_Q_TCC3 0
  (sat_sect_bound_ell_Q_TCC3-1 nil 3637580433
   ("" (grind :exclude (sigma *)) nil nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (sat const-decl "real" ellipsoid nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (symmetric? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil))
   nil))
 (sat_sect_bound_ell_Q_TCC4 0
  (sat_sect_bound_ell_Q_TCC4-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (sat_sect_bound_ell_Q_TCC5 0
  (sat_sect_bound_ell_Q_TCC5-1 nil 3638710162
   ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/"))
   nil))
 (sat_sect_bound_ell_Q_TCC6 0
  (sat_sect_bound_ell_Q_TCC6-1 nil 3638710162
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (hide -1 -2 -4 -6 -7)
            (("" (lemma sqrt_0)
              (("" (replace -4 -1 rl)
                (("" (replace -2)
                  (("" (replace -2 * rl)
                    (("" (replace -4) (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_0 formula-decl nil sqrt "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (sat_sect_bound_ell_Q_TCC7 0
  (sat_sect_bound_ell_Q_TCC7-1 nil 3638710162
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (lemma div_mult_pos_ge1)
            (("" (inst -1 "(*[n](c, (Q * c)))" 0 "(*[n](c, x)) ^ 2")
              (("1" (assert)
                (("1" (lemma sq_expt2)
                  (("1" (inst -1 "c*x")
                    (("1" (replace -1 * rl) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma sqrt_gt_0)
                  (("2" (inst -1 "c*(Q*c)")
                    (("1" (replace -4 * rl) (("1" (assert) nil nil))
                      nil)
                     ("2" (expand "in_ellipsoid_Q?")
                      (("2" (flatten)
                        (("2" (expand semidef_pos? -1)
                          (("2" (inst -1 c)
                            (("1" (assert)
                              (("1"
                                (typepred Q)
                                (("1"
                                  (expand square?)
                                  (("1"
                                    (expand "squareMat?")
                                    (("1"
                                      (replace -2 * :actuals? t)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred Q)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Q skolem-const-decl "SquareMat(n)" ellipsoid nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (c skolem-const-decl "Vector[n]" ellipsoid nil)
    (* const-decl "real" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (n skolem-const-decl "posnat" ellipsoid nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (sq_expt2 formula-decl nil sq "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sqrt_gt_0 formula-decl nil sqrt "reals/")
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil))
   nil))
 (sat_sect_bound_ell_Q 0
  (sat_sect_bound_ell_Q-1 nil 3638548115
   ("" (skeep)
    (("" (beta)
      (("" (bddsimp)
        (("" (case "c*(Q*c)>0")
          (("1" (name-replace d1 "sqrt(c * (Q * c))")
            (("1" (lemma sect_bound_ell_Q)
              (("1" (inst -1 n Q c x d1 1 mu sat)
                (("1" (beta)
                  (("1" (bddsimp -1)
                    (("1"
                      (case "(1 /
                                    (4 * (d1 * 1) ^ 2 -
                                      mu * (c * (Q * c)) * (d1 - 1) ^ 2))
                                   *
                                   (# cols := 2,
                                      rows := 2,
                                      matrix
                                        := LAMBDA (i, j: below(2)):
                                             COND (i = 0 AND j = 0) ->
                                                    sq(2 * d1 * 1) * (c * (Q * c)),
                                                  (i = 0 AND j = 1) ->
                                                    (2 * (c * (Q * c)) * d1 * 1) *
                                                     (d1 + 1),
                                                  (i = 1 AND j = 0) ->
                                                    (2 * (c * (Q * c)) * d1 * 1) *
                                                     (d1 + 1),
                                                  ELSE ->
                                                    (4 * d1 * 1) / mu *
                                                     (mu * (c * (Q * c)) + d1 * 1)
                                             ENDCOND #) = (1 / (4 - mu * (d1 - 1) ^ 2)) *
                                   (# cols := 2,
                                      rows := 2,
                                      matrix
                                        := LAMBDA (i, j: below(2)):
                                             COND (i = 0 AND j = 0) -> sq(2 * d1),
                                                  (i = 0 AND j = 1) ->
                                                    (2 * d1) * (d1 + 1),
                                                  (i = 1 AND j = 0) ->
                                                    (2 * d1) * (d1 + 1),
                                                  ELSE -> 4 / mu * (mu * d1 + 1)
                                             ENDCOND #)")
                      (("1" (replace -1) (("1" (assert) nil nil)) nil)
                       ("2" (hide 2)
                        (("2" (hide -1)
                          (("2" (expand * 1 (7 33))
                            (("2" (expand * 1 37)
                              (("2"
                                (apply-extensionality)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (case
                                     "(4 * d1 ^ 2 - (c * (Q * c)) * (d1 - 1) ^ 2 * mu) = (c*(Q*c))*(4 - mu * (d1 - 1) ^ 2)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (name-replace
                                         D
                                         "4 - mu * (d1 - 1) ^ 2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "(1 / ((c * (Q * c)))) *
                        COND (x!1 = 0 AND x!2 = 0) -> sq(2 * d1) * (c * (Q * c)),
                             (x!1 = 0 AND x!2 = 1) ->
                               2 * ((c * (Q * c)) * d1) + 2 * ((c * (Q * c)) * d1 * d1),
                             (x!1 = 1 AND x!2 = 0) ->
                               2 * ((c * (Q * c)) * d1) + 2 * ((c * (Q * c)) * d1 * d1),
                             ELSE -> 4 * d1 / mu * d1 + (c * (Q * c)) * (4 * d1 / mu) * mu
                        ENDCOND
                        =

                         COND (x!1 = 0 AND x!2 = 0) -> sq(2 * d1),
                              (x!1 = 0 AND x!2 = 1) -> 2 * (d1 * d1) + 2 * d1,
                              (x!1 = 1 AND x!2 = 0) -> 2 * (d1 * d1) + 2 * d1,
                              ELSE -> 4 / mu + 4 / mu * d1 * mu
                         ENDCOND ")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "(1 / ((c * (Q * c)) * D)) = (1 / D) *
                           (1 / ((c * (Q * c))))")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (name-replace
                                                           d
                                                           "c*(Q*c)")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (name-replace
                                                         d
                                                         "c*(Q*c)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (case "x!1=0")
                                                (("1"
                                                  (case "x!2=0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "x!2=0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (hide -3)
                                                (("3"
                                                  (hide -1)
                                                  (("3"
                                                    (hide -1)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand d1 1)
                                        (("2"
                                          (name-replace d "c*(Q*c)")
                                          (("2" (grind 1) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (expand d1 -1 1)
                                      (("3"
                                        (case
                                         "sqrt(c * (Q * c)) ^ 2= c*(Q*c)")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (name-replace d "c*(Q*c)")
                                            (("1"
                                              (factor -2)
                                              (("1"
                                                (rewrite
                                                 zero_times3
                                                 -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (name-replace d "c*(Q*c)")
                                          (("2" (grind 1) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil)
                     ("3" (hide 2)
                      (("3" (lemma sat_sect_bound_step)
                        (("3" (inst -1 n Q c x d1)
                          (("3" (assert)
                            (("3" (expand d1 1)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide 2)
                      (("4" (expand d1 1 1)
                        (("4" (name-replace d "c*(Q*c)")
                          (("4" (case "sqrt(d) ^ 2 = d")
                            (("1" (replace -1)
                              (("1"
                                (factor 1)
                                (("1"
                                  (rewrite pos_times_gt)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 1))
                              (("2" (grind) nil nil)) nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (case "sq(sqrt(c*(Q*c)))>0")
              (("1" (rewrite sq_sqrt)
                (("1" (expand "in_ellipsoid_Q?")
                  (("1" (flatten)
                    (("1" (expand "semidef_pos?")
                      (("1" (inst -2 c)
                        (("1" (assert)
                          (("1" (case "Q`rows = n")
                            (("1" (replace -1 :actuals? t)
                              (("1" (propax) nil nil)) nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred Q)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (typepred Q) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite sq_gt_0) (("2" (assert) nil nil)) nil)
               ("3" (expand "in_ellipsoid_Q?")
                (("3" (flatten)
                  (("3" (expand "semidef_pos?")
                    (("3" (inst -1 c)
                      (("1" (case "Q`rows=n")
                        (("1" (replace -1 :actuals? t)
                          (("1" (propax) nil nil)) nil)
                         ("2" (hide-all-but 1)
                          (("2" (typepred Q) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (typepred Q) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (* const-decl "real" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sect_bound_ell_Q formula-decl nil ellipsoid nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sat_sect_bound_step formula-decl nil ellipsoid nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (zero_times3 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (mu skolem-const-decl "posreal" ellipsoid nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sat const-decl "real" ellipsoid nil)
    (d1 skolem-const-decl "{nnz: nnreal | nnz * nnz = c * (Q * c)}"
     ellipsoid nil)
    (Q skolem-const-decl "SquareMat(n)" ellipsoid nil)
    (c skolem-const-decl "Vector[n]" ellipsoid nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (sq_gt_0 formula-decl nil sq "reals/"))
   shostak))
 (ell_proj_lem_1_TCC1 0
  (ell_proj_lem_1_TCC1-1 nil 3638729663 ("" (subtype-tcc) nil nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ell_proj_lem_1_TCC2 0
  (ell_proj_lem_1_TCC2-1 nil 3638729663 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (ell_proj_lem_1_TCC3 0
  (ell_proj_lem_1_TCC3-1 nil 3638729663 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (Zero_mat const-decl "Zero" matrices nil))
   nil))
 (ell_proj_lem_1_TCC4 0
  (ell_proj_lem_1_TCC4-1 nil 3638729663 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (Zero_mat const-decl "Zero" matrices nil))
   nil))
 (ell_proj_lem_1_TCC5 0
  (ell_proj_lem_1_TCC5-1 nil 3638729663 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (eye_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ell_proj_lem_1_TCC6 0
  (ell_proj_lem_1_TCC6-1 nil 3638729663 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil))
   nil))
 (ell_proj_lem_1_TCC7 0
  (ell_proj_lem_1_TCC7-1 nil 3638729663
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (hide-all-but (-8 -9 1))
              (("" (grind :exclude (sigma *)) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil))
   nil))
 (ell_proj_lem_1_TCC8 0
  (ell_proj_lem_1_TCC8-1 nil 3638729663 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil))
   nil))
 (ell_proj_lem_1_TCC9 0
  (ell_proj_lem_1_TCC9-1 nil 3638729663
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (hide-all-but (-8 -9 1))
              (("" (grind :exclude sigma) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "Vector" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (square? const-decl "bool" matrices nil))
   nil))
 (ell_proj_lem_1_TCC10 0
  (ell_proj_lem_1_TCC10-1 nil 3638729663 ("" (subtype-tcc) nil nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (ell_proj_lem_1_TCC11 0
  (ell_proj_lem_1_TCC11-1 nil 3638729663 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/"))
   nil))
 (ell_proj_lem_1_TCC12 0
  (ell_proj_lem_1_TCC12-1 nil 3639851613
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (skeep)
            (("" (lemma sq_expt2)
              (("" (inst -1 "c*x")
                (("" (replace -1 1 rl)
                  (("" (lemma div_mult_pos_ge1)
                    (("" (inst -1 d 0 "sq(c*x)")
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_expt2 formula-decl nil sq "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (d skolem-const-decl "real" ellipsoid nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (* const-decl "real" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (ell_proj_lem_1 0
  (ell_proj_lem_1-1 nil 3638729663
   ("" (skeep)
    (("" (beta)
      (("" (lemma sect_bound_ell_Q)
        (("" (inst -1 n Q c x d1 d2 mu f)
          (("" (beta)
            (("" (bddsimp 1)
              (("" (assert)
                (("" (name-replace d "c * (Q * c)")
                  ((""
                    (name-replace D
                     "4 * (d1 * d2) ^ 2 - mu * d * (d1 - d2) ^ 2")
                    ((""
                      (name-replace h "1 / D *
               (# cols := 2,
                  rows := 2,
                  matrix
                    := LAMBDA (i, j: below(2)):
                         COND (i = 0 AND j = 0) -> sq(2 * d1 * d2) * d,
                              (i = 0 AND j = 1) ->
                                (2 * d * d1 * d2) * (d1 + d2),
                              (i = 1 AND j = 0) ->
                                (2 * d * d1 * d2) * (d1 + d2),
                              ELSE -> (4 * d1 * d2) / mu * (mu * d + d1 * d2)
                         ENDCOND #)")
                      (("1"
                        (name-replace v "Block2V(V2Block(1, 1)
                               (LAMBDA (i: below(1)): c * x,
                                LAMBDA (i: below(1)): f(c * x)))")
                        (("1"
                          (name-replace M
                           "            Block2M(M2Block(n, 1, 1, 1)
                               (transpose(V2Ml(n, (1 / d) * (Q * c))),
                                Zero_mat(1, 1), Zero_mat(n, 1), I(1)))")
                          (("1" (lemma ellipsoid_general_3)
                            (("1"
                              (inst -1 2 "n+1" h M v
                               "Block2V(V2Block(n, 1)
                                          (((c * x) / d) * (Q * c),
                                           LAMBDA (i: below(1)): f(c * x)))"
                               "zero[2]" "(c * x) ^ 2 / d")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma matrix_prod_zero)
                                  (("1"
                                    (inst -1 M)
                                    (("1"
                                      (case "M`cols = 2")
                                      (("1"
                                        (replace -1 :actuals? t)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case "M`rows = n+1")
                                              (("1"
                                                (replace
                                                 -1
                                                 :actuals?
                                                 t)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (expand M)
                                                      (("1"
                                                        (expand v)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             block_v_mult_comm2)
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     *
                                                                     1
                                                                     7)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         M2Block)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             V2Ml
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (name-replace
                                                                               blah1
                                                                               "c*x")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "blah2"
                                                                                 "Q*c")
                                                                                (("1"
                                                                                  (grind)
                                                                                  (("1"
                                                                                    (apply-extensionality
                                                                                     1
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       Q)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand M)
                                                    (("2"
                                                      (grind
                                                       :exclude
                                                       *)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (expand M)
                                          (("2"
                                            (grind :exclude *)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite pos_div_ge)
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite sq_expt2 :dir rl)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3"
                                  (expand M)
                                  (("3" (grind :exclude *) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "Matrix" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (Zero type-eq-decl nil matrices nil)
    (zero? const-decl "bool" matrices nil)
    (* const-decl "Vector" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (M skolem-const-decl "Matrix" ellipsoid nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (c skolem-const-decl "Vector[n]" ellipsoid nil)
    (x skolem-const-decl "Vector[n]" ellipsoid nil)
    (d skolem-const-decl "real" ellipsoid nil)
    (nnreal type-eq-decl nil real_types nil)
    (zero const-decl "Vector" vectors "vectors/")
    (matrix_prod_zero formula-decl nil matrix_lemmas nil)
    (f skolem-const-decl "[real -> real]" ellipsoid nil)
    (Q skolem-const-decl "SquareMat(n)" ellipsoid nil)
    (Block_Vect type-eq-decl nil block_matrices nil)
    (access_m_1 formula-decl nil block_matrices nil)
    (access_m_3 formula-decl nil block_matrices nil)
    (access_m_2 formula-decl nil block_matrices nil)
    (access_m_4 formula-decl nil block_matrices nil)
    (transp_row formula-decl nil matrices nil)
    (zero_row formula-decl nil matrices nil)
    (BV2toBV1 const-decl "Block_Vector" block_matrices nil)
    (+ const-decl "real" vectors "vectors/")
    (Block2V2 const-decl "Vector[V`comp2]" block_matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (Block2V1 const-decl "Vector[V`comp1]" block_matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Block_Vector2" block_matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (block_v_mult_comm2 formula-decl nil block_matrices nil)
    (v skolem-const-decl "Vector
    [V2Block(1, 1)
            (LAMBDA (i: below(1)): c * x,
             LAMBDA (i: below(1)): f(c * x))`comp1
      +
      V2Block(1, 1)
             (LAMBDA (i: below(1)): c * x,
              LAMBDA (i: below(1)): f(c * x))`comp2]" ellipsoid nil)
    (sub_zero_right formula-decl nil vectors "vectors/")
    (sq_expt2 formula-decl nil sq "reals/")
    (pos_div_ge formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (ellipsoid_general_3 formula-decl nil ellipsoid nil)
    (Block_Vector type-eq-decl nil block_matrices nil)
    (V2Block const-decl "Block_Vector" block_matrices nil)
    (Block2V const-decl "Vector[V`comp1 + V`comp2]" block_matrices nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sect_bound_ell_Q formula-decl nil ellipsoid nil))
   shostak))
 (ell_proj_lem_2_TCC1 0
  (ell_proj_lem_2_TCC1-1 nil 3638736541 ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (ell_proj_lem_2_TCC2 0
  (ell_proj_lem_2_TCC2-1 nil 3638736541 ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/"))
   nil))
 (ell_proj_lem_2_TCC3 0
  (ell_proj_lem_2_TCC3-1 nil 3638736541
   ("" (skeep)
    (("" (lemma ellipsoid_bound)
      (("" (inst -1 n Q c x)
        (("" (assert)
          (("" (lemma sqrt_sq_abs)
            (("" (inst -1 "c*x")
              (("" (replace -1 * rl)
                (("" (hide -1)
                  (("" (rewrite sqrt_le)
                    (("" (rewrite sq_expt2)
                      ((""
                        (case "(*[n](c, x)) ^ 2 / (*[n](c, (Q * c))) <=1")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (name-replace d "c*(Q*c)")
                            (("2" (name-replace l "(c*x)^2")
                              (("2"
                                (lemma div_mult_pos_le1)
                                (("2"
                                  (inst -1 d 1 l)
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ellipsoid_bound formula-decl nil ellipsoid nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "real" vectors "vectors/")
    (sq_expt2 formula-decl nil sq "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (d skolem-const-decl "real" ellipsoid nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_le formula-decl nil sqrt "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (sqrt_sq_abs formula-decl nil sqrt "reals/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (ell_proj_lem_2 0
  (ell_proj_lem_2-1 nil 3638736541
   ("" (skeep)
    (("" (expand "in_ellipsoid_Q?")
      (("" (flatten)
        (("" (expand "in_ellipsoid_Q2?")
          (("" (split)
            (("1" (propax) nil nil) ("2" (propax) nil nil)
             ("3" (lemma semidef_qua_trans)
              (("3"
                (inst -1 "Block2M(M2Block(1, n, 1, n)
                                  (I(1), transpose(V2Ml(n, x)), V2Ml(n, x),
                                   Q))"
                 "Block2M(M2Block(1,n,1,n)(I(1),Zero_mat(n,1),(-(c*x)/(c*(Q*c)))*V2Ml(n,c),I(n)))")
                (("1" (assert)
                  (("1"
                    (case "matrices.*(matrices.I(1), matrices.I(1)) = I(1)")
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (lemma v2ml_quad)
                          (("1" (inst -1 n "I(n)" c)
                            (("1" (rewrite ident_mat_prod)
                              (("1" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (ell_proj_combination_TCC1 0
  (ell_proj_combination_TCC1-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil))
   nil))
 (ell_proj_combination_TCC2 0
  (ell_proj_combination_TCC2-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (ell_proj_combination_TCC3 0
  (ell_proj_combination_TCC3-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (ell_proj_combination_TCC4 0
  (ell_proj_combination_TCC4-1 nil 3637580433
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (expand V2Ml 1)
          (("" (hide-all-but 1)
            (("" (typepred Q) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((V2Ml const-decl "Matrix" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (transp_col formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   nil))
 (ell_proj_combination_TCC5 0
  (ell_proj_combination_TCC5-1 nil 3637580433
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (split)
          (("1" (hide-all-but 1)
            (("1" (assert)
              (("1" (typepred Q) (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (typepred Q) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (V2Ml const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "Matrix" matrices nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (squareMat? const-decl "bool" matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   nil))
 (ell_proj_combination_TCC6 0
  (ell_proj_combination_TCC6-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (Zero_mat const-decl "Zero" matrices nil))
   nil))
 (ell_proj_combination_TCC7 0
  (ell_proj_combination_TCC7-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (Zero_mat const-decl "Zero" matrices nil))
   nil))
 (ell_proj_combination_TCC8 0
  (ell_proj_combination_TCC8-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (Zero_mat const-decl "Zero" matrices nil))
   nil))
 (ell_proj_combination_TCC9 0
  (ell_proj_combination_TCC9-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((* const-decl "Matrix" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil))
   nil))
 (ell_proj_combination_TCC10 0
  (ell_proj_combination_TCC10-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (eye_row formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ell_proj_combination_TCC11 0
  (ell_proj_combination_TCC11-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil))
   nil))
 (ell_proj_combination_TCC12 0
  (ell_proj_combination_TCC12-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil))
   nil))
 (ell_proj_combination_TCC13 0
  (ell_proj_combination_TCC13-1 nil 3637580433
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (expand M2Block 1)
          (("" (expand Block2M)
            (("" (assert)
              (("" (expand V2Ml 1)
                (("" (assert)
                  (("" (hide-all-but 1)
                    (("" (typepred Q) (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((M2Block const-decl "Block_Matrix" block_matrices nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (zero_col formula-decl nil matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (transp_col formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (zero_row formula-decl nil matrices nil)
    (mult_dim_col formula-decl nil matrices nil)
    (mult_dim_row formula-decl nil matrices nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (transpose const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (- const-decl "Matrix" matrices nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (transp_row formula-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   nil))
 (ell_proj_combination_TCC14 0
  (ell_proj_combination_TCC14-1 nil 3637580433
   ("" (skeep)
    (("" (skeep)
      (("" (split)
        (("1" (typepred Q)
          (("1" (hide -4 -5 -6) (("1" (grind :exclude sigma) nil nil))
            nil))
          nil)
         ("2" (hide -2 -3 -4)
          (("2" (typepred Q) (("2" (grind :exclude sigma) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Zero_mat const-decl "Zero" matrices nil)
    (- const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (* const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil))
   nil))
 (ell_proj_combination_TCC15 0
  (ell_proj_combination_TCC15-1 nil 3637580433
   ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V2Block const-decl "Block_Vector" block_matrices nil))
   nil))
 (ell_proj_combination 0
  (ell_proj_combination-1 nil 3637580434
   ("" (skeep)
    (("" (beta)
      ((""
        (name-replace "v" "
            Block2V(V2Block(1, 1)
                           (LAMBDA (i: below(1)): c * x,
                            LAMBDA (i: below(1)): y))")
        (("" (name-replace "d" "c*(Q*c)")
          (("" (bddsimp)
            (("" (reveal -2) (("" (postpone) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (convex_ellipsoid 0
  (convex_ellipsoid-1 nil 3636305353
   ("" (skeep)
    (("" (expand in_ellipsoid_Q?)
      (("" (assert)
        (("" (flatten)
          (("" (assert)
            (("" (lemma semidef_scal)
              ((""
                (inst -1 lam "Block2M(M2Block(1, n, 1, n)
                                  (I(1), transpose(V2Ml(n, x)), V2Ml(n, x),
                                   Q))")
                (("" (lemma "semidef_scal")
                  ((""
                    (inst -1 "1-lam" "Block2M(M2Block(1, n, 1, n)
                                  (I(1), transpose(V2Ml(n, y)), V2Ml(n, y),
                                   Q))")
                    (("" (lemma semidef_sum)
                      ((""
                        (inst -1 "lam *
                    Block2M(M2Block(1, n, 1, n)
                                   (I(1), transpose(V2Ml(n, x)),
                                    V2Ml(n, x), Q))" "(1 - lam) *
                    Block2M(M2Block(1, n, 1, n)
                                   (I(1), transpose(V2Ml(n, y)),
                                    V2Ml(n, y), Q))")
                        (("1" (assert)
                          (("1" (rewrite conv_scal)
                            (("1" (rewrite conv_scal)
                              (("1"
                                (rewrite conv_sum)
                                (("1"
                                  (case
                                   "Block2M(M2Block(1, n, 1, n)
                                  (lam * I(1) + (1 - lam) * I(1),
                                   lam * transpose(V2Ml(n, x)) +
                                    (1 - lam) * transpose(V2Ml(n, y)),
                                   lam * V2Ml(n, x) +
                                    (1 - lam) * V2Ml(n, y),
                                   lam * Q + (1 - lam) * Q)) = Block2M(M2Block(1, n, 1, n)
                                  (I(1),
                                   transpose(V2Ml(n,
                                                  lam * x +
                                                   (1 - lam) * y)),
                                   V2Ml(n, lam * x + (1 - lam) * y), Q))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (rewrite eq_block)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1"
                                          (expand +)
                                          (("1"
                                            (expand *)
                                            (("1"
                                              (expand I)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (lemma trans_scal)
                                            (("2"
                                              (inst -1 "V2Ml(n,x)" lam)
                                              (("2"
                                                (replace -1 1 rl)
                                                (("2"
                                                  (lemma trans_scal)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "V2Ml(n,y)"
                                                     (1-lam))
                                                    (("2"
                                                      (replace -1 1 rl)
                                                      (("2"
                                                        (rewrite
                                                         trans_sum)
                                                        (("2"
                                                          (lemma
                                                           v2ml_scal)
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1
                                                               rl)
                                                              (("2"
                                                                (lemma
                                                                 v2ml_scal)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   n
                                                                   y
                                                                   "1-lam")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("2"
                                                                      (rewrite
                                                                       v2ml_sum)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           trans_eq)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "V2Ml(n, (1 - lam) * y) + V2Ml(n, lam * x)"
                                                                             "V2Ml(n, lam * x) + V2Ml(n, (1 - lam) * y)")
                                                                            (("2"
                                                                              (bddsimp
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 1
                                                                                 3)
                                                                                (("2"
                                                                                  (lemma
                                                                                   v2ml_sum)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     n
                                                                                     "(1-lam)*y"
                                                                                     "lam*x")
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1
                                                                                       1
                                                                                       rl)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             1
                                                                                             rl)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               v2ml_sum)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 n
                                                                                                 "lam*x"
                                                                                                 "(1-lam)*y")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "add_comm[n]")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (rewrite v2ml_sum)
                                          (("3"
                                            (rewrite v2ml_scal)
                                            (("3"
                                              (rewrite v2ml_scal)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4"
                                          (expand + 1)
                                          (("4"
                                            (expand * 1)
                                            (("4"
                                              (apply-extensionality)
                                              (("1"
                                                (apply-extensionality)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_ellipsoid_Q? const-decl "bool" ellipsoid nil)
    (semidef_scal formula-decl nil posdef nil)
    (semidef_sum formula-decl nil posdef nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "Matrix" matrices nil)
    (+ const-decl "real" vectors "vectors/")
    (* const-decl "Vector" vectors "vectors/")
    (eq_block formula-decl nil block_matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (v2ml_scal formula-decl nil matrices nil)
    (v2ml_sum formula-decl nil matrices nil)
    (trans_eq formula-decl nil matrices nil)
    (add_comm formula-decl nil vectors "vectors/")
    (add_dim_col formula-decl nil matrices nil)
    (add_dim_row formula-decl nil matrices nil)
    (trans_sum formula-decl nil matrices nil)
    (trans_scal formula-decl nil matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lam skolem-const-decl "nnreal" ellipsoid nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (transp_col formula-decl nil matrices nil)
    (v2ml_row formula-decl nil matrices nil)
    (transp_row formula-decl nil matrices nil)
    (v2ml_col formula-decl nil matrices nil)
    (eye_col formula-decl nil matrices nil)
    (eye_row formula-decl nil matrices nil)
    (conv_sum formula-decl nil block_matrices nil)
    (conv_scal formula-decl nil block_matrices nil)
    (mult_scal_dim_col formula-decl nil matrices nil)
    (mult_scal_dim_row formula-decl nil matrices nil)
    (* const-decl "Matrix" matrices nil)
    (y skolem-const-decl "Vector[n]" ellipsoid nil)
    (Q skolem-const-decl "SquareMat(n)" ellipsoid nil)
    (x skolem-const-decl "Vector[n]" ellipsoid nil)
    (n skolem-const-decl "posnat" ellipsoid nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (SquareMat type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (V2Ml const-decl "Matrix" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (transpose const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (M2Block const-decl "Block_Matrix" block_matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Block2M const-decl "Matrix" block_matrices nil)
    (Block_Matrix type-eq-decl nil block_matrices nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (semidef_pos? const-decl "bool" posdef nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)))

