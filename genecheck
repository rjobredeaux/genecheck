#!/usr/bin/python

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation\; either version 2 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# Written and (c) by Romain Jobredeaux GEORGIA TECH
# Contact <jobredeaux@gatech.edu> for comment & bug reports

# This master script gathers all dimensions of matrices and vectors used in the c file
# given in argument, and creates the ACSL library of axioms describing them.
# The script then calls Frama-c -ellipsoid-pvs on the input file



import sys, re, fileinput, os, subprocess


def main():
   libpath = os.environ.get('PVS_LIBRARY_PATH')
   if (libpath):
      if (not re.search('/usr/local/lib/genecheck/pvs',libpath)):
         os.environ['PVS_LIBRARY_PATH'] = os.environ['PVS_LIBRARY_PATH'] + ':/usr/local/lib/genecheck/pvs'
      if (not re.search('why3',libpath)):
         libwhy3 = subprocess.check_output(['why3','--print-libdir'])
         os.environ['PVS_LIBRARY_PATH'] = os.environ['PVS_LIBRARY_PATH'] + ':' + libwhy3 +'/pvs'
   else:
      raise NameError('the PVS_LIBRARY_PATH environment variable must be set\n'+
                      'with the nasa library directory.\n'+
                      'Additionally, to replay the proofs with PVS, the path to genecheck\n' +
                      'pvs library (/usr/local/lib/pvs*) and why3 pvs library folder must be added.')
      
   
   # add include to base.h if not present
   f = open(sys.argv[1],'r')
   if (not re.findall(re.escape(r'#include "base.h"'),f.read())):
      f.close()
      for line in fileinput.input(sys.argv[1],inplace=1):
         if line.startswith('#include'):
            print r'#include "base.h"'
         print line,
      fileinput.close()
   else:
      f.close()
   # gather matrix dimensions used in argument c file
   f = open(sys.argv[1], 'r')
   strings = re.findall(r'mat_of_([0-9]+)x([0-9]+)_', f.read())
   # format and eliminate doubles
   output = []
   for string in strings:
     if (string[0],string[1]) not in output :
       output.append((string[0],string[1]))
   base = open('base.h','w')
   for line in fileinput.input('/usr/local/lib/genecheck/acsl/base.h.in',mode='r'):
      base.write(line)
   for (i,j) in output:
     base.write(mat(i,j))
   f.close()

   # gather vector dimensions used in argument c file
   f = open(sys.argv[1], 'r')
   strings = re.findall(r'vect_of_([0-9]+)_', f.read())
   output = []
   for string in strings:
     if string not in output :
       output.append(string)
   for i in output :
     base.write(vec(i))
   f.close()
   base.write('}*/')
   base.close()
   os.system('frama-c -ellipsoid-pvs '+sys.argv[1]);



def mat(row,col) :
     s1= ' @ logic matrix mat_of_'+ row + 'x' + col + \
         '_scalar(' +rec1(int(row),int(col)) + ');\n'
     s2 = ' @ axiom mat_of_'+ row + 'x' + col + '_scalar_select:\n'
     s3 = ' @ \\forall matrix A, real '+rec2(int(row),int(col)) + ";\n"
     s4 = ' @ A == mat_of_'+ row + 'x' + col + \
         '_scalar('+rec2(int(row),int(col))+') ==>\n'
     s5 = ' @ axiom mat_of_'+ row + 'x' + col + '_scalar_row:\n'
     s6 = ' @ mat_row(A) == '+ row+";\n"
     s7 = ' @ axiom mat_of_'+ row + 'x' + col + '_scalar_col:\n'
     s8 = ' @ mat_col(A) == '+ col+ ";\n"
     blank = ' @\n'
     return s1 + blank + s2 + s3 + s4 + blank + rec3(int(row),int(col)) + \
         blank + s5 + s3 + s4 + s6 + blank + s7 + s3 + s4 + s8

def vec(length) :
     s1= ' @ logic vector vect_of_'+ length + \
         '_scalar(' +rec_vec_1(int(length)) + ');\n'
     s2 =' @ axiom vect_of_'+ length + '_scalar_select:\n'
     s3 =' @ \\forall vector v, real '+rec_vec_2(int(length)) + ";\n"
     s4 =' @ v == vect_of_'+ length + \
         '_scalar('+rec_vec_2(int(length))+') ==>\n'
     s5 = ' @ axiom vect_of_'+ length + '_scalar_length:\n'
     s6 = ' @ vect_length(v) == '+ length+";\n"
     blank = ' @\n'
     return s1+blank+s2+s3+s4+blank+rec_vec_3(int(length))+blank+s5+s3+s4+s6

def rec_vec_1 (length):
    s=''
    for i in (range(1,length+1)):
        if (i==length):
            s = s + "real x"+'%02d' %(i-1)
        else:
            s = s + "real x"+'%02d' %(i-1)+', '
    return s

def rec_vec_2 (length):
    s=''
    for i in (range(1,length+1)):
        if (i==length):
            s = s + "x"+'%02d' %(i-1)
        else:
            s = s + "x"+'%02d' %(i-1)+', '
    return s

def rec_vec_3(length):
    s=''
    for i in (range(1,length+1)):
            if (i==length):
                s = s + " @ vect_select(v, " + str(i-1) + \
                    ") == x" +'%02d' %(i-1) + " ;\n"
            else:
                s = s + " @ vect_select(v, " + str(i-1) + \
                    ") == x" +'%02d' %(i-1) + " &&\n"
    return s

def rec1( row,col):
    s=''
    for i in (range(1,row+1)):
        for j in (range(1,col+1)):
            if (i==row and j==col):
                s = s + "real x"+'%02d' %(i-1)+'%02d'%(j-1)
            else:
                s = s + "real x"+'%02d' %(i-1)+'%02d'%(j-1)+', '
    return s

def rec2( row,col):
    s=''
    for i in (range(1,row+1)):
        for j in (range(1,col+1)):
            if (i==row and j==col):
                s = s + "x"+'%02d' %(i-1)+'%02d'%(j-1)
            else:
                s = s + "x"+'%02d' %(i-1)+'%02d'%(j-1)+', '
    return s

def rec3( row,col):
    s=''
    for i in (range(1,row+1)):
        for j in (range(1,col+1)):
            if (i==row and j==col):
                s = s + " @ mat_select(A, " + str(i-1) + ", "+ \
                    str(j-1) +") == x" +'%02d' %(i-1) + '%02d'%(j-1) + " ;\n"
            else:
                s = s + " @ mat_select(A, " + str(i-1) + ", "+ \
                    str(j-1) +") == x" +'%02d' %(i-1)+'%02d'%(j-1) + " &&\n"
    return s


if __name__ == '__main__':
  main()
